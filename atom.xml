<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>易锦风的博客</title>
  
  <subtitle>专注互联网和软件技术</subtitle>
  <link href="http://www.formeasy.cc/atom.xml" rel="self"/>
  
  <link href="http://www.formeasy.cc/"/>
  <updated>2025-10-05T14:42:18.731Z</updated>
  <id>http://www.formeasy.cc/</id>
  
  <author>
    <name>formeasy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis 同步机制解析</title>
    <link href="http://www.formeasy.cc/2025/10/05/Redis/Redis%20%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6%E8%A7%A3%E6%9E%90/"/>
    <id>http://www.formeasy.cc/2025/10/05/Redis/Redis%20%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6%E8%A7%A3%E6%9E%90/</id>
    <published>2025-10-05T14:21:03.000Z</published>
    <updated>2025-10-05T14:42:18.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-redis-同步机制的核心与价值"><a class="markdownIt-Anchor" href="#一-redis-同步机制的核心与价值"></a> 一、Redis 同步机制的核心与价值</h2><h3 id="11-核心需求数据备份与读写分离"><a class="markdownIt-Anchor" href="#11-核心需求数据备份与读写分离"></a> 1.1 核心需求：数据备份与读写分离</h3><h4 id="数据备份"><a class="markdownIt-Anchor" href="#数据备份"></a> 数据备份</h4><p>在实际生产环境中，单机Redis实例存在多种风险：</p><ul><li>服务器硬件故障导致数据永久丢失</li><li>操作系统崩溃导致内存数据未持久化</li><li>误操作删除关键数据</li></ul><p>通过同步机制建立主从架构，可以实现：</p><ol><li><strong>多副本存储</strong>：数据至少存在于2个节点（1主1从），典型配置为1主2从</li><li><strong>容灾恢复</strong>：当主节点故障时，可快速提升从节点为新主节点</li><li><strong>数据持久化保障</strong>：结合RDB和AOF持久化策略，即使主节点完全损坏，从节点也能提供完整的数据恢复点</li></ol><p><strong>示例场景</strong>：电商平台商品库存数据，通过同步机制确保即使主节点宕机，从节点也能继续提供服务，避免超卖。</p><h4 id="读写分离"><a class="markdownIt-Anchor" href="#读写分离"></a> 读写分离</h4><p>Redis的主从架构天然支持读写分离：</p><ul><li><strong>主节点(Master)</strong>：处理所有写入操作（SET, INCR等）和部分关键读请求</li><li><strong>从节点(Slave)</strong>：处理90%以上的读请求（GET, HGET等），支持配置多个从节点实现水平扩展</li></ul><p><strong>优势体现</strong>：</p><ul><li>提升系统整体吞吐量：读性能随从节点数量线性增长</li><li>降低主节点负载：将CPU密集型操作（如复杂Lua脚本）分流到从节点</li><li>实现地域就近访问：在不同机房部署从节点，减少网络延迟</li></ul><p><strong>典型应用</strong>：</p><ul><li>社交平台：主节点处理发帖/点赞等写操作，从节点处理信息流展示</li><li>内容管理系统：主节点处理内容更新，从节点处理内容查询</li></ul><h3 id="12-关键目标高效-可靠-低延迟"><a class="markdownIt-Anchor" href="#12-关键目标高效-可靠-低延迟"></a> 1.2 关键目标：高效、可靠、低延迟</h3><h4 id="高效性实现"><a class="markdownIt-Anchor" href="#高效性实现"></a> 高效性实现</h4><p>Redis采用智能复制策略平衡效率：</p><ol><li><p><strong>全量复制</strong>：</p><ul><li>初次连接时执行</li><li>通过RDB快照完成</li><li>优化措施：支持无盘复制（diskless replication）</li></ul></li><li><p><strong>增量复制</strong>：</p><ul><li>基于复制积压缓冲区（repl-backlog-buffer）</li><li>默认大小1MB，可根据网络质量调整</li><li>仅传输变更命令，大幅减少带宽占用</li></ul></li></ol><p><strong>配置建议</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">repl-backlog-size 16mb  # 提升缓冲区大小应对网络不稳定</span><br><span class="line">repl-diskless-sync yes  # 启用无盘复制加速全量同步</span><br></pre></td></tr></table></figure><h4 id="可靠性保障"><a class="markdownIt-Anchor" href="#可靠性保障"></a> 可靠性保障</h4><p>Redis通过多种机制确保同步可靠性：</p><ul><li><strong>断点续传</strong>：基于复制偏移量（replication offset）记录同步进度</li><li><strong>心跳检测</strong>：主从定期（默认10秒）PING-PONG通信</li><li><strong>自动重连</strong>：网络恢复后自动重新建立同步连接</li><li><strong>数据校验</strong>：使用CRC64校验和验证数据一致性</li></ul><h4 id="低延迟优化"><a class="markdownIt-Anchor" href="#低延迟优化"></a> 低延迟优化</h4><p>为实现毫秒级同步延迟，Redis采用：</p><ol><li><strong>TCP长连接</strong>：避免频繁建立连接的开销</li><li><strong>异步复制</strong>：主节点不等待从节点ACK继续处理请求</li><li><strong>延迟监控</strong>：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO replication  # 查看master_repl_offset和slave_repl_offset差值</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>硬件优化</strong>：<ul><li>主从节点部署在同一可用区减少网络延迟</li><li>使用高性能网卡（如10Gbps）</li></ul></li></ol><p><strong>性能指标</strong>：</p><ul><li>同机房延迟：通常&lt;1ms</li><li>跨机房延迟：取决于网络质量，通常&lt;10ms</li><li>极端情况下可配置WAIT命令实现同步写（牺牲性能换取更强一致性）</li></ul><h2 id="二-基础同步主从复制master-slave-replication"><a class="markdownIt-Anchor" href="#二-基础同步主从复制master-slave-replication"></a> 二、基础同步：主从复制（Master-Slave Replication）</h2><p>主从复制是 Redis 同步机制的基石，所有高级同步（哨兵、集群）均基于此扩展。其核心逻辑是通过主节点(Master)和从节点(Slave)的协作，实现数据的分布式存储和读写分离。从节点主动连接主节点，复制主节点的数据集，并实时同步主节点的写操作。这种架构设计不仅提高了系统的可用性，还能有效分担主节点的读请求压力。</p><h3 id="21-主从复制的三个核心阶段"><a class="markdownIt-Anchor" href="#21-主从复制的三个核心阶段"></a> 2.1 主从复制的三个核心阶段</h3><p>主从复制全流程分为&quot;建立连接&quot;、“数据同步”、&quot;命令传播&quot;三个阶段，缺一不可。这三个阶段构成了一个完整的数据同步生命周期，确保主从节点之间的数据最终一致性。</p><h4 id="阶段-1建立连接握手阶段"><a class="markdownIt-Anchor" href="#阶段-1建立连接握手阶段"></a> 阶段 1：建立连接（握手阶段）</h4><p>从节点通过配置<code>slaveof &lt;master-ip&gt; &lt;master-port&gt;</code>（Redis 5.0 后推荐使用更符合现代语义的<code>replicaof</code>）触发连接流程，具体步骤如下：</p><ol><li><p><strong>初始化连接</strong>：</p><ul><li>从节点启动后，向主节点发送<code>SYNC</code>命令（Redis 2.8 前）或更先进的<code>PSYNC</code>命令（Redis 2.8 后，支持增量复制）</li><li>主节点收到命令后，首先验证从节点的<code>requirepass</code>（若配置）与自身<code>masterauth</code>是否一致</li><li>验证通过后，主节点返回<code>+OK</code>响应</li></ul></li><li><p><strong>建立通信通道</strong>：</p><ul><li>主节点创建一个专门的&quot;复制客户端&quot;（用于向从节点发送数据）</li><li>从节点创建&quot;复制监听器&quot;（用于接收主节点发送的数据）</li><li>双方完成TCP连接初始化，为后续数据传输做好准备</li></ul></li><li><p><strong>连接确认</strong>：</p><ul><li>从节点会定期发送<code>PING</code>命令检测连接状态</li><li>主节点响应<code>PONG</code>确认连接正常</li></ul></li></ol><h4 id="阶段-2数据同步全量-增量复制"><a class="markdownIt-Anchor" href="#阶段-2数据同步全量-增量复制"></a> 阶段 2：数据同步（全量 / 增量复制）</h4><p>这是同步的核心阶段，分为两种模式：全量复制（首次同步或从节点断线过久）和增量复制（从节点短期断线后恢复）。选择哪种模式取决于从节点的同步状态和断开时间。</p><h5 id="221-全量复制从-0-到-1-复制完整数据集"><a class="markdownIt-Anchor" href="#221-全量复制从-0-到-1-复制完整数据集"></a> 2.2.1 全量复制：从 0 到 1 复制完整数据集</h5><p>当遇到以下情况时会触发全量复制：</p><ul><li>从节点是全新节点，从未同步过数据</li><li>从节点的<code>replid</code>（主节点标识）与主节点不一致</li><li>从节点的复制偏移量<code>offset</code>不在主节点的复制积压缓冲区范围内</li></ul><p><strong>全量复制详细流程</strong>：</p><ol><li><p><strong>发起请求</strong>：</p><ul><li>从节点发送<code>PSYNC ? -1</code>命令（表示请求全量复制）</li></ul></li><li><p><strong>主节点准备RDB</strong>：</p><ul><li>主节点接收到请求后，执行<code>bgsave</code>命令在后台生成RDB快照文件</li><li>在生成RDB期间，主节点会缓存所有写操作（如<code>SET</code>、<code>HSET</code>）到&quot;复制积压缓冲区&quot;</li></ul></li><li><p><strong>传输RDB文件</strong>：</p><ul><li>RDB生成完成后，主节点通过专用连接将RDB文件分块传输给从节点</li><li>传输过程中使用TCP滑动窗口机制优化网络传输效率</li></ul></li><li><p><strong>从节点加载数据</strong>：</p><ul><li>从节点收到RDB文件后，首先安全地清空自身数据集</li><li>然后将RDB文件加载到内存中，重建数据库</li></ul></li><li><p><strong>同步缓冲命令</strong>：</p><ul><li>主节点发送完RDB后，将&quot;复制积压缓冲区&quot;中的写操作按顺序发送给从节点</li><li>从节点执行这些命令，确保与主节点数据完全一致</li></ul></li></ol><p><strong>性能考量</strong>：</p><ul><li>RDB生成过程会fork子进程，可能导致短暂延迟</li><li>网络传输大数据量可能成为瓶颈</li><li>从节点加载RDB时会出现服务暂停</li><li>建议在业务低峰期执行全量复制，并确保网络带宽充足</li></ul><h5 id="222-增量复制仅同步断线期间的增量数据"><a class="markdownIt-Anchor" href="#222-增量复制仅同步断线期间的增量数据"></a> 2.2.2 增量复制：仅同步断线期间的增量数据</h5><p>当从节点短期断线（如网络闪断）后重新连接，且主节点的&quot;复制积压缓冲区&quot;仍保留断线期间的写操作时，触发增量复制。这种模式显著提高了同步效率。</p><p><strong>增量复制详细流程</strong>：</p><ol><li><p><strong>重新连接</strong>：</p><ul><li>从节点重新连接主节点时，发送<code>PSYNC &lt;replid&gt; &lt;offset&gt;</code>命令</li><li><code>replid</code>是主节点标识，<code>offset</code>是从节点最后一次同步的位置</li></ul></li><li><p><strong>主节点验证</strong>：</p><ul><li>主节点验证<code>replid</code>是否与自身一致</li><li>检查<code>offset</code>是否在&quot;复制积压缓冲区&quot;的有效范围内（缓冲区保留[master_offset - backlog_size, master_offset]的操作）</li></ul></li><li><p><strong>执行增量同步</strong>：</p><ul><li>验证通过后，主节点仅将<code>offset</code>之后的写操作从缓冲区发送给从节点</li><li>从节点执行这些增量命令，快速追上主节点数据状态</li></ul></li></ol><p><strong>增量复制的关键条件</strong>：</p><ol><li>从节点需正确记录上一次同步的<code>replid</code>和<code>offset</code>（存储在<code>replica.conf</code>中）</li><li>主节点的&quot;复制积压缓冲区&quot;需足够大，能够容纳断线期间的写操作</li><li>断线时间未超过<code>repl-backlog-ttl</code>（默认3600秒），避免缓冲区被清空</li></ol><p><strong>优化建议</strong>：</p><ul><li>对于写操作频繁的场景，适当增大<code>repl-backlog-size</code></li><li>监控从节点的复制延迟，及时发现潜在问题</li><li>定期检查复制积压缓冲区的使用情况</li></ul><h4 id="阶段-3命令传播实时同步写操作"><a class="markdownIt-Anchor" href="#阶段-3命令传播实时同步写操作"></a> 阶段 3：命令传播（实时同步写操作）</h4><p>数据同步完成后，主从进入&quot;命令传播&quot;阶段，这是维持数据一致性的关键环节。主节点每执行一次写命令，都会将该命令发送给所有从节点，从节点执行相同命令，确保数据实时同步。</p><p><strong>命令传播的详细机制</strong>：</p><ol><li><p><strong>写命令传播流程</strong>：</p><ul><li>客户端向主节点发送写命令（如<code>SET key value</code>）</li><li>主节点执行命令并修改本地数据</li><li>主节点将命令封装为Redis协议格式，发送给所有从节点</li><li>从节点接收并执行相同命令</li></ul></li><li><p><strong>性能优化策略</strong>：</p><ul><li>主节点采用&quot;异步发送&quot;模式：写命令执行后立即返回客户端，随后异步将命令发送给从节点</li><li>从节点通过<code>repl-disable-tcp-nodelay</code>配置控制TCP特性：<ul><li>默认<code>no</code>（关闭TCP_NODELAY）：TCP会缓冲小数据包，减少网络请求数，但可能增加毫秒级延迟</li><li>设为<code>yes</code>（开启TCP_NODELAY）：写命令立即发送，延迟降低，但网络请求数增加</li></ul></li></ul></li><li><p><strong>复制偏移量监控</strong>：</p><ul><li>主从节点都会维护复制偏移量<code>offset</code></li><li>通过<code>INFO replication</code>可以查看主从节点的<code>master_repl_offset</code>和<code>slave_repl_offset</code></li><li>两者的差值反映了复制延迟</li></ul></li></ol><h3 id="22-主从复制的核心配置"><a class="markdownIt-Anchor" href="#22-主从复制的核心配置"></a> 2.2 主从复制的核心配置</h3><h4 id="主节点配置"><a class="markdownIt-Anchor" href="#主节点配置"></a> 主节点配置</h4><table><thead><tr><th>配置项</th><th>示例值</th><th>说明</th><th>推荐设置</th></tr></thead><tbody><tr><td><code>bind</code></td><td><code>0.0.0.0</code></td><td>允许从节点远程连接</td><td>生产环境建议绑定具体IP</td></tr><tr><td><code>protected-mode</code></td><td><code>no</code></td><td>关闭保护模式</td><td>必须关闭才能远程连接</td></tr><tr><td><code>port</code></td><td><code>6379</code></td><td>主节点服务端口</td><td>默认6379，可修改</td></tr><tr><td><code>requirepass</code></td><td><code>Str0ngP@ss</code></td><td>主节点访问密码</td><td>生产环境必须设置</td></tr><tr><td><code>masterauth</code></td><td><code>Str0ngP@ss</code></td><td>主从同步验证密码</td><td>需与从节点密码一致</td></tr><tr><td><code>repl-backlog-size</code></td><td><code>32mb</code></td><td>复制积压缓冲区大小</td><td>写频繁场景建议增大</td></tr><tr><td><code>repl-backlog-ttl</code></td><td><code>3600</code></td><td>缓冲区保留时间</td><td>默认3600秒(1小时)</td></tr></tbody></table><h4 id="从节点配置"><a class="markdownIt-Anchor" href="#从节点配置"></a> 从节点配置</h4><table><thead><tr><th>配置项</th><th>示例值</th><th>说明</th><th>推荐设置</th></tr></thead><tbody><tr><td><code>replicaof</code></td><td><code>192.168.1.1 6379</code></td><td>指定主节点地址</td><td>Redis 5.0+使用</td></tr><tr><td><code>slaveof</code></td><td><code>192.168.1.1 6379</code></td><td>Redis 5.0前使用</td><td>已弃用</td></tr><tr><td><code>requirepass</code></td><td><code>Str0ngP@ss</code></td><td>从节点密码</td><td>需与主节点masterauth一致</td></tr><tr><td><code>replica-read-only</code></td><td><code>yes</code></td><td>从节点只读模式</td><td>默认开启，防止误写</td></tr><tr><td><code>repl-disable-tcp-nodelay</code></td><td><code>yes</code></td><td>TCP优化选项</td><td>延迟敏感场景开启</td></tr></tbody></table><h4 id="配置验证方法"><a class="markdownIt-Anchor" href="#配置验证方法"></a> 配置验证方法</h4><ol><li><strong>主节点检查</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -a yourpassword info replication</span><br></pre></td></tr></table></figure><p>查看<code>connected_slaves</code>是否为预期的从节点数量，以及每个从节点的状态信息。</p><ol start="2"><li><strong>从节点检查</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -a yourpassword info replication</span><br></pre></td></tr></table></figure><p>确认<code>master_host</code>和<code>master_port</code>是否正确，<code>master_link_status</code>是否为<code>up</code>（表示连接正常）。</p><ol start="3"><li><strong>复制延迟监控</strong>： 比较主节点的<code>master_repl_offset</code>和从节点的<code>slave_repl_offset</code>，两者的差值即为复制延迟。</li></ol><h4 id="常见问题处理"><a class="markdownIt-Anchor" href="#常见问题处理"></a> 常见问题处理</h4><ol><li><p><strong>连接失败</strong>：</p><ul><li>检查防火墙设置</li><li>验证密码配置是否正确</li><li>确认主节点<code>bind</code>配置允许远程连接</li></ul></li><li><p><strong>同步中断</strong>：</p><ul><li>检查网络连接状态</li><li>查看日志文件定位问题</li><li>适当增大<code>repl-timeout</code>（默认60秒）</li></ul></li><li><p><strong>性能优化</strong>：</p><ul><li>对于大型数据集，考虑在低峰期执行全量同步</li><li>适当调整<code>repl-backlog-size</code>避免频繁全量同步</li><li>监控复制延迟，及时发现性能瓶颈</li></ul></li></ol><h2 id="三-高可用同步哨兵模式sentinel"><a class="markdownIt-Anchor" href="#三-高可用同步哨兵模式sentinel"></a> 三、高可用同步：哨兵模式（Sentinel）</h2><h3 id="31-哨兵模式的核心角色与架构"><a class="markdownIt-Anchor" href="#31-哨兵模式的核心角色与架构"></a> 3.1 哨兵模式的核心角色与架构</h3><p>哨兵模式是一个分布式系统，由以下三部分组成：</p><ol><li><p><strong>哨兵节点（Sentinel）</strong>：</p><ul><li>独立的Redis进程，不存储业务数据</li><li>主要职责：<ul><li>持续监控主从节点健康状态</li><li>检测到主节点故障时自动触发故障转移</li><li>通知客户端主从拓扑变更</li><li>充当服务发现的配置中心</li></ul></li></ul></li><li><p><strong>主节点（Master）</strong>：</p><ul><li>与普通Redis主节点功能相同</li><li>需要响应哨兵的监控请求</li><li>向哨兵报告其从节点列表</li></ul></li><li><p><strong>从节点（Slave）</strong>：</p><ul><li>与普通Redis从节点功能相同</li><li>自动被哨兵发现并监控</li><li>在故障转移时可能被提升为新主节点</li></ul></li></ol><p><strong>架构设计要点</strong>：</p><ul><li><p>哨兵节点数量必须≥3且为奇数（推荐3或5个）</p><ul><li>原因：避免脑裂，确保故障转移需要&quot;多数哨兵同意&quot;的机制能正常工作</li><li>示例：3个哨兵时，至少需要2个哨兵达成共识才能执行故障转移</li></ul></li><li><p>主从节点数量可根据业务需求灵活配置</p><ul><li>典型配置：1主2从+3哨兵（适合中小规模应用）</li><li>大型系统可能采用：1主5从+5哨兵</li></ul></li></ul><h3 id="32-哨兵模式的同步逻辑故障转移流程"><a class="markdownIt-Anchor" href="#32-哨兵模式的同步逻辑故障转移流程"></a> 3.2 哨兵模式的同步逻辑（故障转移流程）</h3><h4 id="步骤1监控sentinel-monitoring"><a class="markdownIt-Anchor" href="#步骤1监控sentinel-monitoring"></a> 步骤1：监控（Sentinel Monitoring）</h4><p>哨兵节点通过以下机制实现全面监控：</p><ol><li><strong>初始配置</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor mymaster 192.168.1.1 6379 2</span><br></pre></td></tr></table></figure><ul><li><code>mymaster</code>：主节点别名</li><li><code>192.168.1.1:6379</code>：主节点地址</li><li><code>2</code>：判定客观下线需要的哨兵票数</li></ul><ol start="2"><li><p><strong>健康检查机制</strong>：</p><ul><li>每1秒发送<code>PING</code>命令到所有被监控节点<ul><li>正常响应：返回<code>PONG</code></li></ul></li><li>每10秒发送<code>INFO replication</code>到主节点<ul><li>获取从节点列表及其复制状态</li><li>自动发现新增的从节点</li></ul></li></ul></li><li><p><strong>哨兵集群通信</strong>：</p><ul><li>使用Redis的Pub/Sub功能</li><li>每2秒通过<code>__sentinel__:hello</code>频道广播节点状态</li><li>维护哨兵之间的共识状态</li></ul></li></ol><h4 id="步骤2主观下线与客观下线"><a class="markdownIt-Anchor" href="#步骤2主观下线与客观下线"></a> 步骤2：主观下线与客观下线</h4><ol><li><p><strong>主观下线（SDOWN）</strong>：</p><ul><li>触发条件：单个哨兵在<code>down-after-milliseconds</code>（默认30秒）内未收到主节点的有效响应</li><li>处理动作：该哨兵将主节点标记为&quot;主观下线&quot;</li></ul></li><li><p><strong>客观下线（ODOWN）</strong>：</p><ul><li>触发流程：<ul><li>发起投票：哨兵发送<code>SENTINEL is-master-down-by-addr</code>命令询问其他哨兵</li><li>收集响应：等待其他哨兵回复（包含它们对主节点状态的判断）</li><li>达成共识：当≥<code>quorum</code>个哨兵同意主节点不可用时，标记为&quot;客观下线&quot;</li></ul></li><li>示例：配置<code>quorum=2</code>时，需要至少2个哨兵确认主节点故障</li></ul></li></ol><h4 id="步骤3选举新主节点"><a class="markdownIt-Anchor" href="#步骤3选举新主节点"></a> 步骤3：选举新主节点</h4><p>选举过程采用多级排序策略：</p><ol><li><p><strong>第一优先级：replica-priority</strong></p><ul><li>配置项：<code>replica-priority</code>（默认100）</li><li>规则：数值越小优先级越高</li><li>应用场景：可以手动指定某些从节点优先被选为主节点</li></ul></li><li><p><strong>第二优先级：复制偏移量（offset）</strong></p><ul><li>比较各从节点与主节点的数据同步进度</li><li>选择复制进度最接近原主节点的从节点</li><li>确保数据丢失最少</li></ul></li><li><p><strong>第三优先级：runid</strong></p><ul><li>Redis实例启动时生成的唯一标识</li><li>按字典序选择runid较小的节点</li><li>作为最终裁决条件</li></ul></li></ol><h4 id="步骤4故障转移执行"><a class="markdownIt-Anchor" href="#步骤4故障转移执行"></a> 步骤4：故障转移执行</h4><p>完整的故障转移流程：</p><ol><li><strong>提升新主</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SLAVEOF NO ONE</span><br></pre></td></tr></table></figure><ul><li>取消新主节点的从属关系</li><li>使其开始接受写请求</li></ul><ol start="2"><li><strong>重配置从节点</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLICAOF &lt;new-master-ip&gt; &lt;new-master-port&gt;</span><br></pre></td></tr></table></figure><ul><li>所有从节点开始同步新主节点的数据</li><li>采用增量复制或全量复制（取决于复制偏移量）</li></ul><ol start="3"><li><p><strong>旧主节点处理</strong>：</p><ul><li>当旧主节点恢复后，自动被配置为新主节点的从节点</li><li>通过<code>INFO replication</code>命令可以验证复制关系</li></ul></li><li><p><strong>客户端通知</strong>：</p><ul><li>哨兵通过<code>+switch-master</code>事件通知客户端</li><li>客户端应实现自动重连机制</li></ul></li></ol><h3 id="33-哨兵模式的核心配置实战"><a class="markdownIt-Anchor" href="#33-哨兵模式的核心配置实战"></a> 3.3 哨兵模式的核心配置（实战）</h3><h4 id="关键配置详解"><a class="markdownIt-Anchor" href="#关键配置详解"></a> 关键配置详解</h4><table><thead><tr><th>配置项</th><th>说明</th><th>推荐值</th></tr></thead><tbody><tr><td><code>port 26379</code></td><td>哨兵服务端口</td><td>通常保持默认</td></tr><tr><td><code>sentinel monitor &lt;name&gt; &lt;ip&gt; &lt;port&gt; &lt;quorum&gt;</code></td><td>定义监控的主节点</td><td>根据网络环境调整</td></tr><tr><td><code>sentinel down-after-milliseconds &lt;name&gt; 30000</code></td><td>主观下线判定时间</td><td>生产环境建议30-60秒</td></tr><tr><td><code>sentinel failover-timeout &lt;name&gt; 180000</code></td><td>故障转移超时时间</td><td>根据网络延迟调整</td></tr><tr><td><code>sentinel parallel-syncs &lt;name&gt; 1</code></td><td>并行同步数量</td><td>较大集群可适当增加</td></tr></tbody></table><h4 id="配置示例"><a class="markdownIt-Anchor" href="#配置示例"></a> 配置示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sentinel.conf</span></span><br><span class="line">port 26379</span><br><span class="line">sentinel monitor mycluster 10.0.0.1 6379 2</span><br><span class="line">sentinel down-after-milliseconds mycluster 50000</span><br><span class="line">sentinel failover-timeout mycluster 120000</span><br><span class="line">sentinel auth-pass mycluster MySecurePassword</span><br><span class="line">sentinel parallel-syncs mycluster 2</span><br></pre></td></tr></table></figure><h4 id="运维检查清单"><a class="markdownIt-Anchor" href="#运维检查清单"></a> 运维检查清单</h4><ol><li><strong>启动哨兵</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-sentinel /etc/redis/sentinel.conf</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>监控命令</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 26379 sentinel masters  <span class="comment"># 查看所有监控的主节点</span></span><br><span class="line">redis-cli -p 26379 sentinel slaves mymaster  <span class="comment"># 查看指定主节点的从节点 </span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>故障模拟测试</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模拟主节点宕机</span></span><br><span class="line">redis-cli -p 6379 DEBUG <span class="built_in">sleep</span> 60</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 观察哨兵日志</span></span><br><span class="line"><span class="built_in">tail</span> -f /var/log/redis/sentinel.log</span><br></pre></td></tr></table></figure><ol start="4"><li><p><strong>客户端配置</strong>：</p><ul><li>应配置连接所有哨兵节点地址</li><li>实现自动故障转移处理逻辑</li><li>示例Java客户端配置：</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JedisSentinelPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisSentinelPool</span>(<span class="string">&quot;mymaster&quot;</span>,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;(Arrays.asList(</span><br><span class="line">        <span class="string">&quot;sentinel1:26379&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sentinel2:26379&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sentinel3:26379&quot;</span>)));</span><br></pre></td></tr></table></figure><h2 id="四-分布式同步redis-cluster集群模式"><a class="markdownIt-Anchor" href="#四-分布式同步redis-cluster集群模式"></a> 四、分布式同步：Redis Cluster（集群模式）</h2><h3 id="41-集群模式的核心概念"><a class="markdownIt-Anchor" href="#41-集群模式的核心概念"></a> 4.1 集群模式的核心概念</h3><h4 id="分片机制详解"><a class="markdownIt-Anchor" href="#分片机制详解"></a> 分片机制详解</h4><p>Redis Cluster 使用 CRC16 算法计算 key 的哈希值，然后对 16384 取模得到对应的哈希槽。例如：</p><ul><li>key “user:1001” 的 CRC16 值为 12345，则哈希槽为 12345 % 16384 = 12345</li><li>key “product:2002” 的 CRC16 值为 54321，则哈希槽为 54321 % 16384 = 54321</li></ul><p>哈希槽分配示例：</p><ul><li>3 节点集群：节点1(0-5460)、节点2(5461-10922)、节点3(10923-16383)</li><li>5 节点集群：每个节点约 3276 个槽</li></ul><h4 id="主从复制架构"><a class="markdownIt-Anchor" href="#主从复制架构"></a> 主从复制架构</h4><p>每个主节点可以配置多个从节点，形成多副本保护。从节点会：</p><ul><li>实时同步主节点数据</li><li>在主节点故障时参与选举</li><li>可配置为可读副本分担读压力</li></ul><h4 id="客户端重定向机制"><a class="markdownIt-Anchor" href="#客户端重定向机制"></a> 客户端重定向机制</h4><p>当客户端访问错误节点时，会收到两种重定向响应：</p><ol><li><strong>MOVED</strong>：永久重定向，表示槽已迁移到指定节点</li><li><strong>ASK</strong>：临时重定向，发生在集群扩容/缩容期间</li></ol><h3 id="42-集群模式的同步逻辑"><a class="markdownIt-Anchor" href="#42-集群模式的同步逻辑"></a> 4.2 集群模式的同步逻辑</h3><h4 id="421-分片内同步优化"><a class="markdownIt-Anchor" href="#421-分片内同步优化"></a> 4.2.1 分片内同步优化</h4><ol><li><p><strong>集群感知复制</strong>：</p><ul><li>从节点加入时通过 <code>CLUSTER MEET</code> 发现拓扑</li><li>只同步所属分片的槽数据</li><li>定期交换集群状态信息</li></ul></li><li><p><strong>读写分离配置</strong>：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 允许从节点处理读请求</span><br><span class="line">cluster-replica-ok yes</span><br></pre></td></tr></table></figure><p>启用后，从节点可以：</p><ul><li>响应本地持有的槽的读请求</li><li>其他槽请求仍返回 MOVED</li></ul><h4 id="422-故障转移流程详解"><a class="markdownIt-Anchor" href="#422-故障转移流程详解"></a> 4.2.2 故障转移流程详解</h4><ol><li><p><strong>故障检测阶段</strong>：</p><ul><li>从节点每秒发送 PING</li><li>超时后标记主节点为 <code>PFail</code> (Possible Failure)</li><li>收集其他节点的确认信息</li></ul></li><li><p><strong>选举投票规则</strong>：</p><ul><li>每个主节点有且只有一票</li><li>从节点按以下条件竞选：<ul><li>复制偏移量最新</li><li>节点运行时间最长</li><li>节点ID字典序最小</li></ul></li></ul></li><li><p><strong>数据同步阶段</strong>：</p><ul><li>新主节点生成新的复制ID</li><li>其他从节点执行部分重同步(PSYNC)</li><li>故障期间写入使用故障转移标记</li></ul></li></ol><h3 id="43-集群模式的核心配置与实战"><a class="markdownIt-Anchor" href="#43-集群模式的核心配置与实战"></a> 4.3 集群模式的核心配置与实战</h3><h4 id="配置参数详解"><a class="markdownIt-Anchor" href="#配置参数详解"></a> 配置参数详解</h4><table><thead><tr><th>配置项</th><th>推荐值</th><th>说明</th></tr></thead><tbody><tr><td>cluster-require-full-coverage</td><td>no</td><td>允许部分槽不可用时集群仍可服务</td></tr><tr><td>cluster-migration-barrier</td><td>1</td><td>主节点最少从节点数才开始迁移</td></tr><tr><td>cluster-replica-no-failover</td><td>no</td><td>从节点是否参与故障转移</td></tr></tbody></table><h4 id="集群搭建完整流程"><a class="markdownIt-Anchor" href="#集群搭建完整流程"></a> 集群搭建完整流程</h4><ol><li><strong>准备阶段</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建6个实例配置</span></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> &#123;6379..6384&#125;; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">mkdir</span> -p /redis/<span class="variable">$&#123;port&#125;</span></span><br><span class="line">  <span class="built_in">cp</span> redis.conf /redis/<span class="variable">$&#123;port&#125;</span>/</span><br><span class="line">  sed -i <span class="string">&quot;s/port 6379/port <span class="variable">$&#123;port&#125;</span>/&quot;</span> /redis/<span class="variable">$&#123;port&#125;</span>/redis.conf</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>启动节点</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动所有节点</span></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> &#123;6379..6384&#125;; <span class="keyword">do</span></span><br><span class="line">  redis-server /redis/<span class="variable">$&#123;port&#125;</span>/redis.conf</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>创建集群</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster create \</span><br><span class="line">  127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6381 \</span><br><span class="line">  127.0.0.1:6382 127.0.0.1:6383 127.0.0.1:6384 \</span><br><span class="line">  --cluster-replicas 1 \</span><br><span class="line">  --cluster-yes</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>验证集群</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查集群状态</span></span><br><span class="line">redis-cli -p 6379 cluster nodes | grep master</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 测试数据分布</span></span><br><span class="line">redis-cli -c -p 6379 <span class="built_in">set</span> foo bar</span><br></pre></td></tr></table></figure><h4 id="生产环境建议"><a class="markdownIt-Anchor" href="#生产环境建议"></a> 生产环境建议</h4><ol><li><p><strong>节点规划</strong>：</p><ul><li>至少3个物理机部署</li><li>每个物理机部署主从节点对</li><li>预留30%内存用于故障转移</li></ul></li><li><p><strong>监控指标</strong>：</p><ul><li>槽分布均衡性</li><li>节点间延迟</li><li>故障转移次数</li><li>集群状态变化</li></ul></li><li><p><strong>运维操作</strong>：</p><ul><li>使用 <code>redis-cli --cluster reshard</code> 进行槽迁移</li><li>定期执行 <code>CLUSTER REPLICATE</code> 调整拓扑</li><li>备份时使用 <code>CLUSTER SAVECONFIG</code></li></ul></li></ol><h2 id="五-redis-同步机制的常见问题与优化方案"><a class="markdownIt-Anchor" href="#五-redis-同步机制的常见问题与优化方案"></a> 五、Redis 同步机制的常见问题与优化方案</h2><h3 id="51-问题1全量复制频繁触发"><a class="markdownIt-Anchor" href="#51-问题1全量复制频繁触发"></a> 5.1 问题1：全量复制频繁触发</h3><h4 id="现象表现"><a class="markdownIt-Anchor" href="#现象表现"></a> 现象表现</h4><p>从节点频繁断开与重连，每次重连都触发全量复制(RDB文件传输)，导致主节点CPU和网络带宽占用过高，影响正常业务请求处理。监控中可观察到主节点CPU使用率周期性飙升，网络出口流量激增。</p><h4 id="原因分析"><a class="markdownIt-Anchor" href="#原因分析"></a> 原因分析</h4><ol><li><strong>复制缓冲区过期</strong>：从节点断线时间超过repl-backlog-ttl(默认3600秒)后，复制积压缓冲区被清空，无法支持增量复制</li><li><strong>缓冲区容量不足</strong>：复制积压缓冲区(repl-backlog-size)设置过小(默认16MB)，断线期间的写操作超出缓冲区容量</li><li><strong>主节点标识变更</strong>：主节点runid因重启等原因变更，导致从节点保存的replid与主节点不一致</li><li><strong>网络环境不稳定</strong>：网络抖动或带宽不足导致连接频繁中断</li></ol><h4 id="优化方案"><a class="markdownIt-Anchor" href="#优化方案"></a> 优化方案</h4><ol><li><p><strong>调整缓冲区参数</strong>：</p><ul><li>将repl-backlog-size从16MB调整为64-128MB(根据业务写入量计算：缓冲区大小=平均写入速率×最大预期断线时间)</li><li>将repl-backlog-ttl从3600秒延长至86400秒(1天)</li></ul></li><li><p><strong>保障主节点稳定性</strong>：</p><ul><li>主节点配置appendonly yes，开启AOF持久化</li><li>使用config set命令动态调整参数，避免重启</li><li>部署主节点高可用方案(如哨兵)</li></ul></li><li><p><strong>网络优化</strong>：</p><ul><li>主从节点部署在同一机房或可用区</li><li>使用专线连接跨机房节点</li><li>避免在网络拥堵时段进行部署或维护</li></ul></li><li><p><strong>监控与告警</strong>：</p><ul><li>监控info replication中的connected_slaves和master_repl_offset</li><li>设置全量复制次数阈值告警</li></ul></li></ol><h3 id="52-问题2从节点同步延迟高"><a class="markdownIt-Anchor" href="#52-问题2从节点同步延迟高"></a> 5.2 问题2：从节点同步延迟高</h3><h4 id="现象表现-2"><a class="markdownIt-Anchor" href="#现象表现-2"></a> 现象表现</h4><p>从节点数据与主节点差距较大，通过info replication查看master_repl_offset与slave_repl_offset差值持续增大，从节点读取到旧数据。在电商秒杀等高并发场景下，可能导致库存超卖等问题。</p><h4 id="原因分析-2"><a class="markdownIt-Anchor" href="#原因分析-2"></a> 原因分析</h4><ol><li><strong>主节点写入压力大</strong>：QPS过高导致命令传播不及时</li><li><strong>TCP缓冲延迟</strong>：repl-disable-tcp-nodelay设为no(默认)时，TCP会缓冲数据导致延迟</li><li><strong>从节点性能瓶颈</strong>：<ul><li>CPU资源不足，无法及时处理命令</li><li>内存不足，频繁触发swap</li><li>磁盘IO性能差(RDB加载慢)</li></ul></li><li><strong>从节点数量过多</strong>：单个主节点挂载过多从节点(&gt;5个)</li></ol><h4 id="优化方案-2"><a class="markdownIt-Anchor" href="#优化方案-2"></a> 优化方案</h4><ol><li><p><strong>网络传输优化</strong>：</p><ul><li>从节点配置repl-disable-tcp-nodelay yes</li><li>调整TCP内核参数(net.ipv4.tcp_slow_start_after_idle=0)</li></ul></li><li><p><strong>架构优化</strong>：</p><ul><li>使用Redis Cluster分散写入压力</li><li>实现读写分离，将读请求分散到多个从节点</li><li>限制单个主节点的从节点数量(建议≤5)</li></ul></li><li><p><strong>硬件升级</strong>：</p><ul><li>为从节点配置多核CPU(≥8核)</li><li>使用SSD替代HDD</li><li>增加内存容量，避免swap</li></ul></li><li><p><strong>监控措施</strong>：</p><ul><li>实时监控slave_repl_offset差值</li><li>设置延迟阈值告警(如&gt;100MB)</li></ul></li></ol><h3 id="53-问题3主从数据不一致"><a class="markdownIt-Anchor" href="#53-问题3主从数据不一致"></a> 5.3 问题3：主从数据不一致</h3><h4 id="现象表现-3"><a class="markdownIt-Anchor" href="#现象表现-3"></a> 现象表现</h4><p>主节点执行写命令后，部分从节点未同步该命令，导致主从数据差异。通过redis-cli的diff命令可以检测到不一致的键值，在金融交易等场景可能导致严重问题。</p><h4 id="原因分析-3"><a class="markdownIt-Anchor" href="#原因分析-3"></a> 原因分析</h4><ol><li><strong>异步复制特性</strong>：Redis默认采用异步复制，主节点宕机可能导致数据丢失</li><li><strong>从节点误写入</strong>：replica-read-only配置为no(默认yes)时，从节点可能被误写入</li><li><strong>网络分区</strong>：部分从节点长时间无法连接主节点</li><li><strong>命令传播失败</strong>：主节点在命令传播过程中崩溃</li></ol><h4 id="优化方案-3"><a class="markdownIt-Anchor" href="#优化方案-3"></a> 优化方案</h4><ol><li><strong>一致性配置</strong>：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">min-replicas-to-write 2</span><br><span class="line">min-replicas-max-lag 10</span><br></pre></td></tr></table></figure><p>表示至少2个从节点延迟不超过10秒才允许写入</p><ol start="2"><li><p><strong>从节点保护</strong>：</p><ul><li>强制所有从节点配置replica-read-only yes</li><li>定期检查从节点配置</li></ul></li><li><p><strong>高可用部署</strong>：</p><ul><li>部署Redis Sentinel自动故障转移</li><li>使用Redis Cluster分区容错</li><li>跨机房部署时考虑网络分区场景</li></ul></li><li><p><strong>数据校验机制</strong>：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集群模式检查</span></span><br><span class="line">redis-cli --cluster check &lt;host&gt;:&lt;port&gt;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 主从数据对比</span></span><br><span class="line">redis-cli -h master --scan | <span class="keyword">while</span> <span class="built_in">read</span> key; <span class="keyword">do</span></span><br><span class="line">  diff=$(redis-cli -h master GET <span class="string">&quot;<span class="variable">$key</span>&quot;</span> | diff - &lt;(redis-cli -h slave GET <span class="string">&quot;<span class="variable">$key</span>&quot;</span>))</span><br><span class="line">  [ -n <span class="string">&quot;<span class="variable">$diff</span>&quot;</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$key</span>: <span class="variable">$diff</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p><strong>定期修复</strong>：</p><ul><li>设置定时任务校验数据一致性</li><li>发现不一致时触发从节点resync</li></ul></li></ol><h3 id="54-问题4集群模式哈希槽迁移导致同步中断"><a class="markdownIt-Anchor" href="#54-问题4集群模式哈希槽迁移导致同步中断"></a> 5.4 问题4：集群模式哈希槽迁移导致同步中断</h3><h4 id="现象表现-4"><a class="markdownIt-Anchor" href="#现象表现-4"></a> 现象表现</h4><p>在Redis Cluster扩容/缩容时，执行CLUSTER SETSLOT MIGRATING/IMPORTING命令迁移哈希槽过程中，部分从节点同步中断，客户端请求返回MOVED/ASK重定向错误。</p><h4 id="原因分析-4"><a class="markdownIt-Anchor" href="#原因分析-4"></a> 原因分析</h4><ol><li><strong>数据变更频繁</strong>：迁移过程中大量键被修改，增量复制压力大</li><li><strong>网络波动</strong>：迁移期间网络不稳定导致连接中断</li><li><strong>资源竞争</strong>：迁移过程占用大量CPU和网络资源</li><li><strong>配置不一致</strong>：迁移后集群拓扑信息未及时同步</li></ol><h4 id="优化方案-4"><a class="markdownIt-Anchor" href="#优化方案-4"></a> 优化方案</h4><ol><li><p><strong>迁移时机选择</strong>：</p><ul><li>选择业务低峰期(如凌晨2-4点)执行迁移</li><li>监控QPS和系统负载，在负载较低时操作</li></ul></li><li><p><strong>参数调优</strong>：</p><ul><li>迁移前调大repl-backlog-size(如调整为256MB)</li><li>设置cluster-node-timeout(默认15秒)为更合理的值</li></ul></li><li><p><strong>迁移过程控制</strong>：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分批迁移键空间</span></span><br><span class="line">redis-cli --cluster rebalance \</span><br><span class="line">  --cluster-weight node1=1 node2=0 \</span><br><span class="line">  --cluster-use-empty-masters</span><br></pre></td></tr></table></figure><ol start="4"><li><p><strong>监控与恢复</strong>：</p><ul><li>使用cluster slots实时监控迁移进度</li><li>迁移完成后检查所有节点cluster_state状态</li><li>对同步中断的从节点执行cluster failover强制重新同步</li></ul></li><li><p><strong>客户端处理</strong>：</p><ul><li>客户端实现ASK/MOVED重试逻辑</li><li>使用Redis集群代理屏蔽复杂度</li></ul></li></ol><h2 id="六-redis-同步机制的选型建议"><a class="markdownIt-Anchor" href="#六-redis-同步机制的选型建议"></a> 六、Redis 同步机制的选型建议</h2><h4 id="1-主从复制replication"><a class="markdownIt-Anchor" href="#1-主从复制replication"></a> 1. 主从复制（Replication）</h4><p><strong>适用场景</strong>：</p><ul><li>单机扩展、读写分离</li><li>数据备份容灾</li><li>测试/开发环境</li></ul><p><strong>推荐方案</strong>： 主从复制 + 读写分离（1主多从）</p><p><strong>优势</strong>：</p><ul><li>配置简单（通过replicaof命令即可完成）</li><li>性能开销低（异步复制）</li><li>从节点可分担读请求（如QPS 10万+的场景）</li></ul><p><strong>劣势</strong>：</p><ul><li>主节点宕机需人工切换（需要运维介入）</li><li>可用性较低（无自动故障转移）</li><li>数据延迟（异步复制导致）</li></ul><p><strong>典型应用</strong>： 电商商品详情页缓存、新闻资讯类应用</p><h4 id="2-哨兵模式sentinel"><a class="markdownIt-Anchor" href="#2-哨兵模式sentinel"></a> 2. 哨兵模式（Sentinel）</h4><p><strong>适用场景</strong>：</p><ul><li>高可用需求</li><li>自动故障转移</li><li>7x24小时服务</li></ul><p><strong>推荐方案</strong>： 至少3个哨兵节点+1主2从</p><p><strong>优势</strong>：</p><ul><li>自动监控和故障转移（30秒内完成切换）</li><li>支持通知机制（可通过API对接监控系统）</li><li>配置中心（自动更新客户端连接信息）</li></ul><p><strong>劣势</strong>：</p><ul><li>仅支持单主架构（写入瓶颈）</li><li>无法解决数据分片问题</li><li>脑裂问题需要特殊处理</li></ul><p><strong>配置示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 5000</span><br></pre></td></tr></table></figure><h4 id="3-集群模式cluster"><a class="markdownIt-Anchor" href="#3-集群模式cluster"></a> 3. 集群模式（Cluster）</h4><p><strong>适用场景</strong>：</p><ul><li>大数据量（TB级）</li><li>高并发写入</li><li>需要水平扩展</li></ul><p><strong>推荐方案</strong>： 至少3主3从（官方推荐）</p><p><strong>优势</strong>：</p><ul><li>自动数据分片（16384个slot）</li><li>支持水平扩展（可动态增删节点）</li><li>高可用（主从自动切换）</li></ul><p><strong>劣势</strong>：</p><ul><li>配置复杂（需要规划槽位分配）</li><li>客户端需要支持集群协议</li><li>跨slot操作受限（如事务、Lua脚本）</li></ul><p><strong>性能指标</strong>：</p><ul><li>单节点：8-10万QPS</li><li>集群：线性扩展（如10节点可达80-100万QPS）</li></ul><h4 id="最终建议"><a class="markdownIt-Anchor" href="#最终建议"></a> 最终建议：</h4><h5 id="中小规模业务数据量-10gb读多写少"><a class="markdownIt-Anchor" href="#中小规模业务数据量-10gb读多写少"></a> 中小规模业务（数据量 &lt;10GB，读多写少）</h5><p><strong>方案</strong>：主从复制 + 哨兵模式 <strong>实施要点</strong>：</p><ol><li>部署1主2从架构</li><li>配置3个哨兵节点</li><li>设置合理的down-after-milliseconds（建议5000ms）</li><li>客户端实现自动重连机制</li></ol><h5 id="大规模业务数据量-10gb高并发"><a class="markdownIt-Anchor" href="#大规模业务数据量-10gb高并发"></a> 大规模业务（数据量 &gt; 10GB，高并发）</h5><p><strong>方案</strong>：集群模式 <strong>实施步骤</strong>：</p><ol><li>使用redis-cli --cluster create初始化集群</li><li>确保每个主节点有1-2个从节点</li><li>配置cluster-require-full-coverage为no</li><li>监控集群状态（cluster nodes/cluster info）</li></ol><h5 id="对数据一致性要求极高的业务如金融支付"><a class="markdownIt-Anchor" href="#对数据一致性要求极高的业务如金融支付"></a> 对数据一致性要求极高的业务（如金融支付）</h5><p><strong>增强方案</strong>：</p><ol><li>在集群模式基础上：<ul><li>设置min-replicas-to-write 2</li><li>配置min-replicas-max-lag 10</li></ul></li><li>定期校验：<ul><li>使用redis-check-aof工具</li><li>实现CRC校验机制</li></ul></li><li>建议搭配：<ul><li>持久化采用AOF+fsync everysec</li><li>部署跨机房容灾方案</li></ul></li></ol>]]></content>
    
    
    <summary type="html">Redis 同步机制解析</summary>
    
    
    
    <category term="数据库" scheme="http://www.formeasy.cc/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="http://www.formeasy.cc/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis 解锁：C++ 实战深度探索 Set 数据类型</title>
    <link href="http://www.formeasy.cc/2025/10/05/Redis/Redis%20%E8%A7%A3%E9%94%81%EF%BC%9AC++%20%E5%AE%9E%E6%88%98%E6%B7%B1%E5%BA%A6%E6%8E%A2%E7%B4%A2%20Set%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://www.formeasy.cc/2025/10/05/Redis/Redis%20%E8%A7%A3%E9%94%81%EF%BC%9AC++%20%E5%AE%9E%E6%88%98%E6%B7%B1%E5%BA%A6%E6%8E%A2%E7%B4%A2%20Set%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2025-10-05T14:07:35.000Z</published>
    <updated>2025-10-05T14:20:08.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>欢迎来到 Redis Set 的终极指南。如果您曾需要管理一组独一无二的元素集合——无论是用户 ID、文章标签还是邮件地址——并希望以闪电般的速度对其执行强大的集合运算，那么您来对地方了。Redis Set 绝不是一个简单的列表，它是一种精妙的数据结构，将数学中强大的集合理论直接带入您的高性能数据库中。</p><p>在本文中，我们将从最基础的概念讲起，逐步深入到高级的实际应用。我们将使用优秀的 C++ 库 <code>redis-plus-plus</code> 来演示所有示例，并逐行剖析代码。无论您是 C++ 开发者、后端工程师，还是仅仅对 Redis 感到好奇，读完本文，您都将深刻理解是什么让 Set 成为 Redis 中功能最丰富的工具之一。</p><h3 id="redis-set-究竟是什么"><a class="markdownIt-Anchor" href="#redis-set-究竟是什么"></a> Redis Set 究竟是什么？</h3><p>在我们深入代码之前，先来建立一个清晰的思维模型。想象你有一个<strong>魔力袋</strong>，你可以往里面扔东西，但这个袋子有两条非常特殊的规则：</p><ol><li><strong>强制保持唯一</strong>：这个袋子会自动拒绝重复的物品。如果你想把一个标有“A”的弹珠放进一个已经有“A”弹珠的袋子里，它会阻止你，确保袋子里每样东西都只有一个。</li><li><strong>顺序毫不在意</strong>：当你从袋子里往外取东西时，它们的顺序是完全随机的。袋子不记得到底是按什么顺序把东西放进去的。</li></ol><p>这个“魔力袋”正是 Redis Set 的精准比喻：一个<strong>无序的、元素唯一的字符串集合</strong>。这个简单的定义是其强大功能的基石，使其能够以惊人的速度进行成员资格检查、数量统计以及诸如交集、并集等复杂的服务器端运算。</p><hr /><h3 id="第一章基础入门-创建和查看你的第一个-set"><a class="markdownIt-Anchor" href="#第一章基础入门-创建和查看你的第一个-set"></a> 第一章：基础入门 - 创建和查看你的第一个 Set</h3><p>让我们从最基本的操作开始：如何向一个 Set 添加元素，以及如何查看它的全部内容。为此，我们将使用 <code>SADD</code> 和 <code>SMEMBERS</code> 这两个命令。</p><h4 id="sadd向集合中添加成员"><a class="markdownIt-Anchor" href="#sadd向集合中添加成员"></a> <code>SADD</code>：向集合中添加成员</h4><p><code>SADD</code> 是您向 Set 中添加一个或多个元素的主要工具。如果某个元素已经存在，Redis 会优雅地忽略它。该命令的返回值是_新_成功添加的元素的数量。</p><h4 id="smembers获取所有成员"><a class="markdownIt-Anchor" href="#smembers获取所有成员"></a> <code>SMEMBERS</code>：获取所有成员</h4><p><code>SMEMBERS</code> 的功能正如其名：返回指定 Set 中的所有成员。这对于获取整个集合非常有用，但请注意：<strong>在拥有数百万元素的超大 Set 上使用此命令可能会暂时阻塞您的 Redis 服务器</strong>，因为它需要时间来准备所有数据。我们将在后续章节中讨论更安全的替代方案 <code>SSCAN</code>。</p><h4 id="c-实战sadd-与-smembers"><a class="markdownIt-Anchor" href="#c-实战sadd-与-smembers"></a> C++ 实战：<code>sadd</code> 与 <code>smembers</code></h4><p>现在，让我们来分析一段代码，它演示了这些基础操作。</p><p><img src="ecfbf686c86c863f90654a62651e1aeb.png" alt="image.png" /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入必要的头文件...</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sw/redis++/redis.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个辅助函数，用于打印容器内容</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintContainer</span><span class="params">(<span class="type">const</span> T&amp; container)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; elem : container) &#123;</span><br><span class="line">        std::cout &lt;&lt; elem &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">(sw::redis::Redis&amp; redis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;sadd 和 smembers&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// 清空数据库，确保一个干净的测试环境</span></span><br><span class="line">    redis.<span class="built_in">flushall</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 一次添加一个元素</span></span><br><span class="line">    redis.<span class="built_in">sadd</span>(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 使用初始化列表，一次添加多个元素</span></span><br><span class="line">    redis.<span class="built_in">sadd</span>(<span class="string">&quot;key&quot;</span>, &#123;<span class="string">&quot;222&quot;</span>, <span class="string">&quot;333&quot;</span>, <span class="string">&quot;444&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 使用迭代器，从另一个容器中添加多个元素</span></span><br><span class="line">    std::set&lt;std::string&gt; elems = &#123;<span class="string">&quot;555&quot;</span>, <span class="string">&quot;666&quot;</span>, <span class="string">&quot;777&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">// 返回值是成功插入了多少个元素</span></span><br><span class="line">    redis.<span class="built_in">sadd</span>(<span class="string">&quot;key&quot;</span>, elems.<span class="built_in">begin</span>(), elems.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --- 现在，让我们获取所有元素 ---</span></span><br><span class="line">    std::set&lt;std::string&gt; result;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为我们的 C++ set 构建一个插入迭代器</span></span><br><span class="line">    <span class="keyword">auto</span> it = std::<span class="built_in">inserter</span>(result, result.<span class="built_in">end</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从 Redis set 中获取所有成员，并插入到我们的 C++ set 中</span></span><br><span class="line">    redis.<span class="built_in">smembers</span>(<span class="string">&quot;key&quot;</span>, it);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PrintContainer</span>(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码剖析"><a class="markdownIt-Anchor" href="#代码剖析"></a> 代码剖析：</h5><ol><li><strong><code>redis.flushall()</code></strong>：我们首先清空整个 Redis 数据库，以确保测试环境的纯净。</li><li><strong>单个元素 <code>sadd</code></strong>：<code>redis.sadd(&quot;key&quot;, &quot;111&quot;);</code> 将字符串 “111” 添加到名为 <code>key</code> 的 Set 中。由于 Set 原本是空的，此命令返回 <code>1</code>。</li><li><strong>初始化列表 <code>sadd</code></strong>：<code>redis.sadd(&quot;key&quot;, &#123;&quot;222&quot;, &quot;333&quot;, &quot;444&quot;&#125;);</code> 展示了 <code>redis-plus-plus</code> 库的一个便捷特性，允许您一次性添加多个元素。这比发送三个独立的命令效率更高。此调用将返回 <code>3</code>。</li><li><strong>基于迭代器的 <code>sadd</code></strong>：在这里，我们先填充了一个 C++ 的 <code>std::set</code>，然后使用它的迭代器（<code>elems.begin()</code>, <code>elems.end()</code>）将其所有元素添加到 Redis 的 Set 中。这对于将现有 C++ 容器中的数据同步到 Redis 非常有用。</li><li><strong>使用 <code>smembers</code> 获取数据</strong>：<ul><li>我们创建了一个 <code>std::set&lt;string&gt; result;</code> 来存放从 Redis 返回的数据。在客户端使用 <code>std::set</code> 是一个绝佳选择，因为它不仅 mirroring（镜像）了 Redis Set 的唯一性，还能自动对元素进行排序，便于我们进行可预测的展示。</li><li><code>auto it = std::inserter(result, result.end());</code> 是至关重要的一行。我们需要一种方式告诉 <code>redis-plus-plus</code> 应该把接收到的元素_放在哪里_。<code>inserter</code> 是一种特殊的迭代器，当你给它赋值时，它会调用其关联容器的 <code>insert()</code> 方法。</li><li><code>redis.smembers(&quot;key&quot;, it);</code> 执行命令。<code>redis-plus-plus</code> 获取 <code>key</code> 中的所有成员，并使用我们的迭代器 <code>it</code> 将它们逐一插入到 <code>result</code> 集合中。</li></ul></li></ol><h5 id="c-关键概念inserter-vs-back_inserter"><a class="markdownIt-Anchor" href="#c-关键概念inserter-vs-back_inserter"></a> C++ 关键概念：<code>inserter</code> vs <code>back_inserter</code></h5><p>在原始笔记中，有一个关键的区别被强调了出来：</p><ul><li><code>std::back_inserter</code> 创建一个调用 <code>push_back()</code> 的迭代器。它适用于 <code>std::vector</code>, <code>std::list</code>, <code>std::deque</code> 等容器。</li><li><code>std::set</code> <strong>没有</strong> <code>push_back()</code> 方法，因为它需要维护内部的排序。因此，对于 <code>std::set</code>，我们<strong>必须</strong>使用 <code>std::inserter</code>，它会调用 <code>insert()</code> 方法。</li></ul><h5 id="预测输出"><a class="markdownIt-Anchor" href="#预测输出"></a> 预测输出：</h5><p><code>PrintContainer</code> 函数将打印 <code>result</code> 集合的内容。由于 <code>std::set</code> 会对其元素进行排序，输出将是按字母/数字顺序排列的。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sadd 和 smembers</span><br><span class="line">111 222 333 444 555 666 777</span><br></pre></td></tr></table></figure><hr /><h3 id="第二章深入探索-检查与修改你的-set"><a class="markdownIt-Anchor" href="#第二章深入探索-检查与修改你的-set"></a> 第二章：深入探索 - 检查与修改你的 Set</h3><p>既然我们知道了如何构建一个 Set，接下来让我们学习如何查询它的属性并执行基本的修改。这些命令是 Set 日常操作的核心，并且它们都快得令人难以置信。</p><h4 id="sismember这个元素存在吗-时间复杂度-o1"><a class="markdownIt-Anchor" href="#sismember这个元素存在吗-时间复杂度-o1"></a> <code>SISMEMBER</code>：这个元素存在吗？ (时间复杂度 O(1))</h4><p>这是 Set 命令库中最强大的命令之一。<code>SISMEMBER</code> 检查一个特定元素是否是 Set 的成员。如果存在，返回 <code>1</code> (true)；如果不存在，返回 <code>0</code> (false)。它的性能是 <strong>O(1)</strong>，这意味着其速度是恒定的，不依赖于 Set 的大小。无论是在一个有10个元素的 Set 还是在一个有1000万个元素的 Set 中检查成员资格，花费的时间都是相同的。</p><h5 id="c-实战sismember"><a class="markdownIt-Anchor" href="#c-实战sismember"></a> C++ 实战：<code>sismember</code></h5><p><img src="9713b0a2a8a3beabcac12fcee436e93a.png" alt="image.png" /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">(sw::redis::Redis&amp; redis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;sismember&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    redis.<span class="built_in">flushall</span>();</span><br><span class="line"></span><br><span class="line">    redis.<span class="built_in">sadd</span>(<span class="string">&quot;key&quot;</span>, &#123;<span class="string">&quot;111&quot;</span>, <span class="string">&quot;222&quot;</span>, <span class="string">&quot;333&quot;</span>, <span class="string">&quot;444&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查 &quot;111&quot; 是否是集合的成员</span></span><br><span class="line">    <span class="type">bool</span> result = redis.<span class="built_in">sismember</span>(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;result:&quot;</span> &lt;&lt; result &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>剖析</strong>：我们创建一个 Set，然后使用 <code>sismember</code> 检查 “111” 是否存在。<code>redis-plus-plus</code> 库非常方便地将 Redis 返回的 <code>1</code> 或 <code>0</code> 直接映射为了 C++ 的 <code>bool</code> 类型。因为 “111” 确实在 Set 中，<code>result</code> 将为 <code>true</code>。</li><li><strong>应用场景</strong>：<ul><li><strong>标签系统</strong>：检查一篇博客文章是否已经被标记为 “DevOps”。</li><li><strong>权限控制</strong>：检查一个 <code>userID</code> 是否在 <code>admin_users</code> 这个 Set 中。</li><li><strong>唯一性事件</strong>：检查用户是否已经执行了某个一次性操作（例如，“voted_on_poll_123”）。</li></ul></li><li><strong>预测输出</strong>：当 <code>bool true</code> 被输出到 <code>cout</code> 时，通常会显示为 <code>1</code>。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sismember</span><br><span class="line">result:1</span><br></pre></td></tr></table></figure><h4 id="scard集合里有多少元素-时间复杂度-o1"><a class="markdownIt-Anchor" href="#scard集合里有多少元素-时间复杂度-o1"></a> <code>SCARD</code>：集合里有多少元素？ (时间复杂度 O(1))</h4><p><code>SCARD</code> 代表 “Set Cardinality”（集合基数），它简单地返回一个 Set 中元素的数量。与 <code>SISMEMBER</code> 一样，这也是一个 <strong>O(1)</strong> 操作。Redis 内部维护了一个计数器，所以它不需要遍历所有元素就能告诉你总数。</p><h5 id="c-实战scard"><a class="markdownIt-Anchor" href="#c-实战scard"></a> C++ 实战：<code>scard</code></h5><p><img src="dc1d1e20840d157e1a1af23995505fcf.png" alt="image.png" /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">(sw::redis::Redis&amp; redis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;scard&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    redis.<span class="built_in">flushall</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向集合中添加4个唯一元素</span></span><br><span class="line">    redis.<span class="built_in">sadd</span>(<span class="string">&quot;key&quot;</span>, &#123;<span class="string">&quot;111&quot;</span>, <span class="string">&quot;222&quot;</span>, <span class="string">&quot;333&quot;</span>, <span class="string">&quot;444&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取集合中的元素个数</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> result = redis.<span class="built_in">scard</span>(<span class="string">&quot;key&quot;</span>); <span class="comment">// 返回 4</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;result:&quot;</span> &lt;&lt; result &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>剖析</strong>：我们添加了四个元素，然后调用 <code>scard</code>。命令返回了计数 <code>4</code>。</li><li><strong>应用场景</strong>：<ul><li><strong>在线用户</strong>：跟踪已登录的独立用户数量。</li><li><strong>点赞计数</strong>：快速显示一张照片获得的独立点赞数。</li><li><strong>数据分析</strong>：统计今天访问网站的独立 IP 地址数量。</li></ul></li><li><strong>预测输出</strong>：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scard</span><br><span class="line">result:4</span><br></pre></td></tr></table></figure><h4 id="spop随机移除并返回一个元素"><a class="markdownIt-Anchor" href="#spop随机移除并返回一个元素"></a> <code>SPOP</code>：随机移除并返回一个元素</h4><p><code>SPOP</code> 是一个既有趣又实用的命令。它会从 Set 中<strong>随机</strong>选择一个元素，将其<strong>移除</strong>，然后<strong>返回</strong>给你。这是一种“破坏性读取”，因为元素在被读取后就从集合中消失了。</p><h5 id="c-实战spop"><a class="markdownIt-Anchor" href="#c-实战spop"></a> C++ 实战：<code>spop</code></h5><p><img src="d468a41d718f4bc1c582e2922f375a16.png" alt="image.png" /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test4</span><span class="params">(sw::redis::Redis&amp; redis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;spop&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    redis.<span class="built_in">flushall</span>();</span><br><span class="line"></span><br><span class="line">    redis.<span class="built_in">sadd</span>(<span class="string">&quot;key&quot;</span>, &#123;<span class="string">&quot;111&quot;</span>, <span class="string">&quot;222&quot;</span>, <span class="string">&quot;333&quot;</span>, <span class="string">&quot;444&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机弹出一个元素，spop 的返回值是 Optional&lt;string&gt;</span></span><br><span class="line">    <span class="keyword">auto</span> result = redis.<span class="built_in">spop</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 因为返回值是 Optional，我们通过 .value() 来获取原始的 string 内容</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;result:&quot;</span> &lt;&lt; result.<span class="built_in">value</span>() &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;result is empty&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>剖析</strong>：<ul><li><code>auto result = redis.spop(&quot;key&quot;);</code> 执行命令。</li><li><code>redis-plus-plus</code> 将返回值包装在 <code>sw::redis::Optional&lt;std::string&gt;</code> 中。这是因为如果你对一个空 Set 执行 <code>spop</code>，Redis 会返回 <code>nil</code>（空）。<code>Optional</code> 类型可以优雅地处理这种情况，避免空指针等问题。</li><li><code>if (result)</code> 检查 <code>Optional</code> 对象是否真的包含一个值。在我们的例子中，由于 Set 非空，它肯定会弹出一个元素，所以条件为真。</li><li><code>result.value()</code> 从 <code>Optional</code> 中提取出实际的 <code>std::string</code> 值。</li></ul></li><li><strong>核心特性：随机性</strong>：<code>SPOP</code> 最大的特点就是随机。这意味着每次运行这段代码，得到的结果都可能不同。它非常适合需要随机处理任务的场景。</li><li><strong>应用场景</strong>：<ul><li><strong>抽奖系统</strong>：从参与用户 Set 中随机抽取一名中奖者。</li><li><strong>任务队列</strong>：从待处理任务池中随机分配一个任务给工作进程。</li><li><strong>在线匹配</strong>：从等待匹配的玩家池中随机抽取一个进行游戏。</li></ul></li><li><strong>预测输出</strong>：输出是<strong>不确定</strong>的，可能是以下四种情况之一：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 可能的输出 1</span><br><span class="line">spop</span><br><span class="line">result:111</span><br><span class="line"></span><br><span class="line">// 可能的输出 2</span><br><span class="line">spop</span><br><span class="line">result:333</span><br></pre></td></tr></table></figure><hr /><h3 id="第三章集合的威力-集合运算"><a class="markdownIt-Anchor" href="#第三章集合的威力-集合运算"></a> 第三章：集合的威力 - 集合运算</h3><p>这才是 Redis Set 真正大放异彩的地方。Redis 能够在服务器端以极高的效率执行集合的<strong>交集 (intersection)</strong>、<strong>并集 (union)</strong> 和<strong>差集 (difference)</strong> 运算，避免了将大量数据传输到客户端再进行计算的开销。</p><h4 id="交集运算sinter-sinterstore"><a class="markdownIt-Anchor" href="#交集运算sinter-sinterstore"></a> 交集运算：<code>SINTER</code> &amp; <code>SINTERSTORE</code></h4><p>交集运算会找出所有给定的 Set 中<strong>共同存在</strong>的元素。</p><ul><li><code>SINTER</code>: 计算交集并<strong>直接返回</strong>给客户端。</li><li><code>SINTERSTORE</code>: 计算交集，但<strong>不返回</strong>，而是将结果<strong>存储在一个新的目标 Set 中</strong>。</li></ul><h5 id="c-实战sinter-求交集并返回"><a class="markdownIt-Anchor" href="#c-实战sinter-求交集并返回"></a> C++ 实战：<code>sinter</code> (求交集并返回)</h5><p><img src="6b72b60fe1898e72ae64816ea8a5b213.png" alt="image.png" /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test5</span><span class="params">(sw::redis::Redis&amp; redis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 这里的 cout 应该是 &quot;sinter&quot;，一个小笔误</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;sinter&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    redis.<span class="built_in">flushall</span>();</span><br><span class="line"></span><br><span class="line">    redis.<span class="built_in">sadd</span>(<span class="string">&quot;key1&quot;</span>, &#123;<span class="string">&quot;111&quot;</span>, <span class="string">&quot;222&quot;</span>, <span class="string">&quot;333&quot;</span>, <span class="string">&quot;444&quot;</span>&#125;);</span><br><span class="line">    redis.<span class="built_in">sadd</span>(<span class="string">&quot;key2&quot;</span>, &#123;<span class="string">&quot;111&quot;</span>, <span class="string">&quot;222&quot;</span>, <span class="string">&quot;444&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    std::set&lt;std::string&gt; result;</span><br><span class="line">    <span class="keyword">auto</span> it = std::<span class="built_in">inserter</span>(result, result.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求交集涉及多个 key，我们使用初始化列表来描述</span></span><br><span class="line">    <span class="comment">// 将 &quot;key1&quot; 和 &quot;key2&quot; 的交集插入到 result 中</span></span><br><span class="line">    redis.<span class="built_in">sinter</span>(&#123;<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;key2&quot;</span>&#125;, it);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PrintContainer</span>(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>剖析</strong>：<ul><li><code>key1</code> 包含 <code>&#123;&quot;111&quot;, &quot;222&quot;, &quot;333&quot;, &quot;444&quot;&#125;</code>。</li><li><code>key2</code> 包含 <code>&#123;&quot;111&quot;, &quot;222&quot;, &quot;444&quot;&#125;</code>。</li><li><code>redis.sinter(&#123;&quot;key1&quot;, &quot;key2&quot;&#125;, it);</code> 命令计算出两个集合的共同成员是 <code>&#123;&quot;111&quot;, &quot;222&quot;, &quot;444&quot;&#125;</code>，并通过迭代器将它们存入 C++ 的 <code>result</code> 集合中。</li></ul></li><li><strong>应用场景</strong>：<ul><li><strong>共同好友</strong>：计算用户A的好友列表和用户B的好友列表的交集。</li><li><strong>内容推荐</strong>：找出同时对 “科幻” 和 “悬疑” 标签感兴趣的用户。</li></ul></li><li><strong>预测输出</strong>：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sinter</span><br><span class="line">111 222 444</span><br></pre></td></tr></table></figure><h5 id="c-实战sinterstore-求交集并存储"><a class="markdownIt-Anchor" href="#c-实战sinterstore-求交集并存储"></a> C++ 实战：<code>sinterstore</code> (求交集并存储)</h5><p><img src="39517223411c5e3c73a08b152ce72cf3.png" alt="image.png" /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test6</span><span class="params">(sw::redis::Redis&amp; redis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;sinterstore&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    redis.<span class="built_in">flushall</span>();</span><br><span class="line"></span><br><span class="line">    redis.<span class="built_in">sadd</span>(<span class="string">&quot;key1&quot;</span>, &#123;<span class="string">&quot;111&quot;</span>, <span class="string">&quot;222&quot;</span>, <span class="string">&quot;333&quot;</span>&#125;);</span><br><span class="line">    redis.<span class="built_in">sadd</span>(<span class="string">&quot;key2&quot;</span>, &#123;<span class="string">&quot;111&quot;</span>, <span class="string">&quot;222&quot;</span>, <span class="string">&quot;444&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定一个 destination (&quot;key3&quot;)，将交集结果存储到其中</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> len = redis.<span class="built_in">sinterstore</span>(<span class="string">&quot;key3&quot;</span>, &#123;<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;key2&quot;</span>&#125;);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;len:&quot;</span> &lt;&lt; len &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查 &quot;key3&quot; 中的元素以验证结果</span></span><br><span class="line">    std::set&lt;std::string&gt; result;</span><br><span class="line">    <span class="keyword">auto</span> it = std::<span class="built_in">inserter</span>(result, result.<span class="built_in">end</span>());</span><br><span class="line">    redis.<span class="built_in">smembers</span>(<span class="string">&quot;key3&quot;</span>, it);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PrintContainer</span>(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>剖析</strong>：<ul><li><code>redis.sinterstore(&quot;key3&quot;, &#123;&quot;key1&quot;, &quot;key2&quot;&#125;);</code> 计算出交集 <code>&#123;&quot;111&quot;, &quot;222&quot;&#125;</code>，然后将这个结果存入一个全新的 Set <code>key3</code> 中。如果 <code>key3</code> 已存在，它将被覆盖。</li><li>该命令返回新生成的 <code>key3</code> 集合的元素数量，即 <code>2</code>。所以 <code>len</code> 的值为 <code>2</code>。</li><li>后续的 <code>smembers</code> 验证了 <code>key3</code> 的内容确实是正确的交集结果。</li></ul></li><li><strong>应用场景</strong>：当你需要<strong>缓存</strong>或<strong>复用</strong>交集计算结果时，<code>SINTERSTORE</code> 非常有用。例如，为一组用户预先计算出他们共同喜欢的商品列表。</li><li><strong>预测输出</strong>：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sinterstore</span><br><span class="line">len:2</span><br><span class="line">111 222</span><br></pre></td></tr></table></figure><hr /><h3 id="第四章超越基础-更多强大的-set-命令"><a class="markdownIt-Anchor" href="#第四章超越基础-更多强大的-set-命令"></a> 第四章：超越基础 - 更多强大的 Set 命令</h3><p>我们已经覆盖了所提供代码中的所有命令，但 Redis Set 的能力远不止于此。为了成为真正的 Set 大师，让我们来了解一下其他一些极其有用的命令。</p><h4 id="并集运算sunion-sunionstore"><a class="markdownIt-Anchor" href="#并集运算sunion-sunionstore"></a> 并集运算：<code>SUNION</code> &amp; <code>SUNIONSTORE</code></h4><p>并集运算返回所有给定集合的全部<strong>不重复</strong>的元素。</p><ul><li><strong>命令</strong>：<code>SUNION key [key ...]</code> 和 <code>SUNIONSTORE destination key [key ...]</code></li><li><strong>应用场景</strong>：<ul><li><strong>好友圈</strong>：获取用户A的好友、用户B的好友和用户C的好友的完整、不重复的列表。</li><li><strong>权限合并</strong>：一个用户属于 “editor” 角色组和 “publisher” 角色组，通过并集可以得到该用户拥有的所有权限的集合。</li></ul></li></ul><h4 id="差集运算sdiff-sdiffstore"><a class="markdownIt-Anchor" href="#差集运算sdiff-sdiffstore"></a> 差集运算：<code>SDIFF</code> &amp; <code>SDIFFSTORE</code></h4><p>差集运算返回那些只存在于<strong>第一个</strong>集合中，但不在任何后续集合中的元素。</p><ul><li><strong>命令</strong>：<code>SDIFF key [key ...]</code> 和 <code>SDIFFSTORE destination key [key ...]</code></li><li><strong>应用场景</strong>：<ul><li><strong>好友推荐</strong>：找出我的好友中，有哪些还不是我朋友A的好友，从而可以向我推荐。</li><li><strong>内容去重</strong>：向用户展示新闻时，从“今日热点”中排除掉他“已读新闻”Set 中的内容。</li></ul></li></ul><h4 id="安全迭代sscan"><a class="markdownIt-Anchor" href="#安全迭代sscan"></a> 安全迭代：<code>SSCAN</code></h4><p>正如前文提到的，<code>SMEMBERS</code> 对于大集合是危险的。<code>SSCAN</code> 提供了安全的替代方案。它使用一个游标 (cursor) 来分批次地返回集合中的元素，每次只返回一小部分，绝不会阻塞服务器。</p><ul><li><strong>命令</strong>：<code>SSCAN key cursor [MATCH pattern] [COUNT count]</code></li><li><strong>工作方式</strong>：你用一个初始为 <code>0</code> 的游标开始第一次调用。Redis 返回下一批元素和一个新的游标。你用这个新的游标进行下一次调用，如此往复，直到返回的游标为 <code>0</code>，表示迭代完成。</li><li><strong>适用场景</strong>：任何需要遍历生产环境中大集合的操作，例如数据迁移、离线分析等。</li></ul><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>Redis Set 是一种看似简单却异常强大的数据结构。让我们回顾一下它的核心优势：</p><ul><li><strong>唯一性</strong>：自动处理数据去重，简化了应用逻辑。</li><li><strong>极速性能</strong>：绝大多数核心操作（增、删、查、计数）的时间复杂度都是 O(1)，性能与集合大小无关。</li><li><strong>强大的集合运算</strong>：能够在服务器端原子性地、高效地执行交、并、差集运算，极大地减少了网络开销和客户端的计算压力。</li></ul><p>从简单的在线用户统计，到复杂的社交网络好友关系分析，再到智能推荐系统，Redis Set 都能以其优雅和高效提供坚实的解决方案。希望通过本文的深度解析和 C++ 代码示例，您已经准备好在自己的项目中发挥 Redis Set 的真正威力了。</p>]]></content>
    
    
    <summary type="html">Redis 解锁：C++ 实战深度探索 Set 数据类型</summary>
    
    
    
    <category term="数据库" scheme="http://www.formeasy.cc/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="http://www.formeasy.cc/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>SQL 优化实战案例：从慢查询到高性能的完整指南</title>
    <link href="http://www.formeasy.cc/2025/10/05/MySQL/SQL%20%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B%EF%BC%9A%E4%BB%8E%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%88%B0%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97/"/>
    <id>http://www.formeasy.cc/2025/10/05/MySQL/SQL%20%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B%EF%BC%9A%E4%BB%8E%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%88%B0%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97/</id>
    <published>2025-10-05T13:21:30.000Z</published>
    <updated>2025-10-05T13:55:55.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-常见-sql-性能问题概览"><a class="markdownIt-Anchor" href="#一-常见-sql-性能问题概览"></a> 📊 一、常见 SQL 性能问题概览</h2><h3 id="生产环境性能问题分布"><a class="markdownIt-Anchor" href="#生产环境性能问题分布"></a> 🚨 生产环境性能问题分布</h3><p>根据对 1000+ 生产环境慢查询的分析，常见问题比例如下：</p><p>索引问题：45%<br />JOIN优化：25%<br />全表扫描：15%<br />锁竞争：10%<br />其它：5%</p><h3 id="性能问题症状识别"><a class="markdownIt-Anchor" href="#性能问题症状识别"></a> 📈 性能问题症状识别</h3><p><strong>快速诊断指标</strong>：</p><ul><li><p><strong>查询时间</strong> &gt; 1秒：需要优化</p></li><li><p><strong>扫描行数</strong> &gt; 10000行：索引可能失效</p></li><li><p><strong>临时表使用</strong>：需要优化查询或索引</p></li><li><p><strong>文件排序</strong>：添加合适的索引</p></li></ul><h2 id="二-案例一慢查询优化实战"><a class="markdownIt-Anchor" href="#二-案例一慢查询优化实战"></a> ⚡ 二、案例一：慢查询优化实战</h2><h3 id="问题场景电商订单查询缓慢"><a class="markdownIt-Anchor" href="#问题场景电商订单查询缓慢"></a> 🎯 问题场景：电商订单查询缓慢</h3><p><strong>原始慢查询</strong>（执行时间：3.2秒）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders </span><br><span class="line"><span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="number">1001</span> </span><br><span class="line">  <span class="keyword">AND</span> order_date <span class="keyword">BETWEEN</span> <span class="string">&#x27;2023-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2023-12-31&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> status <span class="keyword">IN</span> (<span class="string">&#x27;completed&#x27;</span>, <span class="string">&#x27;shipped&#x27;</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> order_date <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h3 id="问题分析过程"><a class="markdownIt-Anchor" href="#问题分析过程"></a> 🔍 问题分析过程</h3><p><strong>执行计划分析</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders </span><br><span class="line"><span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="number">1001</span> </span><br><span class="line">  <span class="keyword">AND</span> order_date <span class="keyword">BETWEEN</span> <span class="string">&#x27;2023-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2023-12-31&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> status <span class="keyword">IN</span> (<span class="string">&#x27;completed&#x27;</span>, <span class="string">&#x27;shipped&#x27;</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> order_date <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p><strong>执行计划输出</strong>：</p><pre><code>+----+-------------+--------+------------+------+---------------+------+---------+------+--------+----------+-----------------------------+| id | select_type | table  | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra                       |+----+-------------+--------+------------+------+---------------+------+---------+------+--------+----------+-----------------------------+|  1 | SIMPLE      | orders | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 500000 |     1.00 | Using where; Using filesort |+----+-------------+--------+------------+------+---------------+------+---------+------+--------+----------+-----------------------------+</code></pre><p><strong>问题诊断</strong>：</p><ul><li><p>type: ALL：全表扫描 50 万行数据</p></li><li><p>Using filesort：文件排序，性能杀手</p></li><li><p>缺少合适索引</p></li></ul><h3 id="️-优化方案"><a class="markdownIt-Anchor" href="#️-优化方案"></a> 🛠️ 优化方案</h3><p><strong>创建复合索引</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 根据查询条件创建最优索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_user_status_date </span><br><span class="line"><span class="keyword">ON</span> orders(user_id, status, order_date);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 包含所有过滤字段和排序字段</span></span><br></pre></td></tr></table></figure><p><strong>优化后查询</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用覆盖索引优化</span></span><br><span class="line"><span class="keyword">SELECT</span> order_id, user_id, order_date, status, amount</span><br><span class="line"><span class="keyword">FROM</span> orders </span><br><span class="line"><span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="number">1001</span> </span><br><span class="line">  <span class="keyword">AND</span> order_date <span class="keyword">BETWEEN</span> <span class="string">&#x27;2023-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2023-12-31&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> status <span class="keyword">IN</span> (<span class="string">&#x27;completed&#x27;</span>, <span class="string">&#x27;shipped&#x27;</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> order_date <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h3 id="性能对比"><a class="markdownIt-Anchor" href="#性能对比"></a> 📊 性能对比</h3><table><thead><tr><th>策略</th><th>实现方式</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>无索引查询</strong></td><td>全表扫描 + 文件排序</td><td>实现简单，无需索引维护</td><td>性能极差，数据量大时不可用</td><td>小表查询（数据量 &lt; 1000 行）</td></tr><tr><td><strong>复合索引优化</strong></td><td>创建 <code>(user_id, status, order_date)</code> 复合索引</td><td>查询性能提升 64 倍，减少磁盘 I/O</td><td>需要额外存储空间，写入稍慢</td><td>中大型表，频繁查询条件固定</td></tr></tbody></table><p><strong>优化效果</strong>：</p><ul><li><p><strong>执行时间</strong>：3.2秒 → 0.05秒（<strong>64倍提升</strong>）</p></li><li><p><strong>扫描行数</strong>：500,000行 → 150行（<strong>3333倍提升</strong>）</p></li><li><p><strong>CPU使用</strong>：95% → 5%（<strong>19倍降低</strong>）</p></li></ul><h2 id="三-案例二索引深度优化"><a class="markdownIt-Anchor" href="#三-案例二索引深度优化"></a> 🔍 三、案例二：索引深度优化</h2><h3 id="问题场景用户搜索功能性能瓶颈"><a class="markdownIt-Anchor" href="#问题场景用户搜索功能性能瓶颈"></a> 🎯 问题场景：用户搜索功能性能瓶颈</h3><p><strong>原始查询</strong>（执行时间：2.1秒）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users </span><br><span class="line"><span class="keyword">WHERE</span> username <span class="keyword">LIKE</span> <span class="string">&#x27;%john%&#x27;</span></span><br><span class="line">   <span class="keyword">OR</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%john%&#x27;</span></span><br><span class="line">   <span class="keyword">OR</span> phone <span class="keyword">LIKE</span> <span class="string">&#x27;%john%&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> created_at <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">50</span>;</span><br></pre></td></tr></table></figure><h3 id="索引问题分析"><a class="markdownIt-Anchor" href="#索引问题分析"></a> 🔍 索引问题分析</h3><p><strong>现有索引情况</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 检查现有索引</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> users;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 输出：</span></span><br><span class="line"><span class="comment">-- INDEX (username)  -- 前缀索引</span></span><br><span class="line"><span class="comment">-- INDEX (email)     -- 前缀索引  </span></span><br><span class="line"><span class="comment">-- INDEX (phone)     -- 前缀索引</span></span><br></pre></td></tr></table></figure><p><strong>执行计划分析</strong>：</p><pre><code>+----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+-----------------------------+| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra                       |+----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+-----------------------------+|  1 | SIMPLE      | users | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 100000 |    100.00 | Using where; Using filesort |+----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+-----------------------------+</code></pre><p><strong>问题根源</strong>：</p><ul><li><p>LIKE '%john%'导致索引失效</p></li><li><p>OR 条件合并导致全表扫描</p></li><li><p>多个单列索引未有效利用</p></li></ul><h3 id="️-优化策略"><a class="markdownIt-Anchor" href="#️-优化策略"></a> 🛠️ 优化策略</h3><p><strong>方案一：全文索引优化</strong>（MySQL 5.6+）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建全文索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users </span><br><span class="line"><span class="keyword">ADD</span> FULLTEXT idx_search_fields(username, email, phone);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用全文搜索</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">MATCH</span>(username, email, phone) AGAINST(<span class="string">&#x27;john&#x27;</span> <span class="keyword">IN</span> <span class="type">BOOLEAN</span> MODE)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> created_at <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">50</span>;</span><br></pre></td></tr></table></figure><p><strong>方案二：分词索引优化</strong>（兼容性更好）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 添加搜索专用字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> search_tags <span class="type">VARCHAR</span>(<span class="number">500</span>);</span><br><span class="line"><span class="keyword">UPDATE</span> users <span class="keyword">SET</span> search_tags <span class="operator">=</span> CONCAT(username, <span class="string">&#x27; &#x27;</span>, email, <span class="string">&#x27; &#x27;</span>, phone);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建分词索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_search_tags <span class="keyword">ON</span> users(search_tags(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 优化查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users </span><br><span class="line"><span class="keyword">WHERE</span> search_tags <span class="keyword">LIKE</span> <span class="string">&#x27;john%&#x27;</span> </span><br><span class="line">   <span class="keyword">OR</span> search_tags <span class="keyword">LIKE</span> <span class="string">&#x27;% john%&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> created_at <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">50</span>;</span><br></pre></td></tr></table></figure><h3 id="优化方案对比"><a class="markdownIt-Anchor" href="#优化方案对比"></a> 📊 优化方案对比</h3><table><thead><tr><th>策略</th><th>实现方式</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>单列索引</strong></td><td>为每个字段创建独立索引</td><td>简单直观，维护方便</td><td>OR 条件无法有效利用，<code>LIKE '%xxx'</code> 模糊查询失效</td><td>精确查询，字段独立使用</td></tr><tr><td><strong>全文索引</strong></td><td>使用 <code>MATCH ... AGAINST</code> 语法</td><td>专业文本搜索，支持相关性排序</td><td>MySQL 5.6+ 才支持，中文分词需额外插件（如 <code>ngram</code>、<code>mmseg</code>）</td><td>大量文本搜索，CMS、论坛、博客系统</td></tr><tr><td><strong>分词索引</strong></td><td>创建搜索专用字段 + 前缀索引</td><td>兼容性好，<code>LIKE 'xxx%'</code> 模糊查询可用</td><td>需要维护额外字段，存在一定数据冗余</td><td>中小规模搜索，对兼容性要求高的业务场景</td></tr></tbody></table><p><strong>优化效果</strong>：</p><ul><li><strong>全文索引方案</strong>：2.1秒 → 0.08秒（<strong>26倍提升</strong>）</li><li><strong>分词索引方案</strong>：2.1秒 → 0.15秒（<strong>14倍提升</strong>）</li></ul><h2 id="四-案例三大表-join-优化"><a class="markdownIt-Anchor" href="#四-案例三大表-join-优化"></a> 🔗 四、案例三：大表 JOIN 优化</h2><h3 id="问题场景电商报表查询超时"><a class="markdownIt-Anchor" href="#问题场景电商报表查询超时"></a> 🎯 问题场景：电商报表查询超时</h3><p><strong>原始查询</strong>（执行时间：12.5秒）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    u.username,</span><br><span class="line">    o.order_id,</span><br><span class="line">    o.amount,</span><br><span class="line">    p.product_name,</span><br><span class="line">    c.category_name</span><br><span class="line"><span class="keyword">FROM</span> users u</span><br><span class="line"><span class="keyword">JOIN</span> orders o <span class="keyword">ON</span> u.user_id <span class="operator">=</span> o.user_id</span><br><span class="line"><span class="keyword">JOIN</span> order_items oi <span class="keyword">ON</span> o.order_id <span class="operator">=</span> oi.order_id</span><br><span class="line"><span class="keyword">JOIN</span> products p <span class="keyword">ON</span> oi.product_id <span class="operator">=</span> p.product_id</span><br><span class="line"><span class="keyword">JOIN</span> categories c <span class="keyword">ON</span> p.category_id <span class="operator">=</span> c.category_id</span><br><span class="line"><span class="keyword">WHERE</span> u.register_date <span class="operator">&gt;=</span> <span class="string">&#x27;2023-01-01&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> o.order_date <span class="keyword">BETWEEN</span> <span class="string">&#x27;2023-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2023-12-31&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> o.amount <span class="operator">&gt;</span> <span class="number">1000</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> o.order_date <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h3 id="join-问题分析"><a class="markdownIt-Anchor" href="#join-问题分析"></a> 🔍 JOIN 问题分析</h3><p><strong>表数据量分析</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 各表数据量</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="string">&#x27;users&#x27;</span> <span class="keyword">as</span> table_name, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> count <span class="keyword">FROM</span> users</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;orders&#x27;</span>, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span>  </span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;order_items&#x27;</span>, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> order_items</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;products&#x27;</span>, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;categories&#x27;</span>, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> categories;</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：</p><pre><code>+------------+---------+| table_name | count   |+------------+---------+| users      | 100,000 || orders     | 1,000,000|| order_items| 5,000,000|| products   | 50,000  || categories | 500     |+------------+---------+</code></pre><p><strong>执行计划分析</strong>：</p><pre><code>+----+-------------+-------+------------+--------+---------------+---------+---------+----------------------+---------+----------+----------------------------------------------------+| id | select_type | table | partitions | type   | possible_keys | key     | key_len | ref                  | rows    | filtered | Extra                                              |+----+-------------+-------+------------+--------+---------------+---------+---------+----------------------+---------+----------+----------------------------------------------------+|  1 | SIMPLE      | u     | NULL       | range  | PRIMARY       | PRIMARY | 4       | NULL                 | 50000   |   100.00 | Using index condition; Using temporary; Using filesort ||  1 | SIMPLE      | o     | NULL       | ref    | idx_user_id   | idx_user_id | 5    | db.u.user_id         | 10      |    33.33 | Using where                                        ||  1 | SIMPLE      | oi    | NULL       | ref    | idx_order_id  | idx_order_id | 4    | db.o.order_id       | 5       |   100.00 | NULL                                               ||  1 | SIMPLE      | p     | NULL       | eq_ref | PRIMARY       | PRIMARY | 4       | db.oi.product_id     | 1       |   100.00 | NULL                                               ||  1 | SIMPLE      | c     | NULL       | eq_ref | PRIMARY       | PRIMARY | 4       | db.p.category_id    | 1       |   100.00 | NULL                                               |+----+-------------+-------+------------+--------+---------------+---------+---------+----------------------+---------+----------+----------------------------------------------------+</code></pre><p><strong>问题诊断</strong>：</p><ul><li><p><strong>驱动表选择不当</strong>：从 50,000 行 users 表开始</p></li><li><p><strong>中间结果集过大</strong>：多次 JOIN 产生大量中间数据</p></li><li><p><strong>排序性能差</strong>：对大量数据排序</p></li></ul><h3 id="️-优化方案-2"><a class="markdownIt-Anchor" href="#️-优化方案-2"></a> 🛠️ 优化方案</h3><p><strong>方案一：优化 JOIN 顺序和索引</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 添加缺失索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_orders_user_date_amount </span><br><span class="line"><span class="keyword">ON</span> orders(user_id, order_date, amount);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_users_register_date </span><br><span class="line"><span class="keyword">ON</span> users(register_date, user_id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 使用 STRAIGHT_JOIN 强制优化器使用最佳顺序</span></span><br><span class="line"><span class="keyword">SELECT</span> STRAIGHT_JOIN</span><br><span class="line">    u.username,</span><br><span class="line">    o.order_id,</span><br><span class="line">    o.amount,</span><br><span class="line">    p.product_name,</span><br><span class="line">    c.category_name</span><br><span class="line"><span class="keyword">FROM</span> orders o  <span class="comment">-- 从 orders 开始，过滤条件更强</span></span><br><span class="line"><span class="keyword">JOIN</span> users u <span class="keyword">ON</span> o.user_id <span class="operator">=</span> u.user_id</span><br><span class="line"><span class="keyword">JOIN</span> order_items oi <span class="keyword">ON</span> o.order_id <span class="operator">=</span> oi.order_id</span><br><span class="line"><span class="keyword">JOIN</span> products p <span class="keyword">ON</span> oi.product_id <span class="operator">=</span> p.product_id</span><br><span class="line"><span class="keyword">JOIN</span> categories c <span class="keyword">ON</span> p.category_id <span class="operator">=</span> c.category_id</span><br><span class="line"><span class="keyword">WHERE</span> u.register_date <span class="operator">&gt;=</span> <span class="string">&#x27;2023-01-01&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> o.order_date <span class="keyword">BETWEEN</span> <span class="string">&#x27;2023-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2023-12-31&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> o.amount <span class="operator">&gt;</span> <span class="number">1000</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> o.order_date <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p><strong>方案二：分阶段查询 + 临时表：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 第一阶段：过滤核心数据</span></span><br><span class="line"><span class="keyword">CREATE</span> TEMPORARY <span class="keyword">TABLE</span> temp_orders <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> o.order_id, o.user_id, o.amount, o.order_date</span><br><span class="line"><span class="keyword">FROM</span> orders o</span><br><span class="line"><span class="keyword">WHERE</span> o.order_date <span class="keyword">BETWEEN</span> <span class="string">&#x27;2023-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2023-12-31&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> o.amount <span class="operator">&gt;</span> <span class="number">1000</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> o.order_date <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">1000</span>;  <span class="comment">-- 扩大限制，确保最终有100条</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 第二阶段：关联其他表</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    u.username,</span><br><span class="line">    t.order_id,</span><br><span class="line">    t.amount,</span><br><span class="line">    p.product_name,</span><br><span class="line">    c.category_name</span><br><span class="line"><span class="keyword">FROM</span> temp_orders t</span><br><span class="line"><span class="keyword">JOIN</span> users u <span class="keyword">ON</span> t.user_id <span class="operator">=</span> u.user_id</span><br><span class="line"><span class="keyword">JOIN</span> order_items oi <span class="keyword">ON</span> t.order_id <span class="operator">=</span> oi.order_id</span><br><span class="line"><span class="keyword">JOIN</span> products p <span class="keyword">ON</span> oi.product_id <span class="operator">=</span> p.product_id</span><br><span class="line"><span class="keyword">JOIN</span> categories c <span class="keyword">ON</span> p.category_id <span class="operator">=</span> c.category_id</span><br><span class="line"><span class="keyword">WHERE</span> u.register_date <span class="operator">&gt;=</span> <span class="string">&#x27;2023-01-01&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> t.order_date <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h3 id="优化策略对比"><a class="markdownIt-Anchor" href="#优化策略对比"></a> 📊 优化策略对比</h3><table><thead><tr><th>策略</th><th>实现方式</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>原始 JOIN</strong></td><td>多表直接关联，依赖优化器</td><td>代码简洁，逻辑清晰</td><td>性能不可控，容易触发全表扫描</td><td>小数据量，开发测试环境</td></tr><tr><td><strong>优化 JOIN 顺序</strong></td><td>使用 <code>STRAIGHT_JOIN</code> 强制执行顺序</td><td>性能可控，避免优化器误判</td><td>需要手动分析，硬编码不够灵活</td><td>表关系复杂，优化器选择不佳时</td></tr><tr><td><strong>分阶段查询</strong></td><td>借助临时表 + 分步查询</td><td>内存消耗低，性能更稳定</td><td>代码复杂度高，需要多次查询</td><td>超大数据量，复杂聚合计算</td></tr></tbody></table><p><strong>优化效果：</strong></p><p><strong>优化JOIN顺序</strong>：12.5秒 → 1.2秒（10倍提升）</p><p><strong>分阶段查询</strong>：12.5秒 → 0.8秒（15倍提升）</p><h2 id="五-总结与优化方法论"><a class="markdownIt-Anchor" href="#五-总结与优化方法论"></a> 💡 五、总结与优化方法论</h2><h3 id="sql-优化核心原则"><a class="markdownIt-Anchor" href="#sql-优化核心原则"></a> 🎯 SQL 优化核心原则</h3><p><strong>优化优先级：</strong></p><p>索引优化：</p><ul><li>添加缺失索引</li><li>优化索引结构</li><li>覆盖索引</li></ul><p>查询重写</p><ul><li>减少JOIN</li><li>优化WHERE</li><li>分页优化</li></ul><p>架构调整</p><ul><li>读写分离</li><li>分库分表</li><li>缓存策略</li></ul><h3 id="优化检查清单"><a class="markdownIt-Anchor" href="#优化检查清单"></a> 📝 优化检查清单</h3><p><strong>索引优化检查项：</strong></p><ul><li><p>✅ WHERE 条件字段是否有索引？</p></li><li><p>✅ ORDER BY/GROUP BY 字段是否有索引？</p></li><li><p>✅ 复合索引字段顺序是否最优？</p></li><li><p>✅ 是否使用覆盖索引？</p></li><li><p>✅ 索引选择性是否足够高？</p></li></ul><p><strong>查询优化检查项：</strong></p><ul><li><p>✅ 是否避免 SELECT *？</p></li><li><p>✅ 是否使用 LIMIT 限制返回行数？</p></li><li><p>✅ JOIN 条件是否有索引？</p></li><li><p>✅ 是否避免在 WHERE 中使用函数？</p></li><li><p>✅ 是否合理使用 UNION 替代 OR？</p></li></ul><h3 id="️-整体优化方案对比"><a class="markdownIt-Anchor" href="#️-整体优化方案对比"></a> 🛠️ 整体优化方案对比</h3><table><thead><tr><th>优化维度</th><th>基础方案</th><th>进阶方案</th><th>高级方案</th><th>选择建议</th></tr></thead><tbody><tr><td><strong>索引策略</strong></td><td>单列索引</td><td>复合索引</td><td>覆盖索引</td><td>根据查询频率和字段选择</td></tr><tr><td><strong>查询优化</strong></td><td>减少 SELECT *</td><td>使用 LIMIT</td><td>分页优化</td><td>结合业务需求逐步优化</td></tr><tr><td><strong>JOIN 优化</strong></td><td>添加关联索引</td><td>调整 JOIN 顺序</td><td>分阶段查询</td><td>根据数据量和复杂度选择</td></tr><tr><td><strong>架构优化</strong></td><td>查询优化</td><td>读写分离</td><td>分库分表</td><td>按业务增长阶段实施</td></tr></tbody></table><h3 id="性能监控工具对比"><a class="markdownIt-Anchor" href="#性能监控工具对比"></a> 🔧 性能监控工具对比</h3><table><thead><tr><th>分析工具</th><th>使用方式</th><th>输出内容</th><th>适用阶段</th><th>学习成本</th></tr></thead><tbody><tr><td><strong>EXPLAIN</strong></td><td>EXPLAIN SELECT …</td><td>执行计划详情</td><td>日常开发</td><td>低</td></tr><tr><td><strong>EXPLAIN ANALYZE</strong></td><td>EXPLAIN ANALYZE SELECT …</td><td>实际执行统计</td><td>性能调优</td><td>中</td></tr><tr><td><strong>慢查询日志</strong></td><td>配置 slow_query_log</td><td>慢 SQL 记录</td><td>问题排查</td><td>中</td></tr><tr><td><strong>Performance Schema</strong></td><td>查询系统表</td><td>详细性能指标</td><td>深度优化</td><td>高</td></tr></tbody></table><h3 id="进阶优化策略"><a class="markdownIt-Anchor" href="#进阶优化策略"></a> 🚀 进阶优化策略</h3><p><strong>读写分离架构：</strong></p><p>应用层 -&gt; （写主库 - 读从库1 - 读从库2 - 读从库3） -&gt; 主库</p><p><strong>分库分表策略：</strong></p><p><strong>垂直分表</strong>：将大字段分离到扩展表</p><p><strong>水平分表</strong>：按时间或ID范围拆分</p><p><strong>分库</strong>：按业务模块分离</p><h3 id="持续学习路径"><a class="markdownIt-Anchor" href="#持续学习路径"></a> 📚 持续学习路径</h3><p><strong>推荐学习资源</strong>：</p><ul><li><p>MySQL 官方文档：EXPLAIN 输出详解</p></li><li><p>Percona Toolkit：性能分析工具</p></li><li><p>sys Schema：MySQL 性能监控视图</p></li><li><p>数据库设计范式：从源头避免性能问题</p></li></ul>]]></content>
    
    
    <summary type="html">SQL 优化实战案例：从慢查询到高性能的完整指南</summary>
    
    
    
    <category term="数据库" scheme="http://www.formeasy.cc/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="http://www.formeasy.cc/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>【Redis缓存一致性：如何保证数据库与缓存同步】</title>
    <link href="http://www.formeasy.cc/2025/10/04/Redis/%E3%80%90Redis%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E7%BC%93%E5%AD%98%E5%90%8C%E6%AD%A5%E3%80%91/"/>
    <id>http://www.formeasy.cc/2025/10/04/Redis/%E3%80%90Redis%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E7%BC%93%E5%AD%98%E5%90%8C%E6%AD%A5%E3%80%91/</id>
    <published>2025-10-04T08:11:24.000Z</published>
    <updated>2025-10-04T08:18:28.754Z</updated>
    
    <content type="html"><![CDATA[<p>💡 摘要：是否遇到过缓存数据与数据库不一致的尴尬局面？是否在数据更新后发现用户看到的还是旧数据？缓存一致性是分布式系统中最具挑战性的问题之一，它直接影响到数据的准确性和用户体验。本文将深入探讨Redis缓存一致性的各种解决方案，从简单的更新策略到复杂的最终一致性方案，帮你构建可靠的数据同步体系！</p><hr /><h3 id="一-缓存一致性挑战"><a class="markdownIt-Anchor" href="#一-缓存一致性挑战"></a> 一、缓存一致性挑战</h3><h4 id="1-为什么缓存一致性很难"><a class="markdownIt-Anchor" href="#1-为什么缓存一致性很难"></a> 1. 为什么缓存一致性很难？</h4><p><strong>典型的不一致场景</strong>：</p><ul><li><p>🕒 <strong>时序问题</strong>：缓存更新和数据库更新的顺序</p></li><li><p>⚡ <strong>并发冲突</strong>：多个请求同时更新同一数据</p></li><li><p>🔄 <strong>操作失败</strong>：一个操作成功另一个失败</p></li><li><p>🗑️ <strong>缓存失效</strong>：缓存过期或淘汰导致数据不一致</p></li></ul><p><img src="c1a02890a7ad4c8cb1d6d172adcdb820.png" alt="" /></p><h4 id="2-一致性级别对比"><a class="markdownIt-Anchor" href="#2-一致性级别对比"></a> 2. 一致性级别对比</h4><table><thead><tr><th>一致性级别</th><th>描述</th><th>性能影响</th><th>实现复杂度</th></tr></thead><tbody><tr><td><strong>强一致性</strong></td><td>任何时刻数据一致</td><td>高</td><td>极高</td></tr><tr><td><strong>最终一致性</strong></td><td>一段时间后数据一致</td><td>中</td><td>中</td></tr><tr><td><strong>弱一致性</strong></td><td>不保证数据一致</td><td>低</td><td>低</td></tr></tbody></table><h3 id="二-基础更新策略"><a class="markdownIt-Anchor" href="#二-基础更新策略"></a> 二、基础更新策略</h3><h4 id="1-cache-aside模式旁路缓存"><a class="markdownIt-Anchor" href="#1-cache-aside模式旁路缓存"></a> 1. Cache-Aside模式（旁路缓存）</h4><p><strong>最常用的缓存模式</strong>：</p><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_user</span>(<span class="params">user_id</span>):</span><br><span class="line">    <span class="comment"># 1. 先查缓存</span></span><br><span class="line">    user_data = redis.get(<span class="string">f&quot;user:<span class="subst">&#123;user_id&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user_data:</span><br><span class="line">        <span class="keyword">return</span> user_data</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2. 缓存不存在，查数据库</span></span><br><span class="line">    user_data = db.query(<span class="string">&quot;SELECT * FROM users WHERE id = %s&quot;</span>, user_id)</span><br><span class="line">    <span class="keyword">if</span> user_data:</span><br><span class="line">        <span class="comment"># 3. 写入缓存</span></span><br><span class="line">        redis.setex(<span class="string">f&quot;user:<span class="subst">&#123;user_id&#125;</span>&quot;</span>, <span class="number">3600</span>, user_data)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> user_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_user</span>(<span class="params">user_id, new_data</span>):</span><br><span class="line">    <span class="comment"># 1. 先更新数据库</span></span><br><span class="line">    db.update(<span class="string">&quot;UPDATE users SET ... WHERE id = %s&quot;</span>, user_id, new_data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2. 再删除缓存</span></span><br><span class="line">    redis.delete(<span class="string">f&quot;user:<span class="subst">&#123;user_id&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p><strong>问题：并发更新可能导致不一致</strong></p><p><img src="1873d601c2a84ae5880db7b618e8a520.png" alt="" /></p><h4 id="2-write-through模式直写"><a class="markdownIt-Anchor" href="#2-write-through模式直写"></a> 2. Write-Through模式（直写）</h4><p><strong>同步更新缓存和数据库</strong>：</p><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WriteThroughCache</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, redis_client, db_client</span>):</span><br><span class="line">        self.redis = redis_client</span><br><span class="line">        self.db = db_client</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">self, key, value, expire=<span class="number">3600</span></span>):</span><br><span class="line">        <span class="comment"># 1. 先更新数据库</span></span><br><span class="line">        self.db.update_data(key, value)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. 再更新缓存</span></span><br><span class="line">        self.redis.setex(key, expire, value)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="comment"># 直接读缓存</span></span><br><span class="line">        <span class="keyword">return</span> self.redis.get(key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">cache = WriteThroughCache(redis, db)</span><br><span class="line">cache.<span class="built_in">set</span>(<span class="string">&quot;user:1001&quot;</span>, user_data)</span><br></pre></td></tr></table></figure><p><strong>优点</strong>：保证强一致性<br /><strong>缺点</strong>：写性能较低，不适合高频写场景</p><h3 id="三-最终一致性方案"><a class="markdownIt-Anchor" href="#三-最终一致性方案"></a> 三、最终一致性方案</h3><h4 id="1-延迟双删策略"><a class="markdownIt-Anchor" href="#1-延迟双删策略"></a> 1. 延迟双删策略</h4><p><strong>解决并发冲突的方案</strong>：</p><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update_user_with_double_delete</span>(<span class="params">user_id, new_data</span>):</span><br><span class="line">    <span class="comment"># 第一次删除缓存</span></span><br><span class="line">    redis.delete(<span class="string">f&quot;user:<span class="subst">&#123;user_id&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 更新数据库</span></span><br><span class="line">    db.update(<span class="string">&quot;UPDATE users SET ... WHERE id = %s&quot;</span>, user_id, new_data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 延迟第二次删除</span></span><br><span class="line">    threading.Timer(<span class="number">1.0</span>, <span class="keyword">lambda</span>: redis.delete(<span class="string">f&quot;user:<span class="subst">&#123;user_id&#125;</span>&quot;</span>)).start()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_with_retry</span>(<span class="params">user_id, max_retries=<span class="number">3</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;带重试的查询&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> attempt <span class="keyword">in</span> <span class="built_in">range</span>(max_retries):</span><br><span class="line">        user_data = redis.get(<span class="string">f&quot;user:<span class="subst">&#123;user_id&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> user_data:</span><br><span class="line">            <span class="keyword">return</span> user_data</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 缓存不存在，查数据库</span></span><br><span class="line">        user_data = db.query(<span class="string">&quot;SELECT * FROM users WHERE id = %s&quot;</span>, user_id)</span><br><span class="line">        <span class="keyword">if</span> user_data:</span><br><span class="line">            <span class="comment"># 设置缓存</span></span><br><span class="line">            redis.setex(<span class="string">f&quot;user:<span class="subst">&#123;user_id&#125;</span>&quot;</span>, <span class="number">3600</span>, user_data)</span><br><span class="line">            <span class="keyword">return</span> user_data</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 短暂等待后重试</span></span><br><span class="line">        time.sleep(<span class="number">0.1</span> * (<span class="number">2</span> ** attempt))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h4 id="2-基于消息队列的异步更新"><a class="markdownIt-Anchor" href="#2-基于消息队列的异步更新"></a> 2. 基于消息队列的异步更新</h4><p><strong>使用消息队列保证最终一致性</strong>：</p><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> kafka <span class="keyword">import</span> KafkaProducer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CacheAsyncUpdater</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.producer = KafkaProducer(</span><br><span class="line">            bootstrap_servers=[<span class="string">&#x27;kafka1:9092&#x27;</span>, <span class="string">&#x27;kafka2:9092&#x27;</span>],</span><br><span class="line">            value_serializer=<span class="keyword">lambda</span> v: json.dumps(v).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        )</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_user</span>(<span class="params">self, user_id, new_data</span>):</span><br><span class="line">        <span class="comment"># 1. 只更新数据库</span></span><br><span class="line">        db.update(<span class="string">&quot;UPDATE users SET ... WHERE id = %s&quot;</span>, user_id, new_data)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. 发送缓存更新消息</span></span><br><span class="line">        message = &#123;</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;cache_update&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;key&#x27;</span>: <span class="string">f&quot;user:<span class="subst">&#123;user_id&#125;</span>&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>: new_data,</span><br><span class="line">            <span class="string">&#x27;timestamp&#x27;</span>: time.time()</span><br><span class="line">        &#125;</span><br><span class="line">        self.producer.send(<span class="string">&#x27;cache-updates&#x27;</span>, message)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 消费者端</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cache_update_consumer</span>():</span><br><span class="line">    consumer = KafkaConsumer(</span><br><span class="line">        <span class="string">&#x27;cache-updates&#x27;</span>,</span><br><span class="line">        bootstrap_servers=[<span class="string">&#x27;kafka1:9092&#x27;</span>, <span class="string">&#x27;kafka2:9092&#x27;</span>],</span><br><span class="line">        value_deserializer=<span class="keyword">lambda</span> m: json.loads(m.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> message <span class="keyword">in</span> consumer:</span><br><span class="line">        data = message.value</span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;cache_update&#x27;</span>:</span><br><span class="line">            <span class="comment"># 更新缓存</span></span><br><span class="line">            redis.setex(data[<span class="string">&#x27;key&#x27;</span>], <span class="number">3600</span>, data[<span class="string">&#x27;data&#x27;</span>])</span><br></pre></td></tr></table></figure><h3 id="四-强一致性方案"><a class="markdownIt-Anchor" href="#四-强一致性方案"></a> 四、强一致性方案</h3><h4 id="1-分布式事务方案"><a class="markdownIt-Anchor" href="#1-分布式事务方案"></a> 1. 分布式事务方案</h4><p><strong>使用2PC实现强一致性</strong>：</p><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DistributedTransaction</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, redis_client, db_client</span>):</span><br><span class="line">        self.redis = redis_client</span><br><span class="line">        self.db = db_client</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_with_2pc</span>(<span class="params">self, key, new_data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;两阶段提交更新&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 阶段一：准备</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 数据库准备</span></span><br><span class="line">            db_transaction = self.db.begin_transaction()</span><br><span class="line">            db_transaction.update(<span class="string">&quot;UPDATE users SET ... WHERE id = %s&quot;</span>, key.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>], new_data)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># Redis准备（设置临时状态）</span></span><br><span class="line">            self.redis.setex(<span class="string">f&quot;lock:<span class="subst">&#123;key&#125;</span>&quot;</span>, <span class="number">30</span>, <span class="string">&quot;prepared&quot;</span>)</span><br><span class="line">            self.redis.setex(<span class="string">f&quot;temp:<span class="subst">&#123;key&#125;</span>&quot;</span>, <span class="number">30</span>, new_data)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 阶段二：提交</span></span><br><span class="line">            db_transaction.commit()</span><br><span class="line">            self.redis.setex(key, <span class="number">3600</span>, new_data)</span><br><span class="line">            self.redis.delete(<span class="string">f&quot;lock:<span class="subst">&#123;key&#125;</span>&quot;</span>)</span><br><span class="line">            self.redis.delete(<span class="string">f&quot;temp:<span class="subst">&#123;key&#125;</span>&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># 回滚</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;db_transaction&#x27;</span> <span class="keyword">in</span> <span class="built_in">locals</span>():</span><br><span class="line">                db_transaction.rollback()</span><br><span class="line">            self.redis.delete(<span class="string">f&quot;lock:<span class="subst">&#123;key&#125;</span>&quot;</span>)</span><br><span class="line">            self.redis.delete(<span class="string">f&quot;temp:<span class="subst">&#123;key&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">raise</span> e</span><br></pre></td></tr></table></figure><h4 id="2-基于binlog的同步方案"><a class="markdownIt-Anchor" href="#2-基于binlog的同步方案"></a> 2. 基于binlog的同步方案</h4><p><strong>使用MySQL binlog同步缓存</strong>：</p><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysqlreplication</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinlogSyncService</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, redis_client</span>):</span><br><span class="line">        self.redis = redis_client</span><br><span class="line">        self.setup_binlog_stream()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setup_binlog_stream</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;设置binlog监听&quot;&quot;&quot;</span></span><br><span class="line">        stream = pymysqlreplication.BinLogStreamReader(</span><br><span class="line">            connection_settings=&#123;</span><br><span class="line">                <span class="string">&#x27;host&#x27;</span>: <span class="string">&#x27;mysql-master&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;port&#x27;</span>: <span class="number">3306</span>,</span><br><span class="line">                <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;repl&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;passwd&#x27;</span>: <span class="string">&#x27;password&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            server_id=<span class="number">100</span>,</span><br><span class="line">            blocking=<span class="literal">True</span>,</span><br><span class="line">            resume_stream=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> binlogevent <span class="keyword">in</span> stream:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(binlogevent, WriteRowsEvent):</span><br><span class="line">                self.handle_write_event(binlogevent)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(binlogevent, UpdateRowsEvent):</span><br><span class="line">                self.handle_update_event(binlogevent)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(binlogevent, DeleteRowsEvent):</span><br><span class="line">                self.handle_delete_event(binlogevent)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_write_event</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;处理插入事件&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> event.rows:</span><br><span class="line">            <span class="keyword">if</span> event.table == <span class="string">&#x27;users&#x27;</span>:</span><br><span class="line">                user_id = row[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">                redis_key = <span class="string">f&quot;user:<span class="subst">&#123;user_id&#125;</span>&quot;</span></span><br><span class="line">                self.redis.setex(redis_key, <span class="number">3600</span>, json.dumps(row[<span class="string">&#x27;values&#x27;</span>]))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_update_event</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;处理更新事件&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> event.rows:</span><br><span class="line">            <span class="keyword">if</span> event.table == <span class="string">&#x27;users&#x27;</span>:</span><br><span class="line">                user_id = row[<span class="string">&#x27;after_values&#x27;</span>][<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">                redis_key = <span class="string">f&quot;user:<span class="subst">&#123;user_id&#125;</span>&quot;</span></span><br><span class="line">                self.redis.setex(redis_key, <span class="number">3600</span>, json.dumps(row[<span class="string">&#x27;after_values&#x27;</span>]))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_delete_event</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;处理删除事件&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> event.rows:</span><br><span class="line">            <span class="keyword">if</span> event.table == <span class="string">&#x27;users&#x27;</span>:</span><br><span class="line">                user_id = row[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">                redis_key = <span class="string">f&quot;user:<span class="subst">&#123;user_id&#125;</span>&quot;</span></span><br><span class="line">                self.redis.delete(redis_key)</span><br></pre></td></tr></table></figure><h3 id="五-读写分离场景的一致性"><a class="markdownIt-Anchor" href="#五-读写分离场景的一致性"></a> 五、读写分离场景的一致性</h3><h4 id="1-主从延迟问题"><a class="markdownIt-Anchor" href="#1-主从延迟问题"></a> 1. 主从延迟问题</h4><p><strong>解决主从延迟导致的脏读</strong>：</p><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_with_read_after_write</span>(<span class="params">user_id, write_timestamp=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    读写分离环境下的一致性读取</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> write_timestamp:</span><br><span class="line">        <span class="comment"># 检查主从延迟</span></span><br><span class="line">        slave_lag = get_slave_lag()</span><br><span class="line">        <span class="keyword">if</span> time.time() - write_timestamp &amp;lt; slave_lag + <span class="number">1</span>:  <span class="comment"># 额外1秒缓冲</span></span><br><span class="line">            <span class="comment"># 强制读主库</span></span><br><span class="line">            <span class="keyword">return</span> read_from_master(user_id)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 先尝试读从库</span></span><br><span class="line">    user_data = read_from_slave(user_id)</span><br><span class="line">    <span class="keyword">if</span> user_data:</span><br><span class="line">        <span class="keyword">return</span> user_data</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 从库没有，读主库</span></span><br><span class="line">    <span class="keyword">return</span> read_from_master(user_id)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_from_master</span>(<span class="params">user_id</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;从主库读取&quot;&quot;&quot;</span></span><br><span class="line">    user_data = db_master.query(<span class="string">&quot;SELECT * FROM users WHERE id = %s&quot;</span>, user_id)</span><br><span class="line">    <span class="keyword">if</span> user_data:</span><br><span class="line">        <span class="comment"># 更新缓存</span></span><br><span class="line">        redis.setex(<span class="string">f&quot;user:<span class="subst">&#123;user_id&#125;</span>&quot;</span>, <span class="number">3600</span>, user_data)</span><br><span class="line">    <span class="keyword">return</span> user_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_from_slave</span>(<span class="params">user_id</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;从从库读取&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> db_slave.query(<span class="string">&quot;SELECT * FROM users WHERE id = %s&quot;</span>, user_id)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_slave_lag</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取从库延迟&quot;&quot;&quot;</span></span><br><span class="line">    result = db_slave.query(<span class="string">&quot;SHOW SLAVE STATUS&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result[<span class="string">&#x27;Seconds_Behind_Master&#x27;</span>] <span class="keyword">if</span> result <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="六-监控与治理"><a class="markdownIt-Anchor" href="#六-监控与治理"></a> 六、监控与治理</h3><h4 id="1-一致性监控体系"><a class="markdownIt-Anchor" href="#1-一致性监控体系"></a> 1. 一致性监控体系</h4><p><strong>监控关键指标</strong>：</p><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ConsistencyMonitor</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.metrics = &#123;</span><br><span class="line">            <span class="string">&#x27;cache_hits&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&#x27;cache_misses&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&#x27;stale_reads&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&#x27;consistency_errors&#x27;</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_consistency</span>(<span class="params">self, key, db_data, cache_data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查数据一致性&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> db_data != cache_data:</span><br><span class="line">            self.metrics[<span class="string">&#x27;consistency_errors&#x27;</span>] += <span class="number">1</span></span><br><span class="line">            self._repair_inconsistency(key, db_data)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_repair_inconsistency</span>(<span class="params">self, key, correct_data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;修复不一致数据&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            redis.setex(key, <span class="number">3600</span>, correct_data)</span><br><span class="line">            logging.warning(<span class="string">f&quot;Repaired inconsistency for key: <span class="subst">&#123;key&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">f&quot;Failed to repair inconsistency: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">track_stale_read</span>(<span class="params">self, key, duration</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;跟踪过期数据读取&quot;&quot;&quot;</span></span><br><span class="line">        self.metrics[<span class="string">&#x27;stale_reads&#x27;</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> duration &amp;gt; <span class="number">5</span>:  <span class="comment"># 5秒以上的旧数据</span></span><br><span class="line">            send_alert(<span class="string">f&quot;Stale data detected: <span class="subst">&#123;key&#125;</span>&quot;</span>, <span class="string">f&quot;Duration: <span class="subst">&#123;duration&#125;</span>s&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_report</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;生成监控报告&quot;&quot;&quot;</span></span><br><span class="line">        total_requests = self.metrics[<span class="string">&#x27;cache_hits&#x27;</span>] + self.metrics[<span class="string">&#x27;cache_misses&#x27;</span>]</span><br><span class="line">        consistency_rate = <span class="number">1</span> - (self.metrics[<span class="string">&#x27;consistency_errors&#x27;</span>] / total_requests) <span class="keyword">if</span> total_requests &amp;gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;consistency_rate&#x27;</span>: <span class="string">f&quot;<span class="subst">&#123;consistency_rate:<span class="number">.3</span>%&#125;</span>&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;stale_reads&#x27;</span>: self.metrics[<span class="string">&#x27;stale_reads&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;total_requests&#x27;</span>: total_requests</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="2-自动修复机制"><a class="markdownIt-Anchor" href="#2-自动修复机制"></a> 2. 自动修复机制</h4><p><strong>不一致数据自动检测和修复</strong>：</p><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AutoRepairService</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, redis_client, db_client</span>):</span><br><span class="line">        self.redis = redis_client</span><br><span class="line">        self.db = db_client</span><br><span class="line">        self.repair_queue = queue.Queue()</span><br><span class="line">        self.start_workers()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_workers</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;启动修复工作线程&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):  <span class="comment"># 3个修复 worker</span></span><br><span class="line">            thread = threading.Thread(target=self._repair_worker)</span><br><span class="line">            thread.daemon = <span class="literal">True</span></span><br><span class="line">            thread.start()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_repair_worker</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;修复工作线程&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                key = self.repair_queue.get()</span><br><span class="line">                self._repair_key(key)</span><br><span class="line">                self.repair_queue.task_done()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                logging.error(<span class="string">f&quot;Repair worker error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_repair_key</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;修复单个key&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 从数据库获取正确数据</span></span><br><span class="line">        <span class="keyword">if</span> key.startswith(<span class="string">&#x27;user:&#x27;</span>):</span><br><span class="line">            user_id = key.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            db_data = self.db.query(<span class="string">&quot;SELECT * FROM users WHERE id = %s&quot;</span>, user_id)</span><br><span class="line">            <span class="keyword">if</span> db_data:</span><br><span class="line">                <span class="comment"># 更新缓存</span></span><br><span class="line">                self.redis.setex(key, <span class="number">3600</span>, db_data)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">schedule_repair</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;调度修复任务&quot;&quot;&quot;</span></span><br><span class="line">        self.repair_queue.put(key)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bulk_repair_check</span>(<span class="params">self, pattern=<span class="string">&quot;user:*&quot;</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;批量检查修复&quot;&quot;&quot;</span></span><br><span class="line">        cursor = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            cursor, keys = self.redis.scan(cursor, <span class="keyword">match</span>=pattern, count=<span class="number">100</span>)</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> keys:</span><br><span class="line">                self._verify_and_repair(key)</span><br><span class="line">            <span class="keyword">if</span> cursor == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_verify_and_repair</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;验证并修复数据&quot;&quot;&quot;</span></span><br><span class="line">        cache_data = self.redis.get(key)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cache_data:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取数据库数据对比</span></span><br><span class="line">        <span class="keyword">if</span> key.startswith(<span class="string">&#x27;user:&#x27;</span>):</span><br><span class="line">            user_id = key.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            db_data = self.db.query(<span class="string">&quot;SELECT * FROM users WHERE id = %s&quot;</span>, user_id)</span><br><span class="line">            <span class="keyword">if</span> db_data != cache_data:</span><br><span class="line">                self.schedule_repair(key)</span><br></pre></td></tr></table></figure><h3 id="七-场景化解决方案"><a class="markdownIt-Anchor" href="#七-场景化解决方案"></a> 七、场景化解决方案</h3><h4 id="1-电商商品库存一致性"><a class="markdownIt-Anchor" href="#1-电商商品库存一致性"></a> 1. 电商商品库存一致性</h4><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InventoryService</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.redis = redis.Redis()</span><br><span class="line">        self.db = database.Connection()</span><br><span class="line">        self.lock = redis.Redis()  <span class="comment"># 用于分布式锁</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrease_stock</span>(<span class="params">self, product_id, quantity</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;减少库存（保证一致性）&quot;&quot;&quot;</span></span><br><span class="line">        lock_key = <span class="string">f&quot;lock:stock:<span class="subst">&#123;product_id&#125;</span>&quot;</span></span><br><span class="line">        cache_key = <span class="string">f&quot;stock:<span class="subst">&#123;product_id&#125;</span>&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取分布式锁</span></span><br><span class="line">        <span class="keyword">with</span> self._acquire_lock(lock_key):</span><br><span class="line">            <span class="comment"># 检查缓存库存</span></span><br><span class="line">            cache_stock = self.redis.get(cache_key)</span><br><span class="line">            <span class="keyword">if</span> cache_stock <span class="keyword">and</span> <span class="built_in">int</span>(cache_stock) &amp;lt; quantity:</span><br><span class="line">                <span class="keyword">raise</span> Exception(<span class="string">&quot;库存不足&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 更新数据库</span></span><br><span class="line">            self.db.update(</span><br><span class="line">                <span class="string">&quot;UPDATE products SET stock = stock - %s WHERE id = %s AND stock &amp;gt;= %s&quot;</span>,</span><br><span class="line">                quantity, product_id, quantity</span><br><span class="line">            )</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 更新缓存</span></span><br><span class="line">            <span class="keyword">if</span> cache_stock:</span><br><span class="line">                new_stock = <span class="built_in">int</span>(cache_stock) - quantity</span><br><span class="line">                self.redis.setex(cache_key, <span class="number">3600</span>, <span class="built_in">str</span>(new_stock))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 缓存不存在，删除以确保下次从数据库加载</span></span><br><span class="line">                self.redis.delete(cache_key)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_stock</span>(<span class="params">self, product_id</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取库存信息&quot;&quot;&quot;</span></span><br><span class="line">        cache_key = <span class="string">f&quot;stock:<span class="subst">&#123;product_id&#125;</span>&quot;</span></span><br><span class="line">        stock = self.redis.get(cache_key)</span><br><span class="line">        <span class="keyword">if</span> stock:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(stock)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 从数据库获取</span></span><br><span class="line">        stock = self.db.query(<span class="string">&quot;SELECT stock FROM products WHERE id = %s&quot;</span>, product_id)</span><br><span class="line">        <span class="keyword">if</span> stock <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.redis.setex(cache_key, <span class="number">3600</span>, <span class="built_in">str</span>(stock))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> stock</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_acquire_lock</span>(<span class="params">self, lock_key, timeout=<span class="number">10</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取分布式锁&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 实现分布式锁逻辑</span></span><br><span class="line">        identifier = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line">        end = time.time() + timeout</span><br><span class="line">        <span class="keyword">while</span> time.time() &amp;lt; end:</span><br><span class="line">            <span class="keyword">if</span> self.lock.<span class="built_in">set</span>(lock_key, identifier, nx=<span class="literal">True</span>, ex=<span class="number">5</span>):</span><br><span class="line">                <span class="keyword">return</span> identifier</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;获取锁超时&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="2-金融账户余额一致性"><a class="markdownIt-Anchor" href="#2-金融账户余额一致性"></a> 2. 金融账户余额一致性</h4><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AccountService</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.redis = redis.Redis()</span><br><span class="line">        self.db = database.Connection()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">transfer</span>(<span class="params">self, from_account, to_account, amount</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;转账操作（强一致性要求）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 使用数据库事务保证一致性</span></span><br><span class="line">        <span class="keyword">with</span> self.db.transaction():</span><br><span class="line">            <span class="comment"># 更新数据库</span></span><br><span class="line">            self.db.update(</span><br><span class="line">                <span class="string">&quot;UPDATE accounts SET balance = balance - %s WHERE id = %s AND balance &amp;gt;= %s&quot;</span>,</span><br><span class="line">                amount, from_account, amount</span><br><span class="line">            )</span><br><span class="line">            self.db.update(</span><br><span class="line">                <span class="string">&quot;UPDATE accounts SET balance = balance + %s WHERE id = %s&quot;</span>,</span><br><span class="line">                amount, to_account</span><br><span class="line">            )</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 删除相关缓存</span></span><br><span class="line">            self.redis.delete(<span class="string">f&quot;account:<span class="subst">&#123;from_account&#125;</span>&quot;</span>)</span><br><span class="line">            self.redis.delete(<span class="string">f&quot;account:<span class="subst">&#123;to_account&#125;</span>&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 记录交易日志</span></span><br><span class="line">            self._log_transaction(from_account, to_account, amount)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_balance</span>(<span class="params">self, account_id</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取余额（最终一致性）&quot;&quot;&quot;</span></span><br><span class="line">        cache_key = <span class="string">f&quot;account:<span class="subst">&#123;account_id&#125;</span>&quot;</span></span><br><span class="line">        balance = self.redis.get(cache_key)</span><br><span class="line">        <span class="keyword">if</span> balance:</span><br><span class="line">            <span class="keyword">return</span> decimal.Decimal(balance)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 从数据库获取</span></span><br><span class="line">        balance = self.db.query(<span class="string">&quot;SELECT balance FROM accounts WHERE id = %s&quot;</span>, account_id)</span><br><span class="line">        <span class="keyword">if</span> balance <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 异步更新缓存</span></span><br><span class="line">            threading.Thread(</span><br><span class="line">                target=self.redis.setex,</span><br><span class="line">                args=(cache_key, <span class="number">300</span>, <span class="built_in">str</span>(balance))</span><br><span class="line">            ).start()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> balance</span><br></pre></td></tr></table></figure><h3 id="八-总结与最佳实践"><a class="markdownIt-Anchor" href="#八-总结与最佳实践"></a> 八、总结与最佳实践</h3><h4 id="一致性方案选择指南"><a class="markdownIt-Anchor" href="#一致性方案选择指南"></a> 一致性方案选择指南</h4><p><img src="db541323ce40494a994076ba3cd5de0c.png" alt="" /></p><h4 id="最佳实践-checklist"><a class="markdownIt-Anchor" href="#最佳实践-checklist"></a> 最佳实践 checklist ✅</h4><p><strong>设计阶段</strong>：</p><ul><li><p>明确业务的一致性要求</p></li><li><p>选择合适的一致性级别</p></li><li><p>设计缓存更新策略</p></li><li><p>规划监控和修复机制</p></li></ul><p><strong>开发阶段</strong>：</p><ul><li><p>实现适当的重试机制</p></li><li><p>添加分布式锁避免并发冲突</p></li><li><p>设置合理的超时时间</p></li><li><p>实现数据验证和修复</p></li></ul><p><strong>运维阶段</strong>：</p><ul><li><p>监控缓存命中率和一致性</p></li><li><p>设置告警机制</p></li><li><p>定期进行一致性检查</p></li><li><p>准备应急预案</p></li></ul><h4 id="关键建议"><a class="markdownIt-Anchor" href="#关键建议"></a> 关键建议 🚀</h4><ol><li><p><strong>不要过度设计</strong>：根据业务需求选择适当的一致性级别</p></li><li><p><strong>监控重于预防</strong>：建立完善的监控体系比追求完美方案更重要</p></li><li><p><strong>设计容错机制</strong>：假设不一致会发生，准备好修复方案</p></li><li><p><strong>持续优化改进</strong>：根据监控数据不断调整和优化策略</p></li></ol><p>通过本文的详细分析和实践方案，你应该能够根据业务需求选择合适的缓存一致性方案，并构建出可靠的数据同步体系。记住：一致性是一个持续的过程，而不是一次性的解决方案！</p>]]></content>
    
    
    <summary type="html">【Redis缓存一致性：如何保证数据库与缓存同步】</summary>
    
    
    
    <category term="数据库" scheme="http://www.formeasy.cc/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="http://www.formeasy.cc/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch知识点详细总结</title>
    <link href="http://www.formeasy.cc/2025/10/03/Elasticsearch/Elasticsearch%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/"/>
    <id>http://www.formeasy.cc/2025/10/03/Elasticsearch/Elasticsearch%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/</id>
    <published>2025-10-03T13:42:57.000Z</published>
    <updated>2025-10-03T13:48:08.764Z</updated>
    
    <content type="html"><![CDATA[<p>Elasticsearch（简称 ES）是一款基于 Lucene 构建的分布式、高扩展、高实时的全文搜索引擎，同时也是 Elastic Stack（ELK Stack：Elasticsearch, Logstash, Kibana）的核心组件，广泛应用于日志分析、全文检索、实时数据分析等场景。本文将从核心概念、架构设计、数据操作、查询分析、性能优化等维度进行全面总结。</p><h3 id="一-核心概念"><a class="markdownIt-Anchor" href="#一-核心概念"></a> 一、核心概念</h3><p>Elasticsearch 的概念体系与传统数据库有显著差异，理解这些基础概念是掌握 ES 的前提。</p><h4 id="1-与传统数据库的对应关系"><a class="markdownIt-Anchor" href="#1-与传统数据库的对应关系"></a> 1. 与传统数据库的对应关系</h4><p>为便于快速理解，可将 ES 核心概念与关系型数据库（如 MySQL）进行类比：</p><table><thead><tr><th>Elasticsearch 概念</th><th>关系型数据库概念</th><th>说明</th></tr></thead><tbody><tr><td>Index（索引）</td><td>Database（数据库）</td><td>存储同类文档的集合，具有相似的结构</td></tr><tr><td>Type（类型，7.x 后废弃）</td><td>Table（表）</td><td>早期用于对 Index 内文档分类，7.x 起强制为 <code>_doc</code></td></tr><tr><td>Document（文档）</td><td>Row（行）</td><td>索引中最小的数据单元，以 JSON 格式存储</td></tr><tr><td>Field（字段）</td><td>Column（列）</td><td>文档中的属性，对应 JSON 的键值对</td></tr><tr><td>Mapping（映射）</td><td>Schema（表结构）</td><td>定义文档中字段的类型、分词器、是否索引等元数据</td></tr><tr><td>Shard（分片）</td><td>-</td><td>索引的物理分片，实现水平扩展（Lucene 索引实例）</td></tr><tr><td>Replica（副本）</td><td>-</td><td>分片的冗余备份，用于高可用和负载分担</td></tr></tbody></table><h4 id="2-核心概念详解"><a class="markdownIt-Anchor" href="#2-核心概念详解"></a> 2. 核心概念详解</h4><h5 id="1index索引"><a class="markdownIt-Anchor" href="#1index索引"></a> （1）Index（索引）</h5><ul><li><strong>定义</strong>：一个逻辑上的集合，包含具有相似结构的文档（如“商品索引”“用户日志索引”）。</li><li><strong>命名规则</strong>： lowercase 小写，无特殊字符（建议用 <code>-</code> 分隔，如 <code>user-logs-2024</code>）。</li><li><strong>特点</strong>：索引是分片的逻辑容器，创建时需指定分片和副本数量，创建后分片数量不可修改（副本可动态调整）。</li></ul><h5 id="2document文档"><a class="markdownIt-Anchor" href="#2document文档"></a> （2）Document（文档）</h5><ul><li><strong>格式</strong>：唯一支持 JSON 格式，灵活性高（无需严格统一结构，但建议遵循 Mapping 规范）。</li><li><strong>唯一标识</strong>：由 <code>_index</code>（所属索引）、<code>_type</code>（7.x 固定为 <code>_doc</code>）、<code>_id</code>（文档 ID）共同确定。<ul><li><code>_id</code> 可手动指定（如用业务 ID 作为 <code>_id</code>），也可由 ES 自动生成（20 位 UUID）。</li></ul></li><li><strong>元数据</strong>：除业务字段外，包含 <code>_index</code>、<code>_type</code>、<code>_id</code>、<code>_version</code>（版本号）、<code>_score</code>（查询相关性得分）等系统字段。</li></ul><h5 id="3mapping映射"><a class="markdownIt-Anchor" href="#3mapping映射"></a> （3）Mapping（映射）</h5><ul><li><strong>定义</strong>：相当于文档的“ schema ”，用于约束字段的类型、分词方式、是否可检索等属性。</li><li><strong>类型</strong>：<ul><li>动态映射（Dynamic Mapping）：ES 自动根据文档字段值推断类型（如数字→<code>long</code>，字符串→<code>text</code>/<code>keyword</code>），适合快速上手，但可能存在精度问题。</li><li>静态映射（Explicit Mapping）：手动定义字段类型和属性，适合生产环境，保证数据结构一致性。</li></ul></li><li><strong>常见字段类型</strong>：<ul><li>文本类：<code>text</code>（可分词，用于全文检索，如“商品描述”）、<code>keyword</code>（不分词，用于精确匹配/聚合，如“商品分类”）。</li><li>数值类：<code>long</code>、<code>integer</code>、<code>double</code>、<code>float</code>（对应不同精度的数字）。</li><li>日期类：<code>date</code>（支持格式化，如 <code>yyyy-MM-dd HH:mm:ss</code>）。</li><li>布尔类：<code>boolean</code>（<code>true</code>/<code>false</code>）。</li><li>复合类：<code>object</code>（嵌套对象）、<code>nested</code>（处理嵌套数组，解决 <code>object</code> 类型的扁平化问题）。</li></ul></li></ul><h5 id="4shard-replica分片与副本"><a class="markdownIt-Anchor" href="#4shard-replica分片与副本"></a> （4）Shard &amp; Replica（分片与副本）</h5><ul><li><p><strong>Shard（分片）</strong>：</p><ul><li>核心目的：实现水平扩展。单个索引的数据被拆分到多个分片，每个分片是独立的 Lucene 索引，可分布在不同节点。</li><li>类型：主分片（Primary Shard）、副本分片（Replica Shard）。</li><li>数量限制：创建索引时指定主分片数量（<code>number_of_shards</code>），创建后不可修改（需通过 <code>reindex</code> 重建索引调整）；默认 1 个主分片。</li></ul></li><li><p><strong>Replica（副本）</strong>：</p><ul><li>核心目的：高可用 + 负载分担。副本是主分片的冗余备份，主分片故障时可自动升级为主分片；同时可承担查询请求，缓解主分片压力。</li><li>数量配置：创建时通过 <code>number_of_replicas</code> 指定，支持动态修改（如 <code>PUT /index/_settings &#123;&quot;number_of_replicas&quot;: 2&#125;</code>）；默认 1 个副本。</li><li>约束：副本分片不会与对应的主分片在同一节点（避免单点故障）。</li></ul></li></ul><h5 id="5cluster-node集群与节点"><a class="markdownIt-Anchor" href="#5cluster-node集群与节点"></a> （5）Cluster &amp; Node（集群与节点）</h5><ul><li><p><strong>Node（节点）</strong>：</p><ul><li>定义：运行 ES 进程的单个服务器，是集群的基本组成单元。</li><li>类型：<ul><li>主节点（Master Node）：负责集群元数据管理（如创建索引、分片分配），默认所有节点均可竞选，建议通过 <code>node.master: true</code> 专门配置。</li><li>数据节点（Data Node）：负责数据的存储、索引、查询和聚合，通过 <code>node.data: true</code> 配置，是集群的“数据载体”。</li><li>协调节点（Coordinating Node）：接收客户端请求，分发到其他节点，汇总结果返回；默认所有节点都是协调节点，可通过 <code>node.master: false</code> + <code>node.data: false</code> 配置专用协调节点。</li><li>ingest 节点：负责数据预处理（如添加字段、转换格式），通过 <code>node.ingest: true</code> 配置。</li></ul></li></ul></li><li><p><strong>Cluster（集群）</strong>：</p><ul><li>定义：由多个节点组成的集合，共享同一集群名称（<code>cluster.name</code>），协同工作实现分布式能力。</li><li>集群状态：通过 <code>_cluster/health</code> 查看，状态分为 <code>green</code>（所有主/副本分片正常）、<code>yellow</code>（主分片正常，副本分片缺失）、<code>red</code>（主分片缺失，数据不可用）。</li></ul></li></ul><h3 id="二-架构设计"><a class="markdownIt-Anchor" href="#二-架构设计"></a> 二、架构设计</h3><p>Elasticsearch 的分布式架构是其高扩展、高可用的核心，主要围绕“分片分配”“路由机制”“故障转移”展开。</p><h4 id="1-分片路由机制"><a class="markdownIt-Anchor" href="#1-分片路由机制"></a> 1. 分片路由机制</h4><p>当客户端写入/查询文档时，ES 需要确定文档归属的主分片，核心逻辑如下：</p><ol><li>计算路由值：<code>shard = hash(_routing) % number_of_primary_shards</code>。</li><li><code>_routing</code> 默认为文档的 <code>_id</code>，可手动指定（如按“用户 ID”路由，确保同一用户的文档在同一分片，优化聚合效率）。</li><li>协调节点根据路由结果，将请求转发到主分片所在节点；写入操作需等待主分片和副本分片均确认后返回成功（默认配置）。</li></ol><h4 id="2-分片分配与再平衡"><a class="markdownIt-Anchor" href="#2-分片分配与再平衡"></a> 2. 分片分配与再平衡</h4><ul><li><strong>分配策略</strong>：Master 节点负责将主分片和副本分片分配到不同节点，遵循“副本不与主分片同节点”“分片均匀分布”等原则。</li><li><strong>再平衡（Rebalancing）</strong>：当集群节点数量变化（新增/下线节点）或分片状态变化时，Master 会自动触发分片迁移，确保负载均衡；可通过 <code>cluster.routing.rebalance.enable</code> 控制开关。</li></ul><h4 id="3-故障转移机制"><a class="markdownIt-Anchor" href="#3-故障转移机制"></a> 3. 故障转移机制</h4><p>当主节点故障或主分片不可用时，ES 自动执行故障转移：</p><ol><li>节点间通过 ZenDiscovery 协议选举新的主节点（需满足“法定人数”，避免脑裂，可配置 <code>discovery.zen.minimum_master_nodes</code>）。</li><li>新主节点将该主分片对应的副本分片升级为新的主分片。</li><li>重新创建缺失的副本分片，恢复集群状态为 <code>green</code>。</li></ol><h3 id="三-数据操作crud"><a class="markdownIt-Anchor" href="#三-数据操作crud"></a> 三、数据操作（CRUD）</h3><p>ES 提供 RESTful API 用于数据交互，核心操作包括索引（Index）、查询（Search）、更新（Update）、删除（Delete）。</p><h4 id="1-文档操作"><a class="markdownIt-Anchor" href="#1-文档操作"></a> 1. 文档操作</h4><h5 id="1创建文档index"><a class="markdownIt-Anchor" href="#1创建文档index"></a> （1）创建文档（Index）</h5><ul><li>手动指定 <code>_id</code>：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /&lt;index&gt;/_doc/&lt;_id&gt;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;field1&quot;: &quot;value1&quot;,</span><br><span class="line">  &quot;field2&quot;: &quot;value2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自动生成 <code>_id</code>（用 POST）：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /&lt;index&gt;/_doc/</span><br><span class="line">&#123;</span><br><span class="line">  &quot;field1&quot;: &quot;value1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2查询文档get"><a class="markdownIt-Anchor" href="#2查询文档get"></a> （2）查询文档（Get）</h5><ul><li>按 <code>_id</code> 精确查询：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /&lt;index&gt;/_doc/&lt;_id&gt;</span><br></pre></td></tr></table></figure><ul><li>查询文档是否存在：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HEAD /&lt;index&gt;/_doc/&lt;_id&gt;  # 200 存在，404 不存在</span><br></pre></td></tr></table></figure><h5 id="3更新文档update"><a class="markdownIt-Anchor" href="#3更新文档update"></a> （3）更新文档（Update）</h5><ul><li>全量更新（覆盖原有文档，<code>_version</code> 自增）：直接用 <code>PUT</code> 重写文档。</li><li>局部更新（仅修改指定字段）：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /&lt;index&gt;/_doc/&lt;_id&gt;/_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">    &quot;field1&quot;: &quot;new_value&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4删除文档delete"><a class="markdownIt-Anchor" href="#4删除文档delete"></a> （4）删除文档（Delete）</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /&lt;index&gt;/_doc/&lt;_id&gt;</span><br></pre></td></tr></table></figure><h4 id="2-索引操作"><a class="markdownIt-Anchor" href="#2-索引操作"></a> 2. 索引操作</h4><h5 id="1创建索引含-mapping"><a class="markdownIt-Anchor" href="#1创建索引含-mapping"></a> （1）创建索引（含 Mapping）</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">PUT /&lt;index&gt;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;number_of_shards&quot;: 3,    # 主分片数量</span><br><span class="line">    &quot;number_of_replicas&quot;: 1   # 副本数量</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,       # 可分词，用于全文检索</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_max_word&quot;  # 中文分词器</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;category&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;     # 不分词，用于精确匹配</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;double&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;create_time&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;date&quot;,</span><br><span class="line">        &quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2删除索引"><a class="markdownIt-Anchor" href="#2删除索引"></a> （2）删除索引</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELETE /&lt;index&gt;  # 删除单个索引</span><br><span class="line">DELETE /&lt;index1&gt;,&lt;index2&gt;  # 删除多个索引</span><br><span class="line">DELETE /*  # 删除所有索引（谨慎使用！）</span><br></pre></td></tr></table></figure><h5 id="3查看索引信息"><a class="markdownIt-Anchor" href="#3查看索引信息"></a> （3）查看索引信息</h5><ul><li>查看索引设置：<code>GET /&lt;index&gt;/_settings</code></li><li>查看索引 Mapping：<code>GET /&lt;index&gt;/_mapping</code></li><li>查看索引统计信息：<code>GET /&lt;index&gt;/_stats</code></li></ul><h3 id="四-查询与分析"><a class="markdownIt-Anchor" href="#四-查询与分析"></a> 四、查询与分析</h3><p>查询是 ES 的核心能力，支持全文检索、精确匹配、聚合分析等复杂场景，查询语法通过 <code>Query DSL</code>（Domain Specific Language）定义。</p><h4 id="1-查询类型分类"><a class="markdownIt-Anchor" href="#1-查询类型分类"></a> 1. 查询类型分类</h4><p>ES 的查询分为两大类：</p><table><thead><tr><th>类型</th><th>特点</th><th>代表查询</th></tr></thead><tbody><tr><td>叶子查询（Leaf Queries）</td><td>直接查询字段值，可单独使用</td><td>匹配查询（match）、精确匹配（term）、范围查询（range）</td></tr><tr><td>复合查询（Compound Queries）</td><td>组合多个叶子查询或其他复合查询</td><td>布尔查询（bool）、嵌套查询（nested）、函数评分查询（function_score）</td></tr></tbody></table><h4 id="2-常用核心查询"><a class="markdownIt-Anchor" href="#2-常用核心查询"></a> 2. 常用核心查询</h4><h5 id="1匹配查询match"><a class="markdownIt-Anchor" href="#1匹配查询match"></a> （1）匹配查询（match）</h5><ul><li>用于 <code>text</code> 类型字段的全文检索，会对查询词分词后匹配。</li><li>示例：查询“手机”相关的商品（“智能手机”“手机壳”均会匹配）：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /products/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &quot;手机&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2精确匹配term"><a class="markdownIt-Anchor" href="#2精确匹配term"></a> （2）精确匹配（term）</h5><ul><li>用于 <code>keyword</code> 或数值类型字段的精确匹配，不对查询词分词。</li><li>示例：查询分类为“手机”的商品（仅“手机”分类匹配，“智能手机”不匹配）：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /products/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;category&quot;: &quot;手机&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3范围查询range"><a class="markdownIt-Anchor" href="#3范围查询range"></a> （3）范围查询（range）</h5><ul><li>用于数值、日期类型字段的范围筛选，支持 <code>gt</code>（&gt;）、<code>gte</code>（≥）、<code>lt</code>（&lt;）、<code>lte</code>（≤）。</li><li>示例：查询价格 1000-3000 元的商品：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /products/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;gte&quot;: 1000,</span><br><span class="line">        &quot;lte&quot;: 3000</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4布尔查询bool"><a class="markdownIt-Anchor" href="#4布尔查询bool"></a> （4）布尔查询（bool）</h5><ul><li>组合多个子查询，通过 <code>must</code>（必须匹配）、<code>should</code>（可选匹配，加分）、<code>must_not</code>（必须不匹配）、<code>filter</code>（过滤，不影响评分）控制逻辑。</li><li>示例：查询分类为“手机”、价格 1000-3000 元、标题含“华为”的商品：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /products/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;&quot;term&quot;: &#123;&quot;category&quot;: &quot;手机&quot;&#125;&#125;,</span><br><span class="line">        &#123;&quot;match&quot;: &#123;&quot;title&quot;: &quot;华为&quot;&#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123;&quot;range&quot;: &#123;&quot;price&quot;: &#123;&quot;gte&quot;: 1000, &quot;lte&quot;: 3000&#125;&#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-聚合分析aggregation"><a class="markdownIt-Anchor" href="#3-聚合分析aggregation"></a> 3. 聚合分析（Aggregation）</h4><p>聚合用于对查询结果进行统计分析（如分组、求和、排序），类似 SQL 的 <code>GROUP BY</code> + 聚合函数，分为<strong>桶聚合（Bucket）</strong> 和<strong>指标聚合（Metric）</strong>。</p><h5 id="1桶聚合bucket"><a class="markdownIt-Anchor" href="#1桶聚合bucket"></a> （1）桶聚合（Bucket）</h5><ul><li>按条件对数据分组，每个组称为一个“桶”，如按分类分组、按价格区间分组。</li><li>示例：按“category”字段分组，统计每个分类的商品数量：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /products/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,  # 不返回原始文档，仅返回聚合结果</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;category_count&quot;: &#123;  # 聚合名称（自定义）</span><br><span class="line">      &quot;terms&quot;: &#123;  # 桶聚合类型：按字段值分组</span><br><span class="line">        &quot;field&quot;: &quot;category&quot;,</span><br><span class="line">        &quot;size&quot;: 10  # 返回前 10 个分组</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2指标聚合metric"><a class="markdownIt-Anchor" href="#2指标聚合metric"></a> （2）指标聚合（Metric）</h5><ul><li>对桶内数据进行数值计算，如求和、平均值、最大值等。</li><li>示例：按分类分组，统计每个分类的商品平均价格：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /products/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;category_avg_price&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;&quot;field&quot;: &quot;category&quot;&#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;  # 嵌套指标聚合</span><br><span class="line">        &quot;avg_price&quot;: &#123;</span><br><span class="line">          &quot;avg&quot;: &#123;&quot;field&quot;: &quot;price&quot;&#125;  # 指标聚合类型：求平均值</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五-分词器analyzer"><a class="markdownIt-Anchor" href="#五-分词器analyzer"></a> 五、分词器（Analyzer）</h3><p>分词是全文检索的核心步骤，将文本拆分为可索引的“词条（Term）”，ES 的分词能力依赖于分词器。</p><h4 id="1-分词器组成"><a class="markdownIt-Anchor" href="#1-分词器组成"></a> 1. 分词器组成</h4><p>一个完整的分词器由 3 部分组成：</p><ol><li><strong>Character Filter（字符过滤器）</strong>：预处理文本（如去除 HTML 标签、替换特殊字符），可选。</li><li><strong>Tokenizer（分词器）</strong>：将文本拆分为词条（如按空格、标点拆分），必须。</li><li><strong>Token Filter（词条过滤器）</strong>：处理词条（如小写转换、停用词移除、同义词替换），可选。</li></ol><h4 id="2-内置分词器"><a class="markdownIt-Anchor" href="#2-内置分词器"></a> 2. 内置分词器</h4><ul><li><strong>Standard Analyzer</strong>：默认分词器，按 Unicode 文本分割，小写转换，移除标点。</li><li><strong>Simple Analyzer</strong>：按非字母字符分割，小写转换。</li><li><strong>Whitespace Analyzer</strong>：仅按空格分割，不做其他处理。</li><li><strong>Keyword Analyzer</strong>：不分词，将整个文本作为一个词条。</li></ul><h4 id="3-中文分词器"><a class="markdownIt-Anchor" href="#3-中文分词器"></a> 3. 中文分词器</h4><p>内置分词器对中文支持差（如将“我爱中国”拆分为“我”“爱”“中”“国”），需引入第三方分词器：</p><ul><li><strong>IK Analyzer</strong>：最常用的中文分词器，支持自定义词典，有两种模式：<ul><li><code>ik_max_word</code>：最大粒度分词（如“中华人民共和国”→“中华人民共和国”“中华人民”“中华”“中国”等）。</li><li><code>ik_smart</code>：</li></ul></li></ul>]]></content>
    
    
    <summary type="html">Elasticsearch知识点详细总结</summary>
    
    
    
    <category term="数据库" scheme="http://www.formeasy.cc/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Elasticsearch" scheme="http://www.formeasy.cc/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>开发中常用素材格式完整清单（适用于前后端、全栈及各领域研发工程师）</title>
    <link href="http://www.formeasy.cc/2025/10/03/Other/%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%B4%A0%E6%9D%90%E6%A0%BC%E5%BC%8F%E5%AE%8C%E6%95%B4%E6%B8%85%E5%8D%95%EF%BC%88%E9%80%82%E7%94%A8%E4%BA%8E%E5%89%8D%E5%90%8E%E7%AB%AF%E3%80%81%E5%85%A8%E6%A0%88%E5%8F%8A%E5%90%84%E9%A2%86%E5%9F%9F%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%EF%BC%89/"/>
    <id>http://www.formeasy.cc/2025/10/03/Other/%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%B4%A0%E6%9D%90%E6%A0%BC%E5%BC%8F%E5%AE%8C%E6%95%B4%E6%B8%85%E5%8D%95%EF%BC%88%E9%80%82%E7%94%A8%E4%BA%8E%E5%89%8D%E5%90%8E%E7%AB%AF%E3%80%81%E5%85%A8%E6%A0%88%E5%8F%8A%E5%90%84%E9%A2%86%E5%9F%9F%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%EF%BC%89/</id>
    <published>2025-10-03T13:29:38.000Z</published>
    <updated>2025-10-03T13:37:49.989Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开发中常用素材格式完整清单适用于前后端-全栈及各领域研发工程师"><a class="markdownIt-Anchor" href="#开发中常用素材格式完整清单适用于前后端-全栈及各领域研发工程师"></a> 开发中常用素材格式完整清单（适用于前后端、全栈及各领域研发工程师）</h2><p>在软件开发过程中，无论是构建 Web 应用、移动 App、桌面程序还是 AI 系统，开发者都会接触到各种类型的<strong>数字素材</strong>。这些素材不仅是产品功能的组成部分，也直接影响用户体验、性能和可维护性。</p><p>本文整理了一份<strong>全面、分类清晰、跨领域</strong>的开发常用素材格式清单，适用于：</p><ul><li>✅ 前端工程师</li><li>✅ 后端工程师</li><li>✅ 全栈工程师</li><li>✅ 移动开发工程师（iOS/Android）</li><li>✅ 数据科学家 / AI 工程师</li><li>✅ DevOps 工程师</li><li>✅ UI/UX 设计师与开发者协作场景</li></ul><hr /><h3 id="一-图像素材images"><a class="markdownIt-Anchor" href="#一-图像素材images"></a> 📁 一、图像素材（Images）</h3><table><thead><tr><th>格式</th><th>全称</th><th>特点</th><th>适用场景</th><th>开发者用途</th></tr></thead><tbody><tr><td><strong>JPEG / JPG</strong></td><td>Joint Photographic Experts Group</td><td>有损压缩，文件小，支持真彩色</td><td>照片、背景图、用户上传图片</td><td>前端展示、后端存储、CDN 分发</td></tr><tr><td><strong>PNG</strong></td><td>Portable Network Graphics</td><td>无损压缩，支持透明通道（Alpha）</td><td>Logo、图标、需要透明背景的图像</td><td>前端 UI 元素、SVG 替代方案</td></tr><tr><td><strong>GIF</strong></td><td>Graphics Interchange Format</td><td>支持动画，256 色，支持透明</td><td>简单动画、loading 效果</td><td>前端动效、提示动画</td></tr><tr><td><strong>WebP</strong></td><td>Web Picture Format (Google)</td><td>高压缩率，支持有损/无损 + 透明 + 动画</td><td>Web 图片优化，替代 JPEG/PNG</td><td>前端性能优化，节省带宽</td></tr><tr><td><strong>AVIF</strong></td><td>AV1 Image File Format</td><td>新一代高效压缩格式，优于 WebP</td><td>高质量图片，未来 Web 标准</td><td>前端实验性支持，渐进增强</td></tr><tr><td><strong>SVG</strong></td><td>Scalable Vector Graphics</td><td>矢量图，XML 格式，无限缩放不失真</td><td>图标、Logo、图表、UI 组件</td><td>前端内联使用、动态修改样式</td></tr><tr><td><strong>ICO</strong></td><td>Icon Format</td><td>Windows 图标格式，支持多尺寸</td><td>网站 favicon、桌面应用图标</td><td>前端 <code>&lt;link rel=&quot;icon&quot;&gt;</code></td></tr><tr><td><strong>BMP</strong></td><td>Bitmap</td><td>无压缩，文件大</td><td>基本图像处理教学</td><td>一般不用于生产环境</td></tr></tbody></table><blockquote><p>🔧 <strong>开发者建议</strong>：优先使用 WebP + SVG，提供 JPEG/PNG 回退。</p></blockquote><hr /><h3 id="二-音频素材audio"><a class="markdownIt-Anchor" href="#二-音频素材audio"></a> 🎵 二、音频素材（Audio）</h3><table><thead><tr><th>格式</th><th>全称</th><th>特点</th><th>适用场景</th><th>开发者用途</th></tr></thead><tbody><tr><td><strong>MP3</strong></td><td>MPEG-1 Audio Layer III</td><td>有损压缩，兼容性极广</td><td>背景音乐、语音播放</td><td>前端 <code>&lt;audio&gt;</code>、App 内嵌播放</td></tr><tr><td><strong>WAV</strong></td><td>Waveform Audio File Format</td><td>无损，文件大，PCM 编码</td><td>专业音频处理、录音</td><td>后端语音识别输入</td></tr><tr><td><strong>OGG</strong></td><td>Ogg Vorbis</td><td>开源有损压缩，Web 友好</td><td>Web 游戏音效、HTML5 音频</td><td>前端替代 MP3（免版权）</td></tr><tr><td><strong>AAC</strong></td><td>Advanced Audio Coding</td><td>高效压缩，音质好</td><td>iOS 系统、视频伴音</td><td>移动 App、流媒体</td></tr><tr><td><strong>FLAC</strong></td><td>Free Lossless Audio Codec</td><td>无损压缩，开源</td><td>音乐存档、高保真播放</td><td>音乐类 App、专业音频平台</td></tr><tr><td><strong>M4A</strong></td><td>MPEG-4 Audio</td><td>基于 AAC，苹果生态常用</td><td>iTunes、播客</td><td>iOS App 音频资源</td></tr></tbody></table><blockquote><p>🔧 <strong>开发者建议</strong>：Web 使用 <code>MP3 + OGG</code> 多格式支持；AI 语音处理优先用 <code>WAV</code>。</p></blockquote><hr /><h3 id="三-视频素材video"><a class="markdownIt-Anchor" href="#三-视频素材video"></a> 🎥 三、视频素材（Video）</h3><table><thead><tr><th>格式</th><th>全称</th><th>特点</th><th>适用场景</th><th>开发者用途</th></tr></thead><tbody><tr><td><strong>MP4</strong></td><td>MPEG-4 Part 14</td><td>H.264/H.265 编码，兼容性好</td><td>Web 视频、App 播放</td><td>前端 <code>&lt;video&gt;</code>、移动端播放</td></tr><tr><td><strong>WebM</strong></td><td>Web Media Format (Google)</td><td>VP8/VP9 编码，开源免费</td><td>Web 视频，替代 MP4</td><td>前端性能优化，免版权</td></tr><tr><td><strong>AVI</strong></td><td>Audio Video Interleave</td><td>微软格式，文件大</td><td>旧系统兼容</td><td>一般不用于新项目</td></tr><tr><td><strong>MOV</strong></td><td>QuickTime Movie</td><td>苹果格式，高质量</td><td>iOS 录制、专业剪辑</td><td>iOS App 视频上传处理</td></tr><tr><td><strong>MKV</strong></td><td>Matroska Video</td><td>支持多音轨、字幕，封装能力强</td><td>视频存档、高清资源</td><td>后端转码输入</td></tr><tr><td><strong>FLV</strong></td><td>Flash Video</td><td>旧式流媒体格式</td><td>逐步淘汰</td><td>仅维护老系统</td></tr></tbody></table><blockquote><p>🔧 <strong>开发者建议</strong>：Web 推荐 <code>MP4 (H.264) + WebM</code> 双格式；使用 FFmpeg 进行转码。</p></blockquote><hr /><h3 id="四-文档与数据格式documents-data"><a class="markdownIt-Anchor" href="#四-文档与数据格式documents-data"></a> 📄 四、文档与数据格式（Documents &amp; Data）</h3><table><thead><tr><th>格式</th><th>类型</th><th>特点</th><th>适用场景</th><th>开发者用途</th></tr></thead><tbody><tr><td><strong>JSON</strong></td><td>数据交换</td><td>轻量、易读、JavaScript 原生支持</td><td>API 返回、配置文件、前后端通信</td><td>全栈通用，必会格式</td></tr><tr><td><strong>XML</strong></td><td>标记语言</td><td>结构化强，支持 Schema</td><td>SOAP、RSS、Android 布局</td><td>后端接口、配置文件</td></tr><tr><td><strong>YAML</strong></td><td>配置文件</td><td>缩进语法，人类友好</td><td>Docker Compose、K8s 配置、CI/CD</td><td>DevOps、微服务配置</td></tr><tr><td><strong>CSV</strong></td><td>文本数据</td><td>简单表格，Excel 友好</td><td>数据导入导出、批量处理</td><td>后端数据处理、BI 分析</td></tr><tr><td><strong>PDF</strong></td><td>文档</td><td>跨平台、排版固定</td><td>合同、报告、电子书</td><td>后端生成（如 Puppeteer）、前端预览</td></tr><tr><td><strong>Markdown (.md)</strong></td><td>轻量标记</td><td>易写易读，支持 HTML</td><td>技术文档、README、博客</td><td>前端渲染（如 VuePress）</td></tr><tr><td><strong>Excel (.xlsx/.xls)</strong></td><td>表格</td><td>支持公式、样式</td><td>财务、报表、运营数据</td><td>后端读取（如 Apache POI）</td></tr></tbody></table><blockquote><p>🔧 <strong>开发者建议</strong>：API 优先用 JSON；配置用 YAML；文档用 Markdown。</p></blockquote><hr /><h3 id="五-uiux-与设计资源designer-handoff"><a class="markdownIt-Anchor" href="#五-uiux-与设计资源designer-handoff"></a> 🎨 五、UI/UX 与设计资源（Designer Handoff）</h3><table><thead><tr><th>格式</th><th>工具</th><th>说明</th><th>开发者用途</th></tr></thead><tbody><tr><td><strong>Figma (.fig)</strong></td><td>Figma</td><td>实时协作设计工具</td><td>前端提取尺寸、颜色、图标</td></tr><tr><td><strong>Sketch (.sketch)</strong></td><td>Sketch</td><td>macOS 原生设计工具</td><td>导出切图、样式变量</td></tr><tr><td><strong>Adobe XD (.xd)</strong></td><td>Adobe</td><td>UI/UX 设计</td><td>获取设计规范</td></tr><tr><td><strong>PSD</strong></td><td>Photoshop</td><td>图像编辑</td><td>旧项目切图提取</td></tr><tr><td><strong>XCF</strong></td><td>GIMP</td><td>开源图像编辑</td><td>开源项目资源</td></tr><tr><td><strong>Lottie (.json)</strong></td><td>Airbnb</td><td>JSON 格式的动画</td><td>前端/移动端嵌入高性能动画</td></tr><tr><td><strong>Motion Design (After Effects)</strong></td><td>AE</td><td>复杂动画</td><td>导出为视频或 Lottie</td></tr></tbody></table><blockquote><p>🔧 <strong>开发者建议</strong>：与设计师约定使用 Figma + Lottie，提升协作效率。</p></blockquote><hr /><h3 id="六-ai-与机器学习素材格式"><a class="markdownIt-Anchor" href="#六-ai-与机器学习素材格式"></a> 🧠 六、AI 与机器学习素材格式</h3><table><thead><tr><th>格式</th><th>用途</th><th>说明</th><th>开发者用途</th></tr></thead><tbody><tr><td><strong>.h5 / .hdf5</strong></td><td>模型保存</td><td>Keras/TensorFlow 模型</td><td>加载预训练模型</td></tr><tr><td><strong>.pb</strong></td><td>Protocol Buffer</td><td>TensorFlow 冻结图</td><td>模型部署</td></tr><tr><td><strong>.onnx</strong></td><td>Open Neural Network Exchange</td><td>跨框架模型交换</td><td>模型转换与部署</td></tr><tr><td><strong>.pt / .pth</strong></td><td>PyTorch</td><td>PyTorch 模型权重</td><td>深度学习训练与推理</td></tr><tr><td><strong>.tflite</strong></td><td>TensorFlow Lite</td><td>移动端轻量模型</td><td>Android/iOS 集成</td></tr><tr><td><strong>.npy / .npz</strong></td><td>NumPy</td><td>数组数据存储</td><td>数据预处理、特征保存</td></tr><tr><td><strong>.parquet</strong></td><td>列式存储</td><td>大数据高效存储</td><td>数据湖、AI 训练数据集</td></tr></tbody></table><blockquote><p>🔧 <strong>开发者建议</strong>：生产部署优先使用 ONNX 或 TFLite 提升兼容性。</p></blockquote><hr /><h3 id="️-七-开发与部署资源格式"><a class="markdownIt-Anchor" href="#️-七-开发与部署资源格式"></a> 🛠️ 七、开发与部署资源格式</h3><table><thead><tr><th>格式</th><th>说明</th><th>用途</th></tr></thead><tbody><tr><td><strong>Dockerfile</strong></td><td>容器构建脚本</td><td>定义镜像构建流程</td></tr><tr><td><strong>.tar / .tar.gz / .zip</strong></td><td>压缩包</td><td>代码打包、资源分发</td></tr><tr><td><strong>.jar / .war</strong></td><td>Java 归档</td><td>Java 应用打包</td></tr><tr><td><strong>.exe / .msi</strong></td><td>Windows 可执行</td><td>桌面应用分发</td></tr><tr><td><strong>.dmg / .pkg</strong></td><td>macOS 安装包</td><td>Mac 应用发布</td></tr><tr><td><strong>.apk / .aab</strong></td><td>Android 应用</td><td>Android App 发布</td></tr><tr><td><strong>.ipa</strong></td><td>iOS 应用</td><td>iOS App 上架</td></tr><tr><td><strong>.env</strong></td><td>环境变量</td><td>存储配置（数据库密码等）</td></tr><tr><td><strong>.pem / .crt / .key</strong></td><td>证书</td><td>HTTPS、SSL 加密通信</td></tr></tbody></table><hr /><h3 id="八-字体素材fonts"><a class="markdownIt-Anchor" href="#八-字体素材fonts"></a> 🧩 八、字体素材（Fonts）</h3><table><thead><tr><th>格式</th><th>说明</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>WOFF / WOFF2</strong></td><td>Web 字体</td><td>Web 使用，压缩优化</td></tr><tr><td><strong>TTF / OTF</strong></td><td>TrueType / OpenType</td><td>桌面应用、设计软件</td></tr><tr><td><strong>EOT</strong></td><td>Embedded OpenType</td><td>旧版 IE 兼容</td></tr><tr><td><strong>SVG Fonts</strong></td><td>矢量字体</td><td>旧式图标字体</td></tr></tbody></table><blockquote><p>🔧 <strong>建议</strong>：Web 使用 <code>WOFF2</code>，通过 <code>@font-face</code> 引入。</p></blockquote><hr /><h3 id="九-开发者使用建议总结"><a class="markdownIt-Anchor" href="#九-开发者使用建议总结"></a> ✅ 九、开发者使用建议总结</h3><table><thead><tr><th>场景</th><th>推荐格式</th></tr></thead><tbody><tr><td><strong>Web 图片</strong></td><td>WebP + SVG + JPEG/PNG 回退</td></tr><tr><td><strong>Web 音频</strong></td><td>MP3 + OGG</td></tr><tr><td><strong>Web 视频</strong></td><td>MP4 (H.264) + WebM</td></tr><tr><td><strong>API 数据</strong></td><td>JSON</td></tr><tr><td><strong>配置文件</strong></td><td>YAML</td></tr><tr><td><strong>文档协作</strong></td><td>Markdown</td></tr><tr><td><strong>动画效果</strong></td><td>Lottie (.json)</td></tr><tr><td><strong>AI 模型</strong></td><td>ONNX / TFLite / PyTorch (.pt)</td></tr><tr><td><strong>字体</strong></td><td>WOFF2</td></tr><tr><td><strong>设计交接</strong></td><td>Figma / Lottie</td></tr></tbody></table><hr /><h3 id="十-附录跨领域素材使用场景对照表"><a class="markdownIt-Anchor" href="#十-附录跨领域素材使用场景对照表"></a> 📌 十、附录：跨领域素材使用场景对照表</h3><table><thead><tr><th>领域</th><th>常用素材格式</th></tr></thead><tbody><tr><td><strong>前端开发</strong></td><td>WebP, SVG, JSON, CSS, WOFF2, Lottie, Markdown</td></tr><tr><td><strong>后端开发</strong></td><td>JSON, XML, CSV, PDF, YAML, .env, .pem</td></tr><tr><td><strong>移动开发</strong></td><td>PNG, WebP, MP4, AAC, .apk/.ipa, .tflite</td></tr><tr><td><strong>全栈开发</strong></td><td>全部上述格式</td></tr><tr><td><strong>AI/数据科学</strong></td><td>.npy, .parquet, .h5, .onnx, .pt, CSV, JSON</td></tr><tr><td><strong>DevOps</strong></td><td>YAML, .tar.gz, Dockerfile, .pem, .env</td></tr><tr><td><strong>游戏开发</strong></td><td>PNG, WebP, MP3, WAV, GLB (3D), JSON (配置)</td></tr><tr><td><strong>物联网 (IoT)</strong></td><td>JSON, CSV, .bin (固件), .crt (证书)</td></tr></tbody></table><hr /><h3 id="结语"><a class="markdownIt-Anchor" href="#结语"></a> 🎯 结语</h3><p>掌握各类素材格式的特点与适用场景，是现代研发工程师的<strong>基本功</strong>。无论你是前端、后端、全栈还是 AI 工程师，都需要与这些“数字资产”打交道。</p><blockquote><p><strong>核心原则</strong>：</p><ul><li><strong>性能优先</strong>：选择压缩率高、加载快的格式</li><li><strong>兼容性保障</strong>：考虑浏览器/设备支持</li><li><strong>协作高效</strong>：与设计师、数据科学家使用通用格式</li><li><strong>安全合规</strong>：避免使用有版权风险的素材</li></ul></blockquote><hr /><p>📌 <strong>建议收藏</strong>：将本文作为团队内部知识库，统一素材使用规范，提升开发效率与产品质量。</p>]]></content>
    
    
    <summary type="html">开发中常用素材格式完整清单（适用于前后端、全栈及各领域研发工程师）</summary>
    
    
    
    <category term="资源" scheme="http://www.formeasy.cc/categories/%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="Other" scheme="http://www.formeasy.cc/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出 RAG：原理、流程与代码实战</title>
    <link href="http://www.formeasy.cc/2025/09/21/ollama/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20RAG%EF%BC%9A%E5%8E%9F%E7%90%86%E3%80%81%E6%B5%81%E7%A8%8B%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%AE%9E%E6%88%98/"/>
    <id>http://www.formeasy.cc/2025/09/21/ollama/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20RAG%EF%BC%9A%E5%8E%9F%E7%90%86%E3%80%81%E6%B5%81%E7%A8%8B%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%AE%9E%E6%88%98/</id>
    <published>2025-09-21T03:22:29.000Z</published>
    <updated>2025-09-21T03:28:03.559Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-引言为什么需要-rag"><a class="markdownIt-Anchor" href="#1-引言为什么需要-rag"></a> 1. 引言：为什么需要 RAG？</h3><p>在当今人工智能浪潮中，大型语言模型（LLM）如 GPT、LLaMA、ChatGLM 等已经展现了令人惊叹的能力，无论是在对话、创作还是代码生成方面。然而，当我们真正将它们应用于企业级或专业化场景时，会发现它们存在几个致命的“硬伤”：</p><ol><li><strong>知识滞后与静态性</strong>：LLM 的参数化知识来自于其训练时的数据快照。对于训练截止日期之后的事件、新闻、研究进展或公司内部的最新文档，模型一无所知，甚至会“一本正经地胡说八道”（幻觉现象）。</li><li><strong>缺乏领域特异性</strong>：一个通用的 LLM 可能对医学、法律或金融等专业领域的深度知识掌握不足，难以给出高度精准和可靠的答案。</li><li><strong>透明性与可追溯性缺失</strong>：LLM 的回答像一个“黑箱”，我们无法得知其生成答案的具体依据来源，这在严肃的应用场景中是不可接受的。</li></ol><p><strong>那么，如何让强大的 LLM 具备获取最新、特定知识的能力，同时还能提供可靠的依据呢？</strong></p><p>答案就是 <strong>RAG (Retrieval-Augmented Generation，检索增强生成)</strong>。</p><p>RAG 巧妙地将<strong>信息检索（IR）</strong> 技术与<strong>大语言模型（LLM）</strong> 相结合，就像是给一位博学但记忆停留在过去的学者（LLM）配备了一位高效、实时的图书管理员（检索系统）。在回答问题时，图书管理员会迅速从最新的知识库（如公司文档、数据库、网页）中查找相关资料，交给学者。学者基于这些最新的、准确的资料，组织语言，生成最终答案。</p><p>这种方法不仅解决了知识更新问题，还通过提供引用来源极大地增强了答案的可信度和可解释性。</p><p>本文将深入剖析 RAG 的核心原理、主要流程，并通过代码示例带你实战一个简单的 RAG 系统。</p><h3 id="2-rag-是什么"><a class="markdownIt-Anchor" href="#2-rag-是什么"></a> 2. RAG 是什么？</h3><p>RAG 的概念最早由 Meta (Facebook) 的研究团队在 2020 年的论文《Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks》中提出。</p><p>其核心思想可以概括为：<strong>“先检索，再生成”</strong>。</p><p>它不是通过重新训练或微调（Fine-tuning）LLM 来更新其知识，而是在模型<strong>外部</strong>挂载一个知识库。在收到用户查询（Query）时，RAG 系统会首先从这个外部知识库中检索出与问题最相关的信息片段（Context），然后将<strong>原始问题</strong>和<strong>检索到的上下文</strong>一并打包，发送给 LLM，指令 LLM 基于给定的上下文来回答问题。</p><p>这样做的好处是：</p><ul><li><strong>成本低</strong>：无需重新训练昂贵的 LLM。</li><li><strong>更新快</strong>：只需更新外部知识库（如插入新的文档），LLM 立即就能获取到新知识。</li><li><strong>可信度高</strong>：答案来源于提供的上下文，减少幻觉，且可溯源。</li></ul><h3 id="3-rag-的主要流程"><a class="markdownIt-Anchor" href="#3-rag-的主要流程"></a> 3. RAG 的主要流程</h3><p>一个典型的 RAG 流程可以分解为两个核心阶段：<strong>索引（Indexing）</strong> 和<strong>推理（Inference）</strong>。</p><h4 id="31-索引阶段indexing-data-preparation"><a class="markdownIt-Anchor" href="#31-索引阶段indexing-data-preparation"></a> 3.1 索引阶段（Indexing / Data Preparation）</h4><p>索引阶段是“备课”的过程，目的是将原始的非结构化文档（如 PDF、Word、TXT、网页）处理成便于快速检索的结构化格式。这个过程是离线的，通常只需执行一次或在数据更新时重复。</p><p>其主要步骤如下：</p><p><strong>1. 加载（Loading）</strong>：<br />使用文档加载器（Document Loader）从各种数据源读取原始数据，并将其转换成统一的文档对象（Document）。每个文档对象通常包含文本内容及其元数据（如来源、创建日期等）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：使用 LangChain 的 PyPDFLoader 加载 PDF</span></span><br><span class="line"><span class="keyword">from</span> langchain.document_loaders <span class="keyword">import</span> PyPDFLoader</span><br><span class="line"></span><br><span class="line">loader = PyPDFLoader(<span class="string">&quot;path/to/your/document.pdf&quot;</span>)</span><br><span class="line">documents = loader.load()</span><br></pre></td></tr></table></figure><p><strong>2. 分割（Splitting）</strong>：<br />LLM 有上下文长度限制，因此需要将长文档切分成更小的、语义完整的文本块（Chunks）。这一步至关重要， chunk 的大小和质量直接影响检索效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：使用 LangChain 的 RecursiveCharacterTextSplitter 进行文本分割</span></span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> RecursiveCharacterTextSplitter</span><br><span class="line"></span><br><span class="line">text_splitter = RecursiveCharacterTextSplitter(</span><br><span class="line">    chunk_size=<span class="number">500</span>,  <span class="comment"># 每个 chunk 的大小</span></span><br><span class="line">    chunk_overlap=<span class="number">50</span> <span class="comment"># chunk 之间的重叠部分，避免语义断裂</span></span><br><span class="line">)</span><br><span class="line">docs = text_splitter.split_documents(documents)</span><br></pre></td></tr></table></figure><p><strong>3. 嵌入（Embedding）</strong>：<br />使用<strong>嵌入模型（Embedding Model）</strong> 将每个文本块转换成一个高维向量（Vector）。这个向量就像是文本的“数学指纹”，语义相近的文本块其向量在向量空间中的距离也更近。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：使用 OpenAI 的 text-embedding-ada-002 模型生成嵌入向量</span></span><br><span class="line"><span class="keyword">from</span> langchain.embeddings <span class="keyword">import</span> OpenAIEmbeddings</span><br><span class="line"></span><br><span class="line">embeddings_model = OpenAIEmbeddings(model=<span class="string">&quot;text-embedding-ada-002&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>4. 存储（Storing）</strong>：<br />将上一步生成的文本块（原始文本）和其对应的向量<strong>索引（Index）</strong> 起来，存入<strong>向量数据库（Vector Database）</strong> 中。向量数据库专门为高效的海量向量相似性搜索而设计。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：使用 Chroma 向量数据库并存储向量</span></span><br><span class="line"><span class="keyword">from</span> langchain.vectorstores <span class="keyword">import</span> Chroma</span><br><span class="line"></span><br><span class="line">vectorstore = Chroma.from_documents(</span><br><span class="line">    documents=docs,</span><br><span class="line">    embedding=embeddings_model,</span><br><span class="line">    persist_directory=<span class="string">&quot;./chroma_db&quot;</span>  <span class="comment"># 指定持久化目录</span></span><br><span class="line">)</span><br><span class="line">vectorstore.persist() <span class="comment"># 持久化到磁盘</span></span><br></pre></td></tr></table></figure><h4 id="32-推理阶段inference-retrieval-generation"><a class="markdownIt-Anchor" href="#32-推理阶段inference-retrieval-generation"></a> 3.2 推理阶段（Inference / Retrieval &amp; Generation）</h4><p>推理阶段是“答题”的过程，在线处理用户的查询。</p><p><strong>1. 检索（Retrieval）</strong>：</p><ul><li>用户输入一个查询（Query）。</li><li>系统使用与索引阶段<strong>相同的嵌入模型</strong>，将用户的查询也转换为一个查询向量（Query Vector）。</li><li>系统在向量数据库中进行<strong>相似性搜索（Similarity Search）</strong>，找出与查询向量最相似的 K 个文本块（K 是可设定的参数）。这些被检索到的文本块就是与问题最相关的上下文（Context）。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用户查询</span></span><br><span class="line">query = <span class="string">&quot;什么是机器学习？&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将查询转换为向量并进行相似性检索</span></span><br><span class="line">retrieved_docs = vectorstore.similarity_search(query, k=<span class="number">3</span>) <span class="comment"># 检索最相似的 3 个片段</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印检索结果</span></span><br><span class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> retrieved_docs:</span><br><span class="line">    <span class="built_in">print</span>(doc.page_content)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>2. 增强（Augmentation）</strong>：<br />将检索到的多个文本块（Context）和用户的原始查询（Query）按照预设的<strong>提示模板（Prompt Template）</strong> 组合成一个新的、增强后的提示（Augmented Prompt）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.prompts <span class="keyword">import</span> PromptTemplate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个提示模板</span></span><br><span class="line">template = <span class="string">&quot;&quot;&quot;请根据以下上下文信息回答问题。如果你不知道答案，就说不知道，不要编造答案。</span></span><br><span class="line"><span class="string">上下文：</span></span><br><span class="line"><span class="string">&#123;context&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">问题：&#123;question&#125;</span></span><br><span class="line"><span class="string">请给出答案：&quot;&quot;&quot;</span></span><br><span class="line">prompt = PromptTemplate.from_template(template)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组合提示</span></span><br><span class="line">context = <span class="string">&quot;\n\n&quot;</span>.join([doc.page_content <span class="keyword">for</span> doc <span class="keyword">in</span> retrieved_docs])</span><br><span class="line">augmented_prompt = prompt.<span class="built_in">format</span>(context=context, question=query)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(augmented_prompt)</span><br></pre></td></tr></table></figure><p><strong>3. 生成（Generation）</strong>：<br />将组合好的增强提示（Augmented Prompt）发送给 LLM。LLM 会严格基于提供的上下文来生成最终答案，而不是依赖其内部可能过时或不准确的知识。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：使用 OpenAI 的 GPT 模型进行生成</span></span><br><span class="line"><span class="keyword">from</span> langchain.llms <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line">llm = OpenAI(model_name=<span class="string">&quot;gpt-3.5-turbo-instruct&quot;</span>)</span><br><span class="line">answer = llm(augmented_prompt)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最终答案：\n<span class="subst">&#123;answer&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="4-流程图"><a class="markdownIt-Anchor" href="#4-流程图"></a> 4. 流程图</h3><p>下图清晰地展示了 RAG 两个阶段的数据流与核心组件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[RAG 流程]</span><br><span class="line"></span><br><span class="line">    subgraph S1 [第一阶段：索引（离线）]</span><br><span class="line">        direction LR</span><br><span class="line">        A1[原始文档] --&gt;|加载| B1[文档加载器]</span><br><span class="line">        B1 --&gt; C1[长文本]</span><br><span class="line">        C1 --&gt;|分割| D1[文本块 Chunks]</span><br><span class="line">        D1 --&gt;|嵌入| E1[向量 Vector]</span><br><span class="line">        E1 --&gt;|存储| F1[向量数据库]</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    subgraph S2 [第二阶段：推理（在线）]</span><br><span class="line">        direction TB</span><br><span class="line">        G[用户查询] --&gt;|嵌入| H[查询向量]</span><br><span class="line">        H --&gt;|相似性检索| F1</span><br><span class="line">        F1 --&gt; I[Top-K 相关文本块]</span><br><span class="line">        I --&gt; J[提示工程： 组合查询与上下文]</span><br><span class="line">        J --&gt; K[增强的提示]</span><br><span class="line">        K --&gt; L[大语言模型 LLM]</span><br><span class="line">        L --&gt; M[最终答案]</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    S1 --&gt; S2</span><br></pre></td></tr></table></figure><h3 id="5-代码实战构建一个简单的-rag-问答系统"><a class="markdownIt-Anchor" href="#5-代码实战构建一个简单的-rag-问答系统"></a> 5. 代码实战：构建一个简单的 RAG 问答系统</h3><p>下面我们使用 <code>LangChain</code>（一个流行的 LLM 应用开发框架）和 <code>Chroma</code>（轻量级向量数据库）来快速搭建一个 RAG 系统。</p><p><strong>环境准备：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install langchain openai chromadb tiktoken pypdf</span><br></pre></td></tr></table></figure><p><strong>完整代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> langchain.document_loaders <span class="keyword">import</span> PyPDFLoader</span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> RecursiveCharacterTextSplitter</span><br><span class="line"><span class="keyword">from</span> langchain.embeddings <span class="keyword">import</span> OpenAIEmbeddings</span><br><span class="line"><span class="keyword">from</span> langchain.vectorstores <span class="keyword">import</span> Chroma</span><br><span class="line"><span class="keyword">from</span> langchain.llms <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">from</span> langchain.prompts <span class="keyword">import</span> PromptTemplate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 OpenAI API Key</span></span><br><span class="line">os.environ[<span class="string">&quot;OPENAI_API_KEY&quot;</span>] = <span class="string">&quot;你的-OpenAI-API-Key&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 索引阶段（假设我们有一个叫做 &#x27;ml_book.pdf&#x27; 的文档）</span></span><br><span class="line">loader = PyPDFLoader(<span class="string">&quot;ml_book.pdf&quot;</span>)</span><br><span class="line">documents = loader.load()</span><br><span class="line"></span><br><span class="line">text_splitter = RecursiveCharacterTextSplitter(chunk_size=<span class="number">1000</span>, chunk_overlap=<span class="number">100</span>)</span><br><span class="line">docs = text_splitter.split_documents(documents)</span><br><span class="line"></span><br><span class="line">embeddings = OpenAIEmbeddings()</span><br><span class="line">vectorstore = Chroma.from_documents(documents=docs, embedding=embeddings, persist_directory=<span class="string">&quot;./rag_chroma_db&quot;</span>)</span><br><span class="line">vectorstore.persist() <span class="comment"># 持久化，之后只需加载即可，无需重复索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 推理阶段</span></span><br><span class="line">query = <span class="string">&quot;机器学习的定义是什么？&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从磁盘加载已存在的向量数据库</span></span><br><span class="line"><span class="comment"># db = Chroma(persist_directory=&quot;./rag_chroma_db&quot;, embedding_function=embeddings)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检索</span></span><br><span class="line">retriever = vectorstore.as_retriever(search_kwargs=&#123;<span class="string">&quot;k&quot;</span>: <span class="number">3</span>&#125;)</span><br><span class="line">relevant_docs = retriever.get_relevant_documents(query)</span><br><span class="line">context = <span class="string">&quot;\n\n&quot;</span>.join([doc.page_content <span class="keyword">for</span> doc <span class="keyword">in</span> relevant_docs])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建提示</span></span><br><span class="line">prompt_template = <span class="string">&quot;&quot;&quot;你是一个专业的AI助手。请严格仅根据以下提供的上下文信息来回答问题。</span></span><br><span class="line"><span class="string">如果上下文中的信息不足以回答这个问题，请直接回答&quot;根据提供的资料，我无法回答这个问题。&quot;。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">上下文：</span></span><br><span class="line"><span class="string">&#123;context&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">问题：&#123;question&#125;</span></span><br><span class="line"><span class="string">请给出答案：&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">prompt = PromptTemplate(</span><br><span class="line">    template=prompt_template, input_variables=[<span class="string">&quot;context&quot;</span>, <span class="string">&quot;question&quot;</span>]</span><br><span class="line">)</span><br><span class="line">formatted_prompt = prompt.<span class="built_in">format</span>(context=context, question=query)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成</span></span><br><span class="line">llm = OpenAI(temperature=<span class="number">0</span>) <span class="comment"># temperature=0 使输出更确定</span></span><br><span class="line">answer = llm(formatted_prompt)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;用户问题: <span class="subst">&#123;query&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\n检索到并送入LLM的上下文: \n<span class="subst">&#123;context&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\nLLM生成的最终答案: \n<span class="subst">&#123;answer&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="6-总结与展望"><a class="markdownIt-Anchor" href="#6-总结与展望"></a> 6. 总结与展望</h3><p>RAG 通过将其强大的生成能力与外部知识源的可信性、实时性相结合，成功地解决了纯 LLM 应用的诸多痛点。它已成为构建企业级知识库问答、智能客服、代码辅助等应用的首选架构。</p><p><strong>RAG 的优势：</strong></p><ul><li><strong>知识实时性</strong>：轻松接入最新信息。</li><li><strong>成本效益</strong>：避免重复训练大模型。</li><li><strong>可信可控</strong>：答案有据可依，来源可追溯，风险可控。</li><li><strong>灵活性</strong>：可以为不同领域快速构建专属问答系统。</li></ul><p><strong>RAG 的挑战与进阶方向：</strong></p><ul><li><strong>检索质量</strong>：如何提升 chunk 的质量、优化检索器（如使用重排序 Re-Ranking）以找到最相关的上下文。</li><li><strong>上下文长度</strong>：如何应对检索到的上下文过长，超出 LLM 窗口限制的问题（如通过 Map-Reduce 等摘要技巧）。</li><li><strong>多模态 RAG</strong>：未来不仅检索文本，还能检索图片、表格等多模态信息来生成答案。</li></ul><p>希望本文能帮助你全面理解 RAG，并为你在 AI 应用开发的道路上打开一扇新的大门。</p>]]></content>
    
    
    <summary type="html">深入浅出 RAG：原理、流程与代码实战</summary>
    
    
    
    <category term="智能" scheme="http://www.formeasy.cc/categories/%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="ollama" scheme="http://www.formeasy.cc/tags/ollama/"/>
    
  </entry>
  
  <entry>
    <title>使用WinSW把nginx做成windows服务</title>
    <link href="http://www.formeasy.cc/2025/09/17/Python/%E4%BD%BF%E7%94%A8WinSW%E6%8A%8Anginx%E5%81%9A%E6%88%90windows%E6%9C%8D%E5%8A%A1/"/>
    <id>http://www.formeasy.cc/2025/09/17/Python/%E4%BD%BF%E7%94%A8WinSW%E6%8A%8Anginx%E5%81%9A%E6%88%90windows%E6%9C%8D%E5%8A%A1/</id>
    <published>2025-09-17T05:58:13.000Z</published>
    <updated>2025-09-17T06:04:25.749Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-下载nginx"><a class="markdownIt-Anchor" href="#1-下载nginx"></a> 1. 下载nginx</h3><p><a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p><h3 id="2-下载win-sw"><a class="markdownIt-Anchor" href="#2-下载win-sw"></a> 2. 下载win sw</h3><p><a href="https://github.com/winsw/winsw/releases/tag/v2.11.0">https://github.com/winsw/winsw/releases/tag/v2.11.0</a>  下载.NET4.0版本，WinSW.NET4.exe。</p><h3 id="3-解压nignx压缩包并重命名文件夹为nginx"><a class="markdownIt-Anchor" href="#3-解压nignx压缩包并重命名文件夹为nginx"></a> 3. 解压nignx压缩包，并重命名文件夹为“nginx”。</h3><p>本例的nginx.exe完整路径为：D:\Soft\nginx\nginx.exe</p><h3 id="4-将下载的winswnet4exe-复制进-dsoftnginx"><a class="markdownIt-Anchor" href="#4-将下载的winswnet4exe-复制进-dsoftnginx"></a> 4. 将下载的WinSW.NET4.exe 复制进 D:\Soft\nginx\</h3><h3 id="5-在dsoftnginx新建一个名为winswnet4xml的xml文件内容如下"><a class="markdownIt-Anchor" href="#5-在dsoftnginx新建一个名为winswnet4xml的xml文件内容如下"></a> 5. 在D:\Soft\nginx\新建一个名为“WinSW.NET4.xml”的XML文件，内容如下：</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;service&gt; </span><br><span class="line"> &lt;!--服务名称--&gt;</span><br><span class="line">&lt;id&gt;nginxsvr&lt;/id&gt;</span><br><span class="line">  &lt;!--显示名称--&gt;</span><br><span class="line">&lt;name&gt;nginx-svr&lt;/name&gt;</span><br><span class="line"> &lt;!--描述--&gt;</span><br><span class="line">&lt;description&gt;自启动的 nginx&lt;/description&gt; </span><br><span class="line"> &lt;!--windows服务安装日志--&gt;</span><br><span class="line">&lt;logpath&gt;D:\Soft\nginx\log2&lt;/logpath&gt; </span><br><span class="line">&lt;logmode&gt;roll&lt;/logmode&gt; </span><br><span class="line">&lt;depend&gt;&lt;/depend&gt; </span><br><span class="line"> &lt;executable&gt;D:\Soft\nginx\nginx.exe&lt;/executable&gt; </span><br><span class="line"> &lt;stopexecutable&gt;D:\Soft\nginx\nginx.exe -s stop&lt;/stopexecutable&gt; </span><br><span class="line">&lt;/service&gt;</span><br></pre></td></tr></table></figure><p>XML的路径根据实际情况修改。</p><h3 id="6-用命令安装并启动"><a class="markdownIt-Anchor" href="#6-用命令安装并启动"></a> 6. 用命令安装并启动：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\\Soft\\nginx\\WinSW.NET4.exe install</span><br><span class="line"></span><br><span class="line">NET START nginxsvr</span><br></pre></td></tr></table></figure><h3 id="7-如果需要卸载"><a class="markdownIt-Anchor" href="#7-如果需要卸载"></a> 7. 如果需要卸载 ：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NET STOP nginxsvr</span><br><span class="line"></span><br><span class="line">D:\\Soft\\nginx\\WinSW.NET4.exe uninstall</span><br></pre></td></tr></table></figure><p>可以保存为批处理，安装BAT：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;安装&quot;</span><br><span class="line">D:\Soft\nginx\WinSW.NET4.exe install</span><br><span class="line">echo &quot;启动名为nginxsvr的windows服务&quot;</span><br><span class="line">NET START nginxsvr</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>卸载BAT：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;一定要先停止后卸载，否则电脑需要重启&quot;</span><br><span class="line">echo &quot;停止名为nginxsvr的windows服务&quot;</span><br><span class="line">NET STOP nginxsvr</span><br><span class="line">D:\Soft\nginx\WinSW.NET4.exe uninstall</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>可运行 services.msc 来查看服务状态。</p>]]></content>
    
    
    <summary type="html">使用WinSW把nginx做成windows服务</summary>
    
    
    
    <category term="技术" scheme="http://www.formeasy.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Python" scheme="http://www.formeasy.cc/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>使用NSSM将.exe程序安装成windows服务</title>
    <link href="http://www.formeasy.cc/2025/09/17/Python/%E4%BD%BF%E7%94%A8NSSM%E5%B0%86.exe%E7%A8%8B%E5%BA%8F%E5%AE%89%E8%A3%85%E6%88%90windows%E6%9C%8D%E5%8A%A1/"/>
    <id>http://www.formeasy.cc/2025/09/17/Python/%E4%BD%BF%E7%94%A8NSSM%E5%B0%86.exe%E7%A8%8B%E5%BA%8F%E5%AE%89%E8%A3%85%E6%88%90windows%E6%9C%8D%E5%8A%A1/</id>
    <published>2025-09-17T05:52:51.000Z</published>
    <updated>2025-09-17T05:57:47.134Z</updated>
    
    <content type="html"><![CDATA[<p>1、下载NSSM：<a href="https://nssm.cc/usage">NSSM - the Non-Sucking Service Manager</a></p><p><img src="2447777-20240506104400143-1336746940.png" alt="" /></p><p>2、方式一：cmd方式安装服务</p><p>将下载的压缩包解压，找到nssm.exe，以管理员身份打开cmd，在cmd中定位到nssm.exe所在路径，执行nssm install 服务名：</p><p><img src="2447777-20240506105204004-1853535886.png" alt="" /></p><p>按下enter键会自动弹出nssm的窗体：</p><p><img src="2447777-20240506105550887-1981089896.png" alt="" /></p><p>在Application-Application Path中选择你的可执行文件.exe，确认后会自动填入Startup directory，Service name处可以修改服务名</p><p>上方选项卡的Details中可以填入显示名称、描述、启动方式，一般默认是自动启动</p><p>填写完成后点击右下角的Install service即可。</p><p>3、方式二：批处理文件方式安装服务</p><p>将nssm.exe复制到要打包的程序文件夹中，再在同目录下新建三个txt文本，分别对应安装服务、关闭服务、卸载服务，将后缀名改为bat</p><ul><li>右键安装服务.bat-编辑：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">REM 创建服务</span><br><span class="line">echo off</span><br><span class="line">echo 即将开始采用nssm安装应用程序为windows服务，请确认以系统管理员身份运行</span><br><span class="line">set servicename=自定义服务名称</span><br><span class="line">REM %~dp0 为BAT脚本取当前系统目录命令,API_HOST.EXE为需要包装为服务的应用程序</span><br><span class="line">set app_path=&quot;%~dp0程序.exe&quot;</span><br><span class="line">set nssm_path=&quot;%~dp0nssm.exe&quot;</span><br><span class="line">REM 将NSSM复制至系统盘目录，或者 添加 windows 环境变量亦可达到目的</span><br><span class="line">set targetFolder=&quot;C:\windows\System32\nssm.exe&quot;</span><br><span class="line">REM 检查NSSM.exe文件是否存在</span><br><span class="line">echo 检查当前目录nssm.exe文件是否存在</span><br><span class="line">if not exist %nssm_path% (</span><br><span class="line">    echo %nssm_path% 不存在,请确认</span><br><span class="line">    pause </span><br><span class="line">    goto exitCode</span><br><span class="line"> )</span><br><span class="line">) </span><br><span class="line">echo %nssm_path% 存在，即将检查文件并复制</span><br><span class="line">REM 复制nssm</span><br><span class="line">if not exist %targetFolder% (</span><br><span class="line">    copy /y %nssm_path% %targetFolder%</span><br><span class="line">    echo 复制nssm至windows系统目录完成</span><br><span class="line">)</span><br><span class="line">echo 即将创建服务 %servicename%</span><br><span class="line">echo  ****************************************</span><br><span class="line"></span><br><span class="line">REM 判断service 是否存在，若存在，先停止，至删除</span><br><span class="line">echo 检查服务是否存在,存在则停止服务后删除，再安装</span><br><span class="line">sc query|find /i &quot;%servicename%&quot; &gt;nul 2&gt;nul</span><br><span class="line">if not errorlevel 1 (</span><br><span class="line">    echo 服务已存在，停止运行服务</span><br><span class="line">    echo stop %servicename%</span><br><span class="line">    REM NSSM停止服务命令：nssm stop &lt;ServiceName&gt;</span><br><span class="line">    nssm stop %servicename%    </span><br><span class="line">    echo 开始移除服务 %servicename%</span><br><span class="line">    echo remove service %servicename%</span><br><span class="line">    REM NSSM删除服务命令：nssm remove &lt;ServiceName&gt; confirm</span><br><span class="line">    REM 移除命令最后的 confirm 即表示无限弹窗确认,直接移除。</span><br><span class="line">    nssm remove %servicename% confirm</span><br><span class="line">    echo 移除服务完成</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">echo *********************************</span><br><span class="line">echo 开始创建服务 %servicename%</span><br><span class="line">REM NSSM命令：nssm install &lt;服务名&gt; &lt;服务需要执行的程序&gt;</span><br><span class="line">nssm install %servicename% %app_path%</span><br><span class="line">echo 开始设置服务信息</span><br><span class="line">echo set service property</span><br><span class="line">echo 设置服务显示名称</span><br><span class="line">REM nssm set &lt;ServiceName&gt; DisplayName &lt;ServiceName&gt;</span><br><span class="line">nssm set %servicename% DisplayName %servicename%</span><br><span class="line">echo 设置服务描述</span><br><span class="line">REM nssm set &lt;ServiceName&gt; Description &lt;ServiceName&gt;</span><br><span class="line">nssm set %servicename% Description xxx控制系统 </span><br><span class="line">echo 设置服务启动方式为：自动</span><br><span class="line">nssm set %servicename% Start SERVICE_AUTO_START</span><br><span class="line">echo *********************************</span><br><span class="line">echo 启动服务 %servicename%</span><br><span class="line">echo start service %servicename%</span><br><span class="line">nssm start %servicename%</span><br><span class="line">echo 服务创建并启动完成</span><br><span class="line"></span><br><span class="line">:exitCode</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>set servicename=自定义服务名称，这里的自定义服务名称改为你想要的名称<br />set app_path=“%~dp0程序.exe”，这里的程序.exe改为你的可执行文件名<br />%~dp0代表的是当前目录</p><ul><li>右键关闭服务.bat-编辑：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@echo off </span><br><span class="line">@title 关闭服务</span><br><span class="line">echo= 开始关闭服务！  </span><br><span class="line">@echo off  </span><br><span class="line">@sc stop 自定义服务名称</span><br><span class="line">@echo off  </span><br><span class="line">echo= 关闭服务结束！  </span><br><span class="line">@pause</span><br></pre></td></tr></table></figure><ul><li>右键卸载服务.bat-编辑：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@echo off </span><br><span class="line">@title 删除服务</span><br><span class="line">echo= 开始删除服务！  </span><br><span class="line">@echo off  </span><br><span class="line">nssm stop 自定义服务名称</span><br><span class="line">nssm remove 自定义服务名称 confirm    </span><br><span class="line">@echo off  </span><br><span class="line">echo= 删除完成！  </span><br><span class="line">@pause</span><br></pre></td></tr></table></figure><ul><li>上述的bat文件都需要用管理员身份运行，可以为bat文件创建快捷方式，在快捷方式上右键属性-快捷方式-高级-勾选用管理员身份运行</li></ul><p><img src="2447777-20240506103959941-479814109.png" alt="" /></p><ul><li>双击快捷方式执行即可。</li></ul><p>4、补充</p><p>① 有园友说也可以用WinSW，找了下资料，还没试过，仅供参考：</p><p>② 如果有时候显示服务安装成功，但在服务管理器又找不到，可以看看是不是被杀毒软件拦截了</p>]]></content>
    
    
    <summary type="html">使用NSSM将.exe程序安装成windows服务</summary>
    
    
    
    <category term="技术" scheme="http://www.formeasy.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Python" scheme="http://www.formeasy.cc/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python打包flask服务成exe文件并快速注册成windows服务</title>
    <link href="http://www.formeasy.cc/2025/09/17/Python/python%E6%89%93%E5%8C%85flask%E6%9C%8D%E5%8A%A1%E6%88%90exe%E6%96%87%E4%BB%B6%E5%B9%B6%E5%BF%AB%E9%80%9F%E6%B3%A8%E5%86%8C%E6%88%90windows%E6%9C%8D%E5%8A%A1/"/>
    <id>http://www.formeasy.cc/2025/09/17/Python/python%E6%89%93%E5%8C%85flask%E6%9C%8D%E5%8A%A1%E6%88%90exe%E6%96%87%E4%BB%B6%E5%B9%B6%E5%BF%AB%E9%80%9F%E6%B3%A8%E5%86%8C%E6%88%90windows%E6%9C%8D%E5%8A%A1/</id>
    <published>2025-09-17T05:46:01.000Z</published>
    <updated>2025-09-17T05:52:22.677Z</updated>
    
    <content type="html"><![CDATA[<p>由于相关业务问题，需要在windows环境中开启多个flask服务，为了方便管理各个flask服务，需要进行注册成windows服务，在windows服务中进行自动开启状态。下面将分享在实际过程中的方法，避免小伙伴们遇到同样的问题。</p><h4 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 1.安装flask、pyinstaller</span><br><span class="line"># 2.下载nssm部署windows服务执行文件</span><br><span class="line"># 3.准备flask开发的案例代码</span><br><span class="line"># 4.使用pyinstaller将flask服务进行打包</span><br><span class="line"># 5.解压nssm文件，指定打包文件和服务名称</span><br><span class="line"># 6.测试最终结果是否正确</span><br></pre></td></tr></table></figure><h3 id="1准备工作"><a class="markdownIt-Anchor" href="#1准备工作"></a> 1.准备工作</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python环境：3.6.8</span><br><span class="line">windows环境：windows10</span><br></pre></td></tr></table></figure><p>安装相关包如下，准备打包python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.安装flask框架</span></span><br><span class="line">pip install flask</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 2.安装pyinstaller包</span></span><br><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure><p>下载nssm.zip文件，准备在windows上安装exe文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 下载地址</span><br><span class="line">http://www.nssm.cc/release/nssm-2.24.zip</span><br></pre></td></tr></table></figure><h3 id="2开始实际操作"><a class="markdownIt-Anchor" href="#2开始实际操作"></a> 2.开始实际操作</h3><p>flask代码开发，以下是个demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request,jsonify</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查询模型训练状态</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/modelstatus&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train_status</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;false&#x27;</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;hello&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;不支持该请求&#x27;</span>&#125;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">9004</span>)</span><br></pre></td></tr></table></figure><h3 id="3开始打包"><a class="markdownIt-Anchor" href="#3开始打包"></a> 3.开始打包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 说明：(我在执行 pyinstaller -w admin.py时,打包过程中控制台正常没报错，打包完成以后进行dist文件，找到admin.exe双击启动时，提示创库显示执行失败。因为想程序占着控制台，所以执行的参数为 -w)</span></span><br><span class="line"><span class="comment"># 最终执行flask服务打包</span></span><br><span class="line">pyinstaller -F admin.py</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 一下就是程序打包以后文件目录</span></span><br></pre></td></tr></table></figure><p><img src="2b6f6336f903a8e1caad04fd7ead53a0.png" alt="" /></p><h3 id="4开始进行注册windows服务"><a class="markdownIt-Anchor" href="#4开始进行注册windows服务"></a> 4.开始进行注册windows服务</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.在cmd中进入nssm中的目录，然后进行命令</span><br><span class="line">2. nssm install aiweb(服务名)</span><br><span class="line">3. 选择Application path按钮将pyinstaller打包后的exe文件选择过来。</span><br><span class="line">4.点击installer service按钮，则提示成功，此时去windows服务中查看服务即可。</span><br></pre></td></tr></table></figure><p><img src="df25be88d6135abc2c6453db5c137749.png" alt="" /></p><p><img src="fa73497bd830729f519915d78374742a.png" alt="" /></p><p><img src="5f42a37870613fa32e2d783b6746cb94.png" alt="" /></p><h3 id="5测试windows服务"><a class="markdownIt-Anchor" href="#5测试windows服务"></a> 5.测试windows服务</h3><p>在服务中点击启动按钮，在浏览器中输入ip地址和端口号，如图：</p><p><img src="69ad754b7ea7fa035dbba64b3e2621d3.png" alt="" /></p><p><img src="b8aa7972f31ababda44f878616cf3694.png" alt="" /></p><p>最后大功告成，此方法可以将flask服务、爬虫服务都可以注册成windows服务，开机自启动。</p>]]></content>
    
    
    <summary type="html">python打包flask服务成exe文件并快速注册成windows服务</summary>
    
    
    
    <category term="技术" scheme="http://www.formeasy.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Python" scheme="http://www.formeasy.cc/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Windows上将Eex部署成为服务WinSW和NSSM</title>
    <link href="http://www.formeasy.cc/2025/09/14/Python/Windows%E4%B8%8A%E5%B0%86Eex%E9%83%A8%E7%BD%B2%E6%88%90%E4%B8%BA%E6%9C%8D%E5%8A%A1WinSW%E5%92%8CNSSM/"/>
    <id>http://www.formeasy.cc/2025/09/14/Python/Windows%E4%B8%8A%E5%B0%86Eex%E9%83%A8%E7%BD%B2%E6%88%90%E4%B8%BA%E6%9C%8D%E5%8A%A1WinSW%E5%92%8CNSSM/</id>
    <published>2025-09-14T14:14:35.000Z</published>
    <updated>2025-09-14T14:21:33.768Z</updated>
    
    <content type="html"><![CDATA[<p>使用Windows，经常需要将带界面的Windows 应用、exe可执行程序、bat批处理文件变为Windows服务，以便于后台运行，支持开启重启、进程保护等功能。<br />有众多的工具支持将exe文件封装为Windows服务，常用的工具包括：<br />Sc.exe/NSSM/WinSW/Shawl/AlwaysUp/FireDaemon</p><h3 id="scexe"><a class="markdownIt-Anchor" href="#scexe"></a> Sc.exe</h3><p><a href="https://learn.microsoft.com/zh-cn/windows/win32/services/controlling-a-service-using-sc">https://learn.microsoft.com/zh-cn/windows/win32/services/controlling-a-service-using-sc</a></p><p>Windows系统内置命令，需要熟悉命令行操作，对新手不友好</p><p>以前还有SRVANY.exe，微软官方在 Windows 10/11 上已经不再提供支持，因此不推荐。</p><h3 id="nssm"><a class="markdownIt-Anchor" href="#nssm"></a> NSSM</h3><p><a href="https://nssm.cc/builds">https://nssm.cc/builds</a></p><p><a href="https://github.com/kirillkovalenko/nssm">https://github.com/kirillkovalenko/nssm</a></p><p>开源，功能强大，但从2017年以后未再更新维护</p><h3 id="winsw"><a class="markdownIt-Anchor" href="#winsw"></a> Winsw</h3><p><a href="https://github.com/winsw/winsw">https://github.com/winsw/winsw</a></p><p>开源，功能强大但配置较为复杂，2023年后未再更新维护</p><h3 id="shawl"><a class="markdownIt-Anchor" href="#shawl"></a> Shawl</h3><p><a href="https://github.com/mtkennerly/shawl">https://github.com/mtkennerly/shawl</a></p><p>开源，功能相对于NSSM、Winsw弱一些，目前还在更新维护</p><h3 id="alwaysup"><a class="markdownIt-Anchor" href="#alwaysup"></a> AlwaysUp</h3><p><a href="https://www.coretechnologies.com/products/AlwaysUp/">https://www.coretechnologies.com/products/AlwaysUp/</a></p><p>收费商业软件</p><h3 id="firedaemon"><a class="markdownIt-Anchor" href="#firedaemon"></a> FireDaemon</h3><p><a href="https://www.firedaemon.com/">https://www.firedaemon.com/</a></p><p>收费商业软件</p><p>可以看出，要将exe程序变为Windows服务，免费方案包括Sc.exe，NSSM，Winsw，Shawl，但各有优劣。</p><p>下面介绍其中的两款WinSW和NSSM，在Windows上使用这两款式软件可以快将EXE部署成为服务（为什么不直接写服务，我个人喜欢EXE调试测试方便OK之后 再部署成为服务这样方便）</p><p><strong>NSSM（C++）</strong></p><p>官方 <a href="http://www.nssm.cc/">http://www.nssm.cc/</a> 下载只有一个绿色EXE 使用方法命令行下 NSSM.exe install (对应移除使用 remove</p><p><img src="624386-20250122192200962-1765742953.png" alt="" /></p><p>在这里就可以选择你想要的EXE 且起对应的服务的名字（移除的时候需要这个名字）</p><p>如果是移除 使用 NSSM.exe Remove 弹出如下界面，填写名字移除</p><p><img src="624386-20250122191214948-2065923795.png" alt="" /></p><p><strong>WinSW (C#)</strong></p><p><strong><a href="https://github.com/winsw/winsw/releases">https://github.com/winsw/winsw/releases</a> github上就有</strong></p><p><strong>使用windsw 需要有对应的配置文件，如下面的xml文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 服务ID名称（唯一） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>Myserver<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 服务显示名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Myserver<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 服务的描述信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Minio文件存储服务器<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 可设置环境变量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">env</span> <span class="attr">name</span>=<span class="string">&quot;HOME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%BASE%&quot;</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 要执行的可执行文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executable</span>&gt;</span>%BASE%\minio.exe<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 可执行文件传递的参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>server &quot;%BASE%\data&quot;<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;logmode&gt;rotate&lt;/logmode&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logpath</span>&gt;</span>%BASE%\logs<span class="tag">&lt;/<span class="name">logpath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log</span> <span class="attr">mode</span>=<span class="string">&quot;roll-by-size-time&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">sizeThreshold</span>&gt;</span>10240<span class="tag">&lt;/<span class="name">sizeThreshold</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>yyyyMMdd<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">autoRollAtTime</span>&gt;</span>00:00:00<span class="tag">&lt;/<span class="name">autoRollAtTime</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">zipOlderThanNumDays</span>&gt;</span>5<span class="tag">&lt;/<span class="name">zipOlderThanNumDays</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">zipDateFormat</span>&gt;</span>yyyyMMdd<span class="tag">&lt;/<span class="name">zipDateFormat</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">log</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure><p>管理员身份运行CMD并定位到WinSW的安装目录，执行安装命令WinSWr install，此时我们的Windows服务列表中就多了一个叫Minio-Server的服务了</p><p>WinSW的各个命令</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>install</td><td>安装服务</td></tr><tr><td>uninstall</td><td>卸载服务</td></tr><tr><td>start</td><td>启动服务</td></tr><tr><td>stop</td><td>停止服务</td></tr><tr><td>restart</td><td>重启服务</td></tr><tr><td>status</td><td>检查服务状态</td></tr><tr><td>refresh</td><td>刷新服务属性而不是重新安装</td></tr><tr><td>customize</td><td>--</td></tr></tbody></table><p><img src="624386-20250122192046755-1088983727.jpg" alt="" /></p><p>配合这两图片应该基本使用方式 记录完了</p><p>从上面来看我个人喜欢有界面设置的NSSM</p>]]></content>
    
    
    <summary type="html">Windows上将Eex部署成为服务WinSW和NSSM</summary>
    
    
    
    <category term="技术" scheme="http://www.formeasy.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Python" scheme="http://www.formeasy.cc/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>用electron将vue项目打包成.exe文件【保姆级教程】</title>
    <link href="http://www.formeasy.cc/2025/09/13/VUE/%E7%94%A8electron%E5%B0%86vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90.exe%E6%96%87%E4%BB%B6%E3%80%90%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E3%80%91/"/>
    <id>http://www.formeasy.cc/2025/09/13/VUE/%E7%94%A8electron%E5%B0%86vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90.exe%E6%96%87%E4%BB%B6%E3%80%90%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E3%80%91/</id>
    <published>2025-09-13T13:45:49.000Z</published>
    <updated>2025-09-13T14:01:21.823Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>说明： vue2项目，使用的vue-element-admin框架，用electron打包成.exe文件。</p></blockquote><p><strong>1、新建一个文件夹，然后右键打开终端或者cd到这个目录。执行下面的命令（最好确认一下github网站是否登陆了）。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//将electron官网中的quick-start拉取到本地</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/electron/electron-quick-start</span><br></pre></td></tr></table></figure><p><img src="bbf8565071e2cf68eaa25eed66323d9e.png" alt="" /><br /><em>安装成功的文件如下显示：</em><br /><img src="0fe16f69a6abd191fce197c40114fdf4.png" alt="" /></p><p><strong>2.安装好后，用vscode（其他类似工具）打开，新建终端，前后输入下面的命令。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//下载项目需要的依赖</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">//安装打包.exe所需要的依赖electron-packager、electron</span><br><span class="line">npm i electron-packager --save-dev</span><br><span class="line">npm i electron --save-dev </span><br><span class="line"></span><br><span class="line">//运行看看是否可以成功</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure><p><em>如果运行成功，会弹出一个页面，如下图：</em></p><p><img src="a89af1046501287e1986533267746fc4.png" alt="" /><br /><strong>3、删除electron-quick-start文件中的index.html，把自己的项目dist文件放进去。</strong></p><p><img src="d98cce14b827a8b749368ac930c36d28.png" alt="" /></p><p><strong>4、打开electron-quick-start文件里的main.js文件，下面是mian.js完整代码。</strong><br /><em>重点是： mainWindow.loadFile(“<strong>./dist/index.html</strong>”) 的修改</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Modules to control application life and create native browser window</span></span><br><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;node:path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Create the browser window.</span></span><br><span class="line">  <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">1024</span>, <span class="comment">//自己需要的宽高</span></span><br><span class="line">    <span class="attr">height</span>: <span class="number">960</span>,</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">      <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;preload.js&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// and load the index.html of the app.</span></span><br><span class="line">  mainWindow.<span class="title function_">loadFile</span>(<span class="string">&quot;./dist/index.html&quot;</span>);</span><br><span class="line">  <span class="comment">// Open the DevTools.</span></span><br><span class="line">  mainWindow.<span class="property">webContents</span>.<span class="title function_">openDevTools</span>(); <span class="comment">// 打开调试工具</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This method will be called when Electron has finished</span></span><br><span class="line"><span class="comment">// initialization and is ready to create browser windows.</span></span><br><span class="line"><span class="comment">// Some APIs can only be used after this event occurs.</span></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">createWindow</span>();</span><br><span class="line"></span><br><span class="line">  app.<span class="title function_">on</span>(<span class="string">&quot;activate&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// On macOS it&#x27;s common to re-create a window in the app when the</span></span><br><span class="line">    <span class="comment">// dock icon is clicked and there are no other windows open.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">BrowserWindow</span>.<span class="title function_">getAllWindows</span>().<span class="property">length</span> === <span class="number">0</span>) <span class="title function_">createWindow</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quit when all windows are closed, except on macOS. There, it&#x27;s common</span></span><br><span class="line"><span class="comment">// for applications and their menu bar to stay active until the user quits</span></span><br><span class="line"><span class="comment">// explicitly with Cmd + Q.</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&quot;window-all-closed&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&quot;darwin&quot;</span>) app.<span class="title function_">quit</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// In this file you can include the rest of your app&#x27;s specific main process</span></span><br><span class="line"><span class="comment">// code. You can also put them in separate files and require them here.</span></span><br></pre></td></tr></table></figure><p><strong>5、打开 package.json文件，添加上有关packager的代码。</strong><br />(PS: 如果不需要自动匹配dist文件夹下的应用图标使用该内容<br />“electron-packager ./ Vite App --platform=win32 --arch=x64 --overwrite”)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="string">&quot;electron .&quot;</span>,</span><br><span class="line">  <span class="string">&quot;packager&quot;</span>: <span class="string">&quot;electron-packager ./ 你想用的exe名字 --platform=win32 --arch=x64 --icon=./dist/favicon.ico --overwrite&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="b661f7f30b917c1101987f021020b90c.png" alt="" /></p><p><strong>6、终于到了最后一步：npm run packager进行打包！打包成功后如下图</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run packager</span><br></pre></td></tr></table></figure><p><img src="219cc791e979e805b0d2cc3042fa06df.png" alt="" /></p><p><strong>7、其它</strong></p><p>如果想electron打包后自带服务，将electron-quick-start文件里的main.js文件修改如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> expressApp = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">expressApp.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = expressApp.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server is running on http://localhost:3000&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&quot;ready&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line"><span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line"><span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line"><span class="attr">webPreferences</span>: &#123;</span><br><span class="line"><span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">contextIsolation</span>: <span class="literal">false</span>   <span class="comment">// 如果你使用的是Electron 12及以上版本，推荐启用contextIsolation并使用preload脚本</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">mainWindow.<span class="title function_">loadURL</span>(<span class="string">&quot;http://localhost:3000&quot;</span>);</span><br><span class="line"></span><br><span class="line">mainWindow.<span class="title function_">on</span>(<span class="string">&quot;closed&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">server.<span class="title function_">close</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理应用退出逻辑</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&quot;window-all-closed&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 在macOS上，应用通常在用户明确退出前保持活动状态</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&quot;darwin&quot;</span>) &#123;</span><br><span class="line">app.<span class="title function_">quit</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">用electron将vue项目打包成.exe文件【保姆级教程】</summary>
    
    
    
    <category term="技术" scheme="http://www.formeasy.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="VUE" scheme="http://www.formeasy.cc/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>Electron系列 -- vue项目打包成.exe文件(通过官方demo的方式)</title>
    <link href="http://www.formeasy.cc/2025/09/12/VUE/Electron%E7%B3%BB%E5%88%97%20--%20vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90.exe%E6%96%87%E4%BB%B6(%E9%80%9A%E8%BF%87%E5%AE%98%E6%96%B9demo%E7%9A%84%E6%96%B9%E5%BC%8F)/"/>
    <id>http://www.formeasy.cc/2025/09/12/VUE/Electron%E7%B3%BB%E5%88%97%20--%20vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90.exe%E6%96%87%E4%BB%B6(%E9%80%9A%E8%BF%87%E5%AE%98%E6%96%B9demo%E7%9A%84%E6%96%B9%E5%BC%8F)/</id>
    <published>2025-09-12T02:55:34.000Z</published>
    <updated>2025-09-12T03:02:12.298Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-拉取官方demo-electron-quick-start"><a class="markdownIt-Anchor" href="#一-拉取官方demo-electron-quick-start"></a> 一. 拉取官方demo (electron-quick-start)</h3><p>将electron官网中的 electron-quick-start 拉取到本地</p><p><a href="https://edu.csdn.net/cloud/pm_summit?utm_source=blogglc">git</a> clone <a href="https://github.com/electron/electron-quick-start">https://github.com/electron/electron-quick-start</a></p><p><img src="1016812-20241126145749293-662678124.png" alt="" /></p><p>安装成功的目录如下</p><p><img src="1016812-20241126145806632-1100162865.png" alt="" /></p><p>2.安装好后，用vscode（Sublime Tex 等工具）打开，新建终端，输入下面的命令。</p><p>初始化依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>简写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure><p>打包所需的依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i electron --save-dev  </span><br><span class="line">npm i electron-packager --save-dev  </span><br><span class="line">npm install -g @electron/packager</span><br></pre></td></tr></table></figure><p><img src="1016812-20241126145904161-131154087.png" alt="" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start 启动项目</span><br></pre></td></tr></table></figure><p>启动成功显示 Hello World!</p><p><img src="1016812-20241126145942140-1512890203.png" alt="" /></p><h3 id="二-项目打包"><a class="markdownIt-Anchor" href="#二-项目打包"></a> 二. 项目打包</h3><p>通过将vue项目打包, 会生成一个dist文件</p><p><img src="1016812-20241126150001495-729014494.png" alt="" /></p><h3 id="三-修改electron-quick-start-文件"><a class="markdownIt-Anchor" href="#三-修改electron-quick-start-文件"></a> 三. 修改electron-quick-start 文件</h3><p>删除 electron-quick-start 文件中的index.html，把vue项目打包的dist文件放进去。<br />打开electron-quick-start 文件里的main.js文件，附上mian.js完整代码<br />重点是： mainWindow.loadFile(“./dist/index.html”) 的修改</p><p><img src="1016812-20241126150026718-648644936.png" alt="" /></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Modules to control application life and create native browser window</span></span><br><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;node:path&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span> () &#123;</span><br><span class="line">  <span class="comment">// Create the browser window.</span></span><br><span class="line">  <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">1920</span>,    <span class="comment">//窗口宽度</span></span><br><span class="line">    <span class="attr">height</span>: <span class="number">1080</span>,    <span class="comment">//窗口高度</span></span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">      <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;preload.js&#x27;</span>) </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// and load the index.html of the app.</span></span><br><span class="line">  mainWindow.<span class="title function_">loadFile</span>(<span class="string">&#x27;index.html&#x27;</span>) <span class="comment">//项目入口文件</span></span><br><span class="line">  mainWindow.<span class="title function_">setMenu</span>(<span class="literal">null</span>); <span class="comment">//    隐藏顶部菜单</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Open the DevTools.</span></span><br><span class="line">  <span class="comment">// mainWindow.webContents.openDevTools() //打开调试工具</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// This method will be called when Electron has finished</span></span><br><span class="line"><span class="comment">// initialization and is ready to create browser windows.</span></span><br><span class="line"><span class="comment">// Some APIs can only be used after this event occurs.</span></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">createWindow</span>()</span><br><span class="line"> </span><br><span class="line">  app.<span class="title function_">on</span>(<span class="string">&#x27;activate&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// On macOS it&#x27;s common to re-create a window in the app when the</span></span><br><span class="line">    <span class="comment">// dock icon is clicked and there are no other windows open.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">BrowserWindow</span>.<span class="title function_">getAllWindows</span>().<span class="property">length</span> === <span class="number">0</span>) <span class="title function_">createWindow</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// Quit when all windows are closed, except on macOS. There, it&#x27;s common</span></span><br><span class="line"><span class="comment">// for applications and their menu bar to stay active until the user quits</span></span><br><span class="line"><span class="comment">// explicitly with Cmd + Q.</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&#x27;darwin&#x27;</span>) app.<span class="title function_">quit</span>()</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// In this file you can include the rest of your app&#x27;s specific main process</span></span><br><span class="line"><span class="comment">// code. You can also put them in separate files and require them here.</span></span><br></pre></td></tr></table></figure><p>嵌套的vue项目启动页面( npm run start )</p><p><img src="1016812-20241126150115393-1842781350.png" alt="" /></p><p>在 electron-quick-start 项目 package.json 配置文件中，scripts 下添加 packager 指令</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;electron .&quot;,</span><br><span class="line">  &quot;packager&quot;: &quot;electron-packager ./ 测试xxx收银系统 --platform=win32 --arch=x64 --icon=./dist/favicon.ico --out=./out --overwrite&quot;</span><br><span class="line">&#125;, // 测试xxx收银系统 为应用名</span><br></pre></td></tr></table></figure><p>npm run packager 执行打包命令</p><p>打包完毕, node_modules同级 会生成out文件, 点开exe包就是打包好 , 可安装在windows系统上</p><p><img src="1016812-20241126150159760-814097958.png" alt="" /></p><h3 id="四-至此-exe-打包已完成-接下来使用-inno-setup工具生成安装程序包"><a class="markdownIt-Anchor" href="#四-至此-exe-打包已完成-接下来使用-inno-setup工具生成安装程序包"></a> 四. 至此 exe 打包已完成 , 接下来使用 Inno Setup（工具生成安装程序包)</h3><p>在Inno Setup 里面搭建一个脚本, 通过脚本编辑安装程序的名称, 版本. 快捷键生成, 安装目录等, 是很有必要的, 生成一次后,后续可以一直沿用 ,二次使用选择上一次创建好的脚本, 一键打包即可</p><p><img src="1016812-20241126150223690-1845894402.png" alt="" /></p>]]></content>
    
    
    <summary type="html">Electron系列 -- vue项目打包成.exe文件(通过官方demo的方式)</summary>
    
    
    
    <category term="技术" scheme="http://www.formeasy.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="VUE" scheme="http://www.formeasy.cc/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>VUE项目打包Electron</title>
    <link href="http://www.formeasy.cc/2025/09/10/VUE/VUE%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85Electron/"/>
    <id>http://www.formeasy.cc/2025/09/10/VUE/VUE%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85Electron/</id>
    <published>2025-09-10T08:22:46.000Z</published>
    <updated>2025-09-10T08:35:56.608Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备vue项目"><a class="markdownIt-Anchor" href="#准备vue项目"></a> 准备VUE项目</h2><p>可以在以下方式选一种：</p><ul><li>新建一个纯VUE项目（顺便考虑下用什么模板来新建）</li><li>已有的一个VUE项目</li></ul><h2 id="新建项目的过程"><a class="markdownIt-Anchor" href="#新建项目的过程"></a> 新建项目的过程</h2><p>1.在项目根目录执行 vue add electron-builder。</p><p>2.运行 npm run electron:serve 即完成。</p><h2 id="已有项目的过程"><a class="markdownIt-Anchor" href="#已有项目的过程"></a> 已有项目的过程</h2><p>1.VUE项目的config，改一下。有的是根目录的vue.config.js，有的是config/index.js，把build-&gt;assetsPublicPath的值&quot;/“改为”./&quot;</p><p>2.VUE项目build一下:npm run build</p><p>3.dist 目录加上electron.js、package.json两个文件：</p><p>electron.js :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    app,</span><br><span class="line">    <span class="title class_">BrowserWindow</span>,</span><br><span class="line">    ipcMain,</span><br><span class="line">    <span class="title class_">Tray</span></span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>); <span class="comment">//引入electron</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">app.<span class="property">commandLine</span>.<span class="title function_">appendSwitch</span>(<span class="string">&quot;--disable-http-cache&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> canQuit=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mainWin;</span><br><span class="line"><span class="keyword">let</span> windowIco=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(process.<span class="property">platform</span>==<span class="string">&#x27;darwin&#x27;</span>)&#123;</span><br><span class="line">    windowIco=path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./resources/kefu_mac.icns&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(windowIco)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> windowConfig = &#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">minWidth</span>:<span class="number">800</span>,</span><br><span class="line">    <span class="attr">minHeight</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">icon</span>: windowIco,</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">        <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">contextIsolation</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;preload.js&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; <span class="comment">//窗口配置程序运行窗口的大小</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">    mainWin = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(windowConfig); <span class="comment">//创建一个窗口</span></span><br><span class="line">    <span class="comment">//mainWin.loadURL(`file://$&#123;__dirname&#125;/index.html`); </span></span><br><span class="line">    mainWin.<span class="title function_">loadURL</span>(<span class="string">&#x27;http://127.0.0.1:10089/&#x27;</span>)</span><br><span class="line">    <span class="comment">//mainWin.webContents.openDevTools(); //开启调试工具</span></span><br><span class="line">    mainWin.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(canQuit)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">        mainWin.<span class="title function_">hide</span>();</span><br><span class="line">        e.<span class="title function_">preventDefault</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;ready&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    tray = <span class="keyword">new</span> <span class="title class_">Tray</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./resources/macTrayTwoTemplate.png&#x27;</span>))</span><br><span class="line">    <span class="title function_">createWindow</span>();</span><br><span class="line">    tray.<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mainWin != <span class="literal">null</span>)&#123;</span><br><span class="line">            mainWin.<span class="title function_">show</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&#x27;darwin&#x27;</span>) &#123;</span><br><span class="line">        app.<span class="title function_">quit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;activate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mainWin == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="title function_">createWindow</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        mainWin.<span class="title function_">show</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;before-quit&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    canQuit=<span class="literal">true</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;openNewWindow&#x27;</span>,<span class="function">(<span class="params">event,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> win=<span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;<span class="attr">width</span>:<span class="number">500</span>,<span class="attr">height</span>:<span class="number">500</span>&#125;);</span><br><span class="line">    win.<span class="title function_">loadURL</span>(data.<span class="property">url</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;setBadgeCount&#x27;</span>,<span class="function">(<span class="params">event,data</span>)=&gt;</span>&#123;</span><br><span class="line">    app.<span class="title function_">setBadgeCount</span>(data.<span class="property">count</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// simple web server</span></span><br><span class="line"><span class="keyword">const</span> httpServer=<span class="built_in">require</span>(<span class="string">&#x27;http-server&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> webRoot=path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(webRoot)</span><br><span class="line"><span class="keyword">let</span> op=&#123;</span><br><span class="line">    <span class="attr">root</span>: webRoot</span><br><span class="line">&#125;</span><br><span class="line">httpServer.<span class="title function_">createServer</span>(op).<span class="title function_">listen</span>(<span class="number">10089</span>);</span><br></pre></td></tr></table></figure><p>其原理是内部启动一个nodejs的http−server，供electron访问。</p><p>package.json :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhanxiong-kefu&quot;</span>,</span><br><span class="line">  <span class="string">&quot;productName&quot;</span>: <span class="string">&quot;战雄客服&quot;</span>,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;Sinco.Zou&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;electron.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Zhan Xiong Service&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;pack&quot;</span>: <span class="string">&quot;electron-builder --dir&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dist&quot;</span>: <span class="string">&quot;electron-builder&quot;</span>,</span><br><span class="line">    <span class="string">&quot;postinstall&quot;</span>: <span class="string">&quot;electron-builder install-app-deps&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;electron-forge start&quot;</span>,</span><br><span class="line">    <span class="string">&quot;package&quot;</span>: <span class="string">&quot;electron-forge package&quot;</span>,</span><br><span class="line">    <span class="string">&quot;make&quot;</span>: <span class="string">&quot;electron-forge make&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;electronVersion&quot;</span>: <span class="string">&quot;1.8.4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;win&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;requestedExecutionLevel&quot;</span>: <span class="string">&quot;highestAvailable&quot;</span>,</span><br><span class="line">      <span class="string">&quot;target&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;target&quot;</span>: <span class="string">&quot;nsis&quot;</span>,</span><br><span class="line">          <span class="string">&quot;arch&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;x64&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;appId&quot;</span>: <span class="string">&quot;com.zhanxiaong.pckefu&quot;</span>,</span><br><span class="line">    <span class="string">&quot;artifactName&quot;</span>: <span class="string">&quot;cang-version−&#123;arch&#125;.$&#123;ext&#125;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nsis&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;artifactName&quot;</span>: <span class="string">&quot;cang-version−&#123;arch&#125;.$&#123;ext&#125;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;extraResources&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;from&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;to&quot;</span>: <span class="string">&quot;app-server&quot;</span>,</span><br><span class="line">        <span class="string">&quot;filter&quot;</span>: [</span><br><span class="line">          <span class="string">&quot;**/*&quot;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;publish&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;provider&quot;</span>: <span class="string">&quot;generic&quot;</span>,</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: <span class="string">&quot;cang&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;config&quot;</span>: <span class="string">&quot;^3.3.7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;core-js&quot;</span>: <span class="string">&quot;^2.4.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;electron-package&quot;</span>: <span class="string">&quot;^0.1.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;electron-squirrel-startup&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;electron-updater&quot;</span>: <span class="string">&quot;^4.6.5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fs-extra&quot;</span>: <span class="string">&quot;^4.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;get&quot;</span>: <span class="string">&quot;^1.4.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http-server&quot;</span>: <span class="string">&quot;^14.1.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;install.js&quot;</span>: <span class="string">&quot;^1.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;moment&quot;</span>: <span class="string">&quot;^2.18.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;moment-es6&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;npm&quot;</span>: <span class="string">&quot;^8.10.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;registry&quot;</span>: <span class="string">&quot;^0.3.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@electron-forge/cli&quot;</span>: <span class="string">&quot;^6.0.0-beta.63&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@electron-forge/maker-deb&quot;</span>: <span class="string">&quot;^6.0.0-beta.63&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@electron-forge/maker-rpm&quot;</span>: <span class="string">&quot;^6.0.0-beta.63&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@electron-forge/maker-squirrel&quot;</span>: <span class="string">&quot;^6.0.0-beta.63&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@electron-forge/maker-zip&quot;</span>: <span class="string">&quot;^6.0.0-beta.63&quot;</span>,</span><br><span class="line">    <span class="string">&quot;electron&quot;</span>: <span class="string">&quot;18.2.4&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;forge&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;packagerConfig&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;./resources/kefu_mac.icns&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;makers&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;@electron-forge/maker-squirrel&quot;</span>,</span><br><span class="line">          <span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;cang&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;@electron-forge/maker-zip&quot;</span>,</span><br><span class="line">          <span class="string">&quot;platforms&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;darwin&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;@electron-forge/maker-deb&quot;</span>,</span><br><span class="line">          <span class="string">&quot;config&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;@electron-forge/maker-rpm&quot;</span>,</span><br><span class="line">          <span class="string">&quot;config&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.切到dist目录下，npm install，不要用cnpm，各种莫名其妙的问题，用yarn也许没问题。</p><p>5.在dist目录 electron .运行测试，如果有JS报错，尝试把webpackprod.conf.js的compress注释掉再试。</p><h2 id="打包"><a class="markdownIt-Anchor" href="#打包"></a> 打包</h2><p>此步骤只适合已有项目的过程，新建项目自行看package.json里面的命令。</p><p>1.切到dist目录：npm install --save-dev electron-forge（需要好长时间）</p><p>2.npm run make 一般就可以了。如果需要改程序的图标，在package.json的config-&gt;forge-&gt;packgerConfig，加上&quot;icon&quot;: &quot;./res/xx.icns&quot;即可</p><p>即此已完成。</p>]]></content>
    
    
    <summary type="html">VUE项目打包Electron</summary>
    
    
    
    <category term="技术" scheme="http://www.formeasy.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="VUE" scheme="http://www.formeasy.cc/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>如何使用electron将Vue项目打包为本地exe文件</title>
    <link href="http://www.formeasy.cc/2025/09/10/VUE/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8electron%E5%B0%86Vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E4%B8%BA%E6%9C%AC%E5%9C%B0exe%E6%96%87%E4%BB%B6/"/>
    <id>http://www.formeasy.cc/2025/09/10/VUE/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8electron%E5%B0%86Vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E4%B8%BA%E6%9C%AC%E5%9C%B0exe%E6%96%87%E4%BB%B6/</id>
    <published>2025-09-10T08:20:46.000Z</published>
    <updated>2025-09-10T08:28:56.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-创建vue工程"><a class="markdownIt-Anchor" href="#一-创建vue工程"></a> 一、创建Vue工程</h2><p>1、Node.js和Vue的安装</p><p>node.js安装后node -v和npm -v可看到版本号</p><p>安装vue<br />npm install -g vue-cli<br />vue -V 可看到vue版本号</p><p>2、<code>vue create [project]</code>创建Vue工程，然后根据需求编写Vue组件即可，完成后使用npm run serve启动程序。</p><h2 id="二-拿下electron"><a class="markdownIt-Anchor" href="#二-拿下electron"></a> 二、拿下Electron</h2><h3 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1、简介</h3><p><strong>Electron</strong>是一个开源框架，可借助JavaScript、HTML和CSS构建跨平台桌面应用。它结合Chromium和Node.js，开发者能复用Web技术。众多知名应用如VS Code、Slack都用它开发，具备高效、灵活的特点。</p><p>它在Github官方仓库中可以找到各个版本，但是我们国内有很出色的镜像源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://registry.npmmirror.com/binary.html?path=electron/28.1.0/</span><br></pre></td></tr></table></figure><p><strong>electron-builder</strong>是一个为Electron应用量身打造的打包工具。它能把Electron应用打包成可在不同操作系统（如Windows、Mac、Linux）上直接安装运行的格式。支持自动更新、签名等功能，操作简单且功能强大，能大幅提升应用发布效率。</p><p>本文选择最稳定的版本进行搭配安装：</p><table><thead><tr><th>依赖</th><th>版本</th></tr></thead><tbody><tr><td>electron</td><td>28.1.0</td></tr><tr><td>electron-builder</td><td>26.0.12</td></tr></tbody></table><h3 id="2-安装electron"><a class="markdownIt-Anchor" href="#2-安装electron"></a> 2、安装electron</h3><p>2.1、设置镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> ELECTRON_MIRROR=https://npmmirror.com/mirrors/electron/</span><br></pre></td></tr></table></figure><p>2.2、安装依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install electron@28.1.0 --save-dev --ignore-scripts</span><br></pre></td></tr></table></figure><p>安装成功如下：<br /><img src="855297e63ccc49ce911d25ba06e724d6.png" alt="" /></p><p>2.3、<a href="https://registry.npmmirror.com/binary.html?path=electron/28.1.0/">手动下载Electron二进制文件</a></p><p><img src="36034decb16c490eb2b7167517161186.png" alt="" /></p><p>2.4、移动到目录<code>music-score\node_modules\electron</code>下</p><p><img src="42060022879e401cb23139539ff3e667.png" alt="" /></p><p>2.5、修改install.js脚本</p><p>为安装时下载依赖成功，需要注释掉<code>downloadArtifact</code>方法，添加<code>extractFile(&quot;electron-v28.1.0-win32-x64.zip&quot;);</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; version &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./package&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> childProcess = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> extract = <span class="built_in">require</span>(<span class="string">&#x27;extract-zip&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; downloadArtifact &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@electron/get&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">ELECTRON_SKIP_BINARY_DOWNLOAD</span>) &#123;</span><br><span class="line">  process.<span class="title function_">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> platformPath = <span class="title function_">getPlatformPath</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isInstalled</span>()) &#123;</span><br><span class="line">  process.<span class="title function_">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> platform = process.<span class="property">env</span>.<span class="property">npm_config_platform</span> || process.<span class="property">platform</span>;</span><br><span class="line"><span class="keyword">let</span> arch = process.<span class="property">env</span>.<span class="property">npm_config_arch</span> || process.<span class="property">arch</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (platform === <span class="string">&#x27;darwin&#x27;</span> &amp;&amp; process.<span class="property">platform</span> === <span class="string">&#x27;darwin&#x27;</span> &amp;&amp; arch === <span class="string">&#x27;x64&#x27;</span> &amp;&amp;</span><br><span class="line">  process.<span class="property">env</span>.<span class="property">npm_config_arch</span> === <span class="literal">undefined</span>) &#123;</span><br><span class="line">  <span class="comment">// When downloading for macOS ON macOS and we think we need x64 we should</span></span><br><span class="line">  <span class="comment">// check if we&#x27;re running under rosetta and download the arm64 version if appropriate</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> output = childProcess.<span class="title function_">execSync</span>(<span class="string">&#x27;sysctl -in sysctl.proc_translated&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (output.<span class="title function_">toString</span>().<span class="title function_">trim</span>() === <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">      arch = <span class="string">&#x27;arm64&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="comment">// Ignore failure</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">extractFile</span>(<span class="string">&quot;electron-v28.1.0-win32-x64.zip&quot;</span>);</span><br><span class="line"><span class="comment">// downloads if not cached</span></span><br><span class="line"><span class="comment">// downloadArtifact(&#123;</span></span><br><span class="line"><span class="comment">//   version,</span></span><br><span class="line"><span class="comment">//   artifactName: &#x27;electron&#x27;,</span></span><br><span class="line"><span class="comment">//   force: process.env.force_no_cache === &#x27;true&#x27;,</span></span><br><span class="line"><span class="comment">//   cacheRoot: process.env.electron_config_cache,</span></span><br><span class="line"><span class="comment">//   checksums: process.env.electron_use_remote_checksums ? undefined : require(&#x27;./checksums.json&#x27;),</span></span><br><span class="line"><span class="comment">//   platform,</span></span><br><span class="line"><span class="comment">//   arch</span></span><br><span class="line"><span class="comment">// &#125;).then(extractFile).catch(err =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.error(err.stack);</span></span><br><span class="line"><span class="comment">//   process.exit(1);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isInstalled</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fs.<span class="title function_">readFileSync</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>, <span class="string">&#x27;version&#x27;</span>), <span class="string">&#x27;utf-8&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/^v/</span>, <span class="string">&#x27;&#x27;</span>) !== version) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fs.<span class="title function_">readFileSync</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;path.txt&#x27;</span>), <span class="string">&#x27;utf-8&#x27;</span>) !== platformPath) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ignored) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> electronPath = process.<span class="property">env</span>.<span class="property">ELECTRON_OVERRIDE_DIST_PATH</span> || path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>, platformPath);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> fs.<span class="title function_">existsSync</span>(electronPath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// unzips and makes path.txt point at the correct executable</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">extractFile</span>(<span class="params">zipPath</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> distPath = process.<span class="property">env</span>.<span class="property">ELECTRON_OVERRIDE_DIST_PATH</span> || path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">extract</span>(zipPath, &#123; <span class="attr">dir</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>) &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// If the zip contains an &quot;electron.d.ts&quot; file,</span></span><br><span class="line">    <span class="comment">// move that up</span></span><br><span class="line">    <span class="keyword">const</span> srcTypeDefPath = path.<span class="title function_">join</span>(distPath, <span class="string">&#x27;electron.d.ts&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> targetTypeDefPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;electron.d.ts&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> hasTypeDefinitions = fs.<span class="title function_">existsSync</span>(srcTypeDefPath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hasTypeDefinitions) &#123;</span><br><span class="line">      fs.<span class="title function_">renameSync</span>(srcTypeDefPath, targetTypeDefPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write a &quot;path.txt&quot; file.</span></span><br><span class="line">    <span class="keyword">return</span> fs.<span class="property">promises</span>.<span class="title function_">writeFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;path.txt&#x27;</span>), platformPath);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPlatformPath</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> platform = process.<span class="property">env</span>.<span class="property">npm_config_platform</span> || os.<span class="title function_">platform</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (platform) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;mas&#x27;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;darwin&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Electron.app/Contents/MacOS/Electron&#x27;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;freebsd&#x27;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;openbsd&#x27;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;linux&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;electron&#x27;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;win32&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;electron.exe&#x27;</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Electron builds are not available on platform: &#x27;</span> + platform);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.6、在electron目录下，重新执行安装命令<code>node install.js</code></p><p>这样就会自动解压到当前目录，可以看到多了一个dist目录，至此electron安装完成。<br /><img src="567dec51895545898c5611692d62d17f.png" alt="" /></p><h3 id="3-安装electron-builder"><a class="markdownIt-Anchor" href="#3-安装electron-builder"></a> 3、安装electron-builder</h3><p>3.1、设置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> ELECTRON_BUILDER_BINARIES_MIRROR=https://npmmirror.com/mirrors/electron-builder-binaries/</span><br></pre></td></tr></table></figure><p>3.2、安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install electron-builder@26.0.12 --save-dev</span><br></pre></td></tr></table></figure><p><img src="b694e0a5a92c4116886aa62b3691700a.png" alt="" /></p><h3 id="4-测试"><a class="markdownIt-Anchor" href="#4-测试"></a> 4、测试</h3><p>在项目根目录新建test-electron.js，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Electron版本:&#x27;</span>, process.<span class="property">versions</span>.<span class="property">electron</span>)</span><br><span class="line">app.<span class="title function_">quit</span>()</span><br></pre></td></tr></table></figure><p>终端执行<code>npx electron ./src/test-electron.js</code><br /><img src="571b482f1d25467292437ebfec1a7691.png" alt="" /></p><p>显示版本号则说明安装成功。</p><h2 id="三-配置vue程序"><a class="markdownIt-Anchor" href="#三-配置vue程序"></a> 三、配置Vue程序</h2><h3 id="31-vueconfigjs"><a class="markdownIt-Anchor" href="#31-vueconfigjs"></a> 3.1、vue.config.js</h3><p>需要定义公共路径和输出目录。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">  <span class="attr">outputDir</span>: <span class="string">&#x27;dist&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="32-packagejson"><a class="markdownIt-Anchor" href="#32-packagejson"></a> 3.2、package.json</h3><p>最主要的就是build键属性，定义了软件的基本信息。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;music-score&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;use five hours to convert web to app&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;electron-main.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;duzhenhua&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;appId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.dzh.musicscore&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;productName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MusicScore&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;directories&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;win&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;portable&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public/icon.ico&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;dist/**/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;electron-main.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;package.json&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;electronDownload&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;mirror&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://npmmirror.com/mirrors/electron/&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service serve&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service lint&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;postinstall&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node node_modules/electron/install.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;electron:build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;electron-builder&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;electron .&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@element-plus/icons-vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.3.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;core-js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.8.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;element-plus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.9.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.13&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@babel/core&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.12.16&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/eslint-parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.12.16&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-babel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~5.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~5.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-service&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~5.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;electron&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^28.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;electron-builder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^26.0.12&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.32.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint-plugin-vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.0.3&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslintConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;plugin:vue/vue3-essential&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;eslint:recommended&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;parserOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@babel/eslint-parser&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;browserslist&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;&gt; 1%&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;last 2 versions&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;not dead&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;not ie 11&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="33-electron-mainjs"><a class="markdownIt-Anchor" href="#33-electron-mainjs"></a> 3.3、electron-main.js</h3><p><img src="e92e28e0365e46d4a7d50ba52c8bd7e7.png" alt="" /></p><p>在项目根目录新建<code>electron-main.js</code>文件，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// electron-main.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">1200</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">800</span>,</span><br><span class="line">        <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">            <span class="attr">nodeIntegration</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载Vue构建后的页面</span></span><br><span class="line">    win.<span class="title function_">loadFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow)</span><br></pre></td></tr></table></figure><h2 id="四-打包vue程序"><a class="markdownIt-Anchor" href="#四-打包vue程序"></a> 四、打包Vue程序</h2><h3 id="41-npm-run-build"><a class="markdownIt-Anchor" href="#41-npm-run-build"></a> 4.1、npm run build</h3><p>在根目录执行编译命令，然后会在dist目录中生成css、js和html文件。<br /><img src="f7a0db922ddb4f60b9eafedd0bde1df5.png" alt="" /><br />在资源管理器中打开index.html文件，如果可以正常在浏览器中显示就说明程序没问题。</p><p><img src="05b93c1e3e354b338c9c0e7ce959000b.png" alt="" /></p><h3 id="42-npx-electron-builder-win-x64-configasarfalse"><a class="markdownIt-Anchor" href="#42-npx-electron-builder-win-x64-configasarfalse"></a> 4.2、npx electron-builder --win --x64 --config.asar=false</h3><p>在根目录执行打包命令，10s不到就可以打包完成。<br /><img src="a2d75e22565a4306aab27df600afbb8c.png" alt="" /></p><p>会在build目录下生成win-unpacked目录，如下：<br />build/<br />└── win-unpacked/<br />├── music-score.exe<br />└── resources/<br />├── app.asar<br />└── electron.asar</p><p>其中music-score.exe是我们需要的可执行文件，resources目录是依赖文件，我们只需要将win-unpacked压缩，就可以在任何装有Windows系统的电脑上解压运行。<br /><img src="1fd9decfc7474e61b3914f61a9913dfe.png" alt="" /></p>]]></content>
    
    
    <summary type="html">如何使用electron将Vue项目打包为本地exe文件</summary>
    
    
    
    <category term="技术" scheme="http://www.formeasy.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="VUE" scheme="http://www.formeasy.cc/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>UE中使用NDI插件读取Qt程序截图</title>
    <link href="http://www.formeasy.cc/2025/09/09/UE/UE%E4%B8%AD%E4%BD%BF%E7%94%A8NDI%E6%8F%92%E4%BB%B6%E8%AF%BB%E5%8F%96Qt%E7%A8%8B%E5%BA%8F%E6%88%AA%E5%9B%BE/"/>
    <id>http://www.formeasy.cc/2025/09/09/UE/UE%E4%B8%AD%E4%BD%BF%E7%94%A8NDI%E6%8F%92%E4%BB%B6%E8%AF%BB%E5%8F%96Qt%E7%A8%8B%E5%BA%8F%E6%88%AA%E5%9B%BE/</id>
    <published>2025-09-09T01:03:22.000Z</published>
    <updated>2025-09-09T02:31:57.130Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-下载和安装ndi工具和sdk"><a class="markdownIt-Anchor" href="#一-下载和安装ndi工具和sdk"></a> 一、下载和安装NDI工具和SDK</h3><p>下载和安装：<br />1.NDI 6 SDK （<a href="https://ndi.video/for-developers/ndi-sdk/%EF%BC%89">https://ndi.video/for-developers/ndi-sdk/）</a><br />2.NDI 6 Tools（选装） （<a href="https://ndi.video/%EF%BC%89">https://ndi.video/）</a><br />3.NDI SDK for Unreal Engine v3.8 （<a href="https://ndi.video/for-developers/ndi-unreal-engine-sdk/%EF%BC%89">https://ndi.video/for-developers/ndi-unreal-engine-sdk/）</a></p><h3 id="二-qt程序使用ndi发送视频流"><a class="markdownIt-Anchor" href="#二-qt程序使用ndi发送视频流"></a> 二、Qt程序使用NDI发送视频流</h3><p>1.新增SDK到工程目录下 \HDD\NDISDK</p><p><a href="http://2.XXX.pro">2.XXX.pro</a> 文件加入：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#NDI</span><br><span class="line">INCLUDEPATH += $$PWD/NDISDK/include</span><br><span class="line">LIBS += -L$$PWD/NDISDK/lib -lProcessing.NDI.Lib.x64</span><br></pre></td></tr></table></figure><p>3.mainform.h文件：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Processing.NDI.Lib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/*--------------NDI--------------------*/</span></span><br><span class="line">    NDIlib_send_instance_t m_pNDI_send; <span class="comment">// NDI 发送实例</span></span><br><span class="line">    QTimer* m_pTimer; <span class="comment">// 定时器，用于定期捕获和发送帧</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">captureAndSendFrame</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>4.mainform.cpp文件：</p><p>（1）构造函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*--------------NDI--------------------*/</span></span><br><span class="line"><span class="comment">// 初始化 NDI 库（确保只初始化一次）</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">NDIlib_initialize</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 NDI 发送器</span></span><br><span class="line">NDIlib_send_create_t NDI_send_create_desc;</span><br><span class="line">NDI_send_create_desc.p_ndi_name = <span class="string">&quot;HDD1&quot;</span>; <span class="comment">// 流的名称，在UE端会看到这个名称</span></span><br><span class="line">NDI_send_create_desc.p_groups = <span class="literal">nullptr</span>;</span><br><span class="line">NDI_send_create_desc.clock_video = <span class="literal">false</span>;</span><br><span class="line">NDI_send_create_desc.clock_audio = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">m_pNDI_send = <span class="built_in">NDIlib_send_create</span>(&amp;NDI_send_create_desc);</span><br><span class="line"><span class="keyword">if</span> (!m_pNDI_send) &#123;</span><br><span class="line">   <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个定时器，例如每秒 30 次（30 FPS）</span></span><br><span class="line"></span><br><span class="line">m_pTimer = <span class="keyword">new</span> <span class="built_in">QTimer</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">connect</span>(m_pTimer, &amp;QTimer::timeout, <span class="keyword">this</span>, &amp;MainForm::captureAndSendFrame);</span><br><span class="line">m_pTimer-&gt;<span class="built_in">start</span>(<span class="number">33</span>); <span class="comment">// ~33ms 一帧</span></span><br><span class="line"><span class="comment">/*---------end NDI---------*/</span></span><br></pre></td></tr></table></figure><p>（2）析构函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*--------NDI----------*/</span></span><br><span class="line">m_pTimer-&gt;<span class="built_in">stop</span>();</span><br><span class="line"><span class="keyword">delete</span> m_pTimer;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁 NDI 发送器</span></span><br><span class="line"><span class="keyword">if</span> (m_pNDI_send) &#123;</span><br><span class="line"><span class="built_in">NDIlib_send_destroy</span>(m_pNDI_send);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后清理 NDI 库</span></span><br><span class="line"><span class="built_in">NDIlib_destroy</span>();</span><br></pre></td></tr></table></figure><p>（3）captureAndSendFrame函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* NDI 定时发送 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainForm::captureAndSendFrame</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 1. 捕获当前窗口的像素图</span></span><br><span class="line">    QPixmap pixmap = <span class="keyword">this</span>-&gt;<span class="built_in">grab</span>(); <span class="comment">// 捕获整个主窗口</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 将 QPixmap 转换为 QImage (确保格式是 RGB 或 RGBA)</span></span><br><span class="line">    QImage image = pixmap.<span class="built_in">toImage</span>().<span class="built_in">convertToFormat</span>(QImage::Format_RGBA8888);</span><br><span class="line">    <span class="comment">//QImage image = pixmap.toImage().convertToFormat(QImage::Format_BGR888);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 填充 NDI 视频帧数据结构</span></span><br><span class="line">    NDIlib_video_frame_v2_t video_frame;</span><br><span class="line">    video_frame.xres = image.<span class="built_in">width</span>();</span><br><span class="line">    video_frame.yres = image.<span class="built_in">height</span>();</span><br><span class="line">    video_frame.FourCC = NDIlib_FourCC_type_RGBA; <span class="comment">// 格式与我们转换的 QImage 匹配</span></span><br><span class="line">    <span class="comment">//video_frame.FourCC = NDIlib_FourCC_type_BGRA ;</span></span><br><span class="line">    video_frame.frame_rate_N = <span class="number">30000</span>;</span><br><span class="line">    video_frame.frame_rate_D = <span class="number">1001</span>;</span><br><span class="line">    video_frame.picture_aspect_ratio = <span class="built_in">static_cast</span>&lt;<span class="type">float</span>&gt;(image.<span class="built_in">width</span>()) / <span class="built_in">static_cast</span>&lt;<span class="type">float</span>&gt;(image.<span class="built_in">height</span>());</span><br><span class="line">    video_frame.frame_format_type = NDIlib_frame_format_type_progressive;</span><br><span class="line">    video_frame.timecode = NDIlib_send_timecode_synthesize;</span><br><span class="line">    video_frame.p_data = <span class="built_in">const_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(image.<span class="built_in">bits</span>()); <span class="comment">// NDI 不会修改数据</span></span><br><span class="line">    video_frame.line_stride_in_bytes = image.<span class="built_in">bytesPerLine</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 发送帧</span></span><br><span class="line">    <span class="built_in">NDIlib_send_send_video_v2</span>(m_pNDI_send, &amp;video_frame);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上执行后，可用NDI tools工具测试是否正常send视频流</p><h3 id="三-使用ue5接收视频流并播放"><a class="markdownIt-Anchor" href="#三-使用ue5接收视频流并播放"></a> 三、使用UE5接收视频流并播放</h3><p>1.添加NDI Receive Actor播放实体</p><p><img src="2025-09-09_091607_852_1.png" alt="" /></p><p>2.添加NDI Media Receiver，用来接收视频流</p><p><img src="2025-09-09_091722_794_2.png" alt="" /></p><p>3.设置创建的NDIMediaReceiver，将Connection选择为Qt程序中的SourceName、MachineName、StreamName</p><p><img src="2025-09-09_092133_683_3.png" alt="" /></p><p>4.设置NDI Receive Actor的视频源为创建的NDIMediaReceiver</p><p><img src="2025-09-09_091856_260_4.png" alt="" /></p><p>以上，可在UE5中正常播放Qt程序截图</p>]]></content>
    
    
    <summary type="html">UE中使用NDI插件读取Qt程序截图</summary>
    
    
    
    <category term="技术" scheme="http://www.formeasy.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="UE" scheme="http://www.formeasy.cc/tags/UE/"/>
    
  </entry>
  
  <entry>
    <title>UE中使用NDI插件动态设置SourceName</title>
    <link href="http://www.formeasy.cc/2025/09/08/UE/UE%E4%B8%AD%E4%BD%BF%E7%94%A8NDI%E6%8F%92%E4%BB%B6%E5%8A%A8%E6%80%81%E8%AE%BE%E7%BD%AESourceName/"/>
    <id>http://www.formeasy.cc/2025/09/08/UE/UE%E4%B8%AD%E4%BD%BF%E7%94%A8NDI%E6%8F%92%E4%BB%B6%E5%8A%A8%E6%80%81%E8%AE%BE%E7%BD%AESourceName/</id>
    <published>2025-09-08T09:03:22.000Z</published>
    <updated>2025-09-08T09:37:24.088Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-配置动态ini类"><a class="markdownIt-Anchor" href="#一-配置动态ini类"></a> 一、配置动态ini类</h3><p>InConfigBPLibrary.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/Actor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;InConfigBPLibrary.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VISIONPROJECT_API</span> AInConfigBPLibrary : <span class="keyword">public</span> AActor</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// Sets default values for this actor&#x27;s properties</span></span><br><span class="line"><span class="built_in">AInConfigBPLibrary</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="comment">// Called when the game starts or when spawned</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BeginPlay</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// Called every frame</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Tick</span><span class="params">(<span class="type">float</span> DeltaTime)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;InConfig&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GetConfigNdiInfo</span><span class="params">(TArray&lt;FString&gt;&amp; configNDIInfo)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>InConfigBPLibrary.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;InConfigBPLibrary.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sets default values</span></span><br><span class="line">AInConfigBPLibrary::<span class="built_in">AInConfigBPLibrary</span>()</span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don&#x27;t need it.</span></span><br><span class="line">PrimaryActorTick.bCanEverTick = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Called when the game starts or when spawned</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AInConfigBPLibrary::BeginPlay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">BeginPlay</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Called every frame</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AInConfigBPLibrary::Tick</span><span class="params">(<span class="type">float</span> DeltaTime)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">Tick</span>(DeltaTime);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AInConfigBPLibrary::GetConfigNdiInfo</span><span class="params">(TArray&lt;FString&gt;&amp; configNDIInfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FString ConfigPath = FPaths::<span class="built_in">ConvertRelativePathToFull</span>(FPaths::<span class="built_in">ProjectDir</span>()) + <span class="string">&quot;Config/config.ini&quot;</span>;</span><br><span class="line">FString sourcename;</span><br><span class="line">GConfig-&gt;<span class="built_in">GetString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;NDI&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;sourcename&quot;</span>), sourcename, ConfigPath);</span><br><span class="line">configNDIInfo.<span class="built_in">Add</span>(sourcename);</span><br><span class="line">FString machinename;</span><br><span class="line">GConfig-&gt;<span class="built_in">GetString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;NDI&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;machinename&quot;</span>), machinename, ConfigPath);</span><br><span class="line">configNDIInfo.<span class="built_in">Add</span>(machinename);</span><br><span class="line">FString streamname;</span><br><span class="line">GConfig-&gt;<span class="built_in">GetString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;NDI&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;streamname&quot;</span>), streamname, ConfigPath);</span><br><span class="line">configNDIInfo.<span class="built_in">Add</span>(streamname);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-配置ini文件"><a class="markdownIt-Anchor" href="#二-配置ini文件"></a> 二、配置ini文件</h3><p>在项目目录下创建目录及文件 Config/config.ini</p><p>添加源名、机器名和流名：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[NDI]</span><br><span class="line">sourcename=FORMEASY (HDD1)</span><br><span class="line">machinename=FORMEASY</span><br><span class="line">streamname=HDD1</span><br></pre></td></tr></table></figure><p>注：注意:sourcename的设备名和流名之间有空格</p><h3 id="三-ndiio插件复制"><a class="markdownIt-Anchor" href="#三-ndiio插件复制"></a> 三、NDIIO插件复制</h3><p>将UE5中的plugin下NDIIO插件目录复制到项目plugin下</p><h3 id="四-添加关卡蓝图方法"><a class="markdownIt-Anchor" href="#四-添加关卡蓝图方法"></a> 四、添加关卡蓝图方法</h3><p>按照下图，在EventBeginPlay后添加NDI配置:</p><p><img src="20250908172055_97_53.png" alt="" /></p>]]></content>
    
    
    <summary type="html">UE中使用NDI插件动态设置SourceName</summary>
    
    
    
    <category term="技术" scheme="http://www.formeasy.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="UE" scheme="http://www.formeasy.cc/tags/UE/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 3 集成 Swagger 3 完整指南</title>
    <link href="http://www.formeasy.cc/2025/09/08/Springboot/Spring%20Boot%203%20%E9%9B%86%E6%88%90%20Swagger%203%20%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97/"/>
    <id>http://www.formeasy.cc/2025/09/08/Springboot/Spring%20Boot%203%20%E9%9B%86%E6%88%90%20Swagger%203%20%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97/</id>
    <published>2025-09-08T02:40:49.000Z</published>
    <updated>2025-09-08T02:59:37.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring-boot-3-集成-swagger-3-完整指南"><a class="markdownIt-Anchor" href="#spring-boot-3-集成-swagger-3-完整指南"></a> Spring Boot 3 集成 Swagger 3 完整指南</h2><p>Swagger（现更名为OpenAPI）是一个用于设计、构建和文档化API的强大工具。在Spring Boot 3中集成Swagger 3（OpenAPI 3.0）可以帮助我们自动生成API文档，方便前后端开发人员协作。</p><h3 id="一-依赖配置"><a class="markdownIt-Anchor" href="#一-依赖配置"></a> 一、依赖配置</h3><p>首先，在<code>pom.xml</code>中添加SpringDoc OpenAPI依赖（Swagger 3的官方实现）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringDoc OpenAPI 核心依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个依赖包含了：</p><ul><li>OpenAPI 3.0规范的实现</li><li>Swagger UI界面</li><li>与Spring Boot 3的自动配置</li></ul><h3 id="二-基本配置"><a class="markdownIt-Anchor" href="#二-基本配置"></a> 二、基本配置</h3><p>创建Swagger配置类，自定义API文档信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.OpenAPI;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.info.Contact;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.info.Info;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.info.License;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OpenAPI <span class="title function_">customOpenAPI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OpenAPI</span>()</span><br><span class="line">                .info(<span class="keyword">new</span> <span class="title class_">Info</span>()</span><br><span class="line">                        .title(<span class="string">&quot;Spring Boot 3 API 文档&quot;</span>)</span><br><span class="line">                        .version(<span class="string">&quot;1.0.0&quot;</span>)</span><br><span class="line">                        .description(<span class="string">&quot;这是一个使用Spring Boot 3和Swagger 3构建的API文档示例&quot;</span>)</span><br><span class="line">                        .termsOfService(<span class="string">&quot;https://example.com/terms&quot;</span>)</span><br><span class="line">                        .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>()</span><br><span class="line">                                .name(<span class="string">&quot;开发团队&quot;</span>)</span><br><span class="line">                                .email(<span class="string">&quot;dev@example.com&quot;</span>)</span><br><span class="line">                                .url(<span class="string">&quot;https://example.com&quot;</span>))</span><br><span class="line">                        .license(<span class="keyword">new</span> <span class="title class_">License</span>()</span><br><span class="line">                                .name(<span class="string">&quot;Apache 2.0&quot;</span>)</span><br><span class="line">                                .url(<span class="string">&quot;https://www.apache.org/licenses/LICENSE-2.0.html&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-实战示例"><a class="markdownIt-Anchor" href="#三-实战示例"></a> 三、实战示例</h3><h4 id="1-创建实体类"><a class="markdownIt-Anchor" href="#1-创建实体类"></a> 1. 创建实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.media.Schema;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Schema(description = &quot;用户实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户ID&quot;, example = &quot;1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户名&quot;, example = &quot;张三&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户年龄&quot;, example = &quot;25&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户邮箱&quot;, example = &quot;zhangsan@example.com&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-创建控制器"><a class="markdownIt-Anchor" href="#2-创建控制器"></a> 2. 创建控制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.model.User;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.Operation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.Parameter;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.enums.ParameterIn;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.media.Content;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.media.Schema;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.responses.ApiResponse;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.tags.Tag;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/users&quot;)</span></span><br><span class="line"><span class="meta">@Tag(name = &quot;用户管理&quot;, description = &quot;用户CRUD操作的API接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟数据库</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentHashMap&lt;Long, User&gt; users = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        users.put(<span class="number">1L</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1L</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">25</span>, <span class="string">&quot;zhangsan@example.com&quot;</span>));</span><br><span class="line">        users.put(<span class="number">2L</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2L</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">30</span>, <span class="string">&quot;lisi@example.com&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;获取所有用户&quot;, description = &quot;返回系统中所有的用户列表&quot;)</span></span><br><span class="line">    <span class="meta">@ApiResponse(responseCode = &quot;200&quot;, description = &quot;查询成功&quot;,</span></span><br><span class="line"><span class="meta">            content = @Content(schema = @Schema(implementation = User.class)))</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAllUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(users.values());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;根据ID获取用户&quot;, description = &quot;根据用户ID查询用户信息&quot;)</span></span><br><span class="line">    <span class="meta">@ApiResponse(responseCode = &quot;200&quot;, description = &quot;查询成功&quot;)</span></span><br><span class="line">    <span class="meta">@ApiResponse(responseCode = &quot;404&quot;, description = &quot;用户不存在&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">getUserById</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@Parameter(name = &quot;id&quot;, description = &quot;用户ID&quot;, in = ParameterIn.PATH, required = true)</span></span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> users.get(id);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.notFound().build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;创建新用户&quot;, description = &quot;添加新用户到系统中&quot;)</span></span><br><span class="line">    <span class="meta">@ApiResponse(responseCode = &quot;201&quot;, description = &quot;用户创建成功&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">createUser</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@Parameter(description = &quot;用户信息&quot;, required = true)</span></span></span><br><span class="line"><span class="params">            <span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">newId</span> <span class="operator">=</span> users.size() + <span class="number">1L</span>;</span><br><span class="line">        user.setId(newId);</span><br><span class="line">        users.put(newId, user);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(<span class="number">201</span>).body(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;更新用户信息&quot;, description = &quot;根据ID更新用户信息&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">updateUser</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@Parameter(name = &quot;id&quot;, description = &quot;用户ID&quot;, in = ParameterIn.PATH, required = true)</span></span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable</span> Long id,</span></span><br><span class="line"><span class="params">            <span class="meta">@Parameter(description = &quot;更新后的用户信息&quot;, required = true)</span></span></span><br><span class="line"><span class="params">            <span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!users.containsKey(id)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.notFound().build();</span><br><span class="line">        &#125;</span><br><span class="line">        user.setId(id);</span><br><span class="line">        users.put(id, user);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;删除用户&quot;, description = &quot;根据ID删除用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title function_">deleteUser</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@Parameter(name = &quot;id&quot;, description = &quot;用户ID&quot;, in = ParameterIn.PATH, required = true)</span></span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!users.containsKey(id)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.notFound().build();</span><br><span class="line">        &#125;</span><br><span class="line">        users.remove(id);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.noContent().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-常用swagger注解说明"><a class="markdownIt-Anchor" href="#四-常用swagger注解说明"></a> 四、常用Swagger注解说明</h3><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@Tag</code></td><td>用于描述控制器类的作用</td></tr><tr><td><code>@Operation</code></td><td>用于描述接口方法的作用</td></tr><tr><td><code>@Parameter</code></td><td>用于描述方法参数</td></tr><tr><td><code>@Schema</code></td><td>用于描述实体类或属性</td></tr><tr><td><code>@ApiResponse</code></td><td>用于描述接口的响应信息</td></tr><tr><td><code>@RequestBody</code></td><td>用于描述请求体参数</td></tr></tbody></table><h3 id="五-访问swagger-ui"><a class="markdownIt-Anchor" href="#五-访问swagger-ui"></a> 五、访问Swagger UI</h3><p>启动Spring Boot应用后，通过以下地址访问Swagger UI界面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/swagger-ui/index.html</span><br></pre></td></tr></table></figure><p>在这个界面中，你可以：</p><ol><li>查看所有API接口列表</li><li>查看每个接口的详细信息（参数、响应等）</li><li>在线测试API接口</li><li>导出API文档（支持JSON和YAML格式）</li></ol><h3 id="六-生产环境配置"><a class="markdownIt-Anchor" href="#六-生产环境配置"></a> 六、生产环境配置</h3><p>在生产环境中，我们通常需要关闭Swagger文档，可以通过配置文件实现：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application-prod.yml</span></span><br><span class="line"><span class="attr">springdoc:</span></span><br><span class="line">  <span class="attr">api-docs:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">swagger-ui:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>然后在启动时指定生产环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar your-app.jar --spring.profiles.active=prod</span><br></pre></td></tr></table></figure><h3 id="七-其它参数配置案例"><a class="markdownIt-Anchor" href="#七-其它参数配置案例"></a> 七、其它参数配置案例</h3><h4 id="1多个路径参数pathvariable"><a class="markdownIt-Anchor" href="#1多个路径参数pathvariable"></a> 1.多个路径参数（@PathVariable）</h4><p>适用于 URL 路径中包含多个占位符的情况（如 /users/{userId}/orders/{orderId}）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/users/&#123;userId&#125;/orders/&#123;orderId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Order&gt; <span class="title function_">getOrder</span><span class="params">(</span></span><br><span class="line"><span class="params">    // 第一个路径参数：用户ID</span></span><br><span class="line"><span class="params">    <span class="meta">@Parameter(name = &quot;userId&quot;, description = &quot;用户ID&quot;, in = ParameterIn.PATH, required = true)</span></span></span><br><span class="line"><span class="params">    <span class="meta">@PathVariable</span> Long userId,</span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">    // 第二个路径参数：订单ID</span></span><br><span class="line"><span class="params">    <span class="meta">@Parameter(name = &quot;orderId&quot;, description = &quot;订单ID&quot;, in = ParameterIn.PATH, required = true)</span></span></span><br><span class="line"><span class="params">    <span class="meta">@PathVariable</span> Long orderId</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">    <span class="comment">// 业务逻辑：根据 userId 和 orderId 查询订单</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderService.getOrder(userId, orderId);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>路径中用 {参数名} 定义占位符，方法参数通过 @PathVariable 依次绑定；</li><li>参数名需与路径占位符一致，不一致时需指定 @PathVariable(“占位符名称”)。</li></ul><h4 id="2-多个查询参数requestparam"><a class="markdownIt-Anchor" href="#2-多个查询参数requestparam"></a> 2. 多个查询参数（@RequestParam）</h4><p>适用于 URL 中以 ?key=value&amp;key2=value2 形式传递的参数（如 /users?page=1&amp;size=10&amp;keyword=test）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Page&lt;User&gt;&gt; <span class="title function_">getUsers</span><span class="params">(</span></span><br><span class="line"><span class="params">    // 分页参数：页码（默认值<span class="number">1</span>）</span></span><br><span class="line"><span class="params">    <span class="meta">@Parameter(name = &quot;page&quot;, description = &quot;页码&quot;, in = ParameterIn.QUERY, required = false)</span></span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer page,</span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">    // 分页参数：每页条数（默认值<span class="number">10</span>）</span></span><br><span class="line"><span class="params">    <span class="meta">@Parameter(name = &quot;size&quot;, description = &quot;每页条数&quot;, in = ParameterIn.QUERY, required = false)</span></span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> Integer size,</span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">    // 查询关键词（非必填）</span></span><br><span class="line"><span class="params">    <span class="meta">@Parameter(name = &quot;keyword&quot;, description = &quot;查询关键词&quot;, in = ParameterIn.QUERY, required = false)</span></span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam(required = false)</span> String keyword</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">    <span class="comment">// 业务逻辑：分页查询用户</span></span><br><span class="line">    Page&lt;User&gt; userPage = userService.findUsers(page, size, keyword);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(userPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>用 @RequestParam 绑定查询参数，required = false 表示非必填；</li><li>defaultValue 可设置默认值（当参数未传递时使用）。</li></ul><p>需使用 @RequestParam(“file”) MultipartFile file 接收文件，其他普通字段仍用 @RequestParam 或实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/user/upload&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">uploadForm</span><span class="params">(</span></span><br><span class="line"><span class="params">    // 接收文件</span></span><br><span class="line"><span class="params">    <span class="meta">@Parameter(description = &quot;头像文件&quot;)</span></span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam(&quot;avatar&quot;)</span> MultipartFile avatar,</span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">    // 接收普通表单字段（或用实体类接收）</span></span><br><span class="line"><span class="params">    <span class="meta">@Parameter(description = &quot;用户名&quot;)</span></span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam</span> String username</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">    <span class="comment">// 处理文件和表单数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;文件：&quot;</span> + avatar.getOriginalFilename() + <span class="string">&quot;，用户：&quot;</span> + username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>带文件的表单（multipart/form-data），需使用 @RequestParam(“file”) MultipartFile file 接收文件</li></ul><h4 id="4-复杂参数实体类接收"><a class="markdownIt-Anchor" href="#4-复杂参数实体类接收"></a> 4. 复杂参数（实体类接收）</h4><p>当参数较多（如创建用户时需要 username、age、email 等），推荐用实体类统一接收（适用于 POST/PUT 等请求的请求体）。</p><p>1).定义实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span> <span class="comment">// Lombok注解，自动生成getter/setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;用户名&quot;, required = true)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;年龄&quot;, required = false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;邮箱&quot;, required = true)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2).在接口中使用实体类接收参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">createUser</span><span class="params">(</span></span><br><span class="line"><span class="params">    // 请求体参数：用<span class="meta">@RequestBody</span>绑定实体类</span></span><br><span class="line"><span class="params">    <span class="meta">@Parameter(description = &quot;用户信息&quot;)</span></span></span><br><span class="line"><span class="params">    <span class="meta">@RequestBody</span> <span class="meta">@Valid</span> UserDTO userDTO // <span class="meta">@Valid</span>用于参数校验</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">    <span class="comment">// 业务逻辑：创建用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.createUser(userDTO);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).body(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>用 @RequestBody 将请求体（通常是 JSON）转换为实体类对象；</li><li>结合 Swagger 的 @ApiModelProperty 注解，可在文档中展示每个字段的说明；</li><li>@Valid 配合 javax.validation 注解（如 @NotBlank）可实现参数校验。</li></ul><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>通过以上步骤，我们完成了Spring Boot 3与Swagger 3的集成，实现了API文档的自动生成和在线测试功能。Swagger不仅能提高团队协作效率，还能作为API的活文档，随着代码的更新而自动更新。</p><p>在实际项目中，可以根据需要进一步定制Swagger配置，如添加全局参数、配置API分组、设置安全认证等，以满足不同场景的需求。</p>]]></content>
    
    
    <summary type="html">Spring Boot 3 集成 Swagger 3 完整指南</summary>
    
    
    
    <category term="技术" scheme="http://www.formeasy.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Springboot" scheme="http://www.formeasy.cc/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>揭秘Swagger与OpenAPI集成的终极攻略</title>
    <link href="http://www.formeasy.cc/2025/09/07/Springboot/%E6%8F%AD%E7%A7%98Swagger%E4%B8%8EOpenAPI%E9%9B%86%E6%88%90%E7%9A%84%E7%BB%88%E6%9E%81%E6%94%BB%E7%95%A5/"/>
    <id>http://www.formeasy.cc/2025/09/07/Springboot/%E6%8F%AD%E7%A7%98Swagger%E4%B8%8EOpenAPI%E9%9B%86%E6%88%90%E7%9A%84%E7%BB%88%E6%9E%81%E6%94%BB%E7%95%A5/</id>
    <published>2025-09-07T07:52:12.000Z</published>
    <updated>2025-09-07T08:05:00.412Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>演示环境说明：</strong></p><ul><li>开发工具：IDEA 2021.3</li><li>JDK版本： JDK 17（推荐使用 JDK 17 或更高版本，因为 Spring Boot 3.x 系列要求 Java 17，Spring Boot 3.5.4 基于 Spring Framework 6.x 和 Jakarta EE 9，它们都要求至少 JDK 17。）</li><li>Spring Boot版本：3.5.4（于25年7月24日发布）</li><li>Maven版本：3.8.2 （或更高）</li><li>Gradle：（如果使用 Gradle 构建工具的话）：推荐使用 Gradle 7.5 或更高版本，确保与 JDK 17 兼容。</li><li>操作系统：Windows 11</li></ul></blockquote><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 📝 前言</h3><p>哎呀，说起API文档这个话题，我就忍不住要吐槽一下！🙄 作为一个在代码世界里摸爬滚打多年的老司机，我见过太多因为API文档不规范、不及时更新而导致的&quot;血案&quot;了。前端小伙伴拿着过时的文档调接口，后端同学忙着解释&quot;这个参数已经改了&quot;，测试同学更是一脸懵逼地问&quot;这个接口到底返回什么数据？&quot;😂</p><p>不过呢，随着SpringBoot 3.x的横空出世，特别是它与OpenAPI 3.0的完美融合，这些痛点终于有了优雅的解决方案！今天我就来跟大家好好聊聊这个话题，保证让你看完之后直呼&quot;原来如此&quot;！💡</p><h3 id="springboot-3x与openapi的邂逅"><a class="markdownIt-Anchor" href="#springboot-3x与openapi的邂逅"></a> 🎯 SpringBoot 3.x与OpenAPI的邂逅</h3><p>说到SpringBoot 3.x，那可真是个里程碑式的版本啊！😍 它不仅拥抱了Java 17的新特性，还对整个生态进行了大幅度的升级。而OpenAPI（以前叫Swagger Specification）作为API文档的标准规范，在3.0版本中也是焕然一新！</p><h4 id="什么是openapi-30"><a class="markdownIt-Anchor" href="#什么是openapi-30"></a> 🔍 什么是OpenAPI 3.0？</h4><p>OpenAPI 3.0是一个用于描述REST API的规范标准，它就像是给你的API写了一份&quot;身份证&quot;📋。通过这个规范，你可以清晰地描述：</p><ul><li>API的基本信息（版本、描述等）</li><li>接口路径和HTTP方法</li><li>请求参数和响应格式</li><li>认证方式</li><li>错误码定义</li></ul><p>相比于OpenAPI 2.0（Swagger 2.0），3.0版本带来了不少好东西：</p><ul><li><strong>更灵活的数据类型支持</strong>：支持<code>oneOf</code>、<code>anyOf</code>、<code>allOf</code>等复杂类型组合</li><li><strong>更强大的认证机制</strong>：支持OAuth 2.0、OpenID Connect等现代认证方式</li><li><strong>组件复用</strong>：通过<code>components</code>实现更好的复用性</li><li><strong>回调支持</strong>：支持异步API的回调定义</li></ul><h4 id="springboot-3x的变化"><a class="markdownIt-Anchor" href="#springboot-3x的变化"></a> 🤝 SpringBoot 3.x的变化</h4><p>SpringBoot 3.x最大的变化就是全面拥抱了Jakarta EE！🎉 这意呀着：</p><ul><li>包名从<code>javax.*</code>变成了<code>jakarta.*</code></li><li>最低Java版本要求提升到17</li><li>原生支持GraalVM</li><li>更好的可观测性支持</li></ul><p>这些变化对我们集成OpenAPI有什么影响呢？别急，咱们慢慢道来！</p><h3 id="环境搭建让一切准备就绪"><a class="markdownIt-Anchor" href="#环境搭建让一切准备就绪"></a> 🔧 环境搭建：让一切准备就绪</h3><p>俗话说&quot;工欲善其事，必先利其器&quot;！在开始我们的OpenAPI之旅之前，先把环境搭建好。😎</p><h4 id="项目依赖配置"><a class="markdownIt-Anchor" href="#项目依赖配置"></a> 📦 项目依赖配置</h4><p>首先，我们需要在<code>pom.xml</code>中添加相关依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 </span></span></span><br><span class="line"><span class="string"><span class="tag">         http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot3-openapi-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>SpringBoot 3.x OpenAPI Demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>SpringBoot 3.x 集成 OpenAPI 示例项目<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>17<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springdoc.version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">springdoc.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot Web Starter --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot Validation --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- SpringDoc OpenAPI UI --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springdoc.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot Test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>看到这里，可能有小伙伴要问了：&quot;诶，怎么没有看到<code>springfox</code>的依赖啊？&quot;🤔 哈哈，这就是SpringBoot 3.x时代的变化啦！由于SpringFox项目已经很久没有更新了，并且不兼容SpringBoot 3.x的Jakarta命名空间，所以我们选择了更活跃的<code>SpringDoc</code>项目！</p><h4 id="️-基础配置"><a class="markdownIt-Anchor" href="#️-基础配置"></a> ⚙️ 基础配置</h4><p>接下来，在<code>application.yml</code>中添加一些基础配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用基础配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/api</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springboot3-openapi-demo</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SpringDoc OpenAPI 配置</span></span><br><span class="line"><span class="attr">springdoc:</span></span><br><span class="line">  <span class="comment"># 指定OpenAPI 3文档的路径，默认为/v3/api-docs</span></span><br><span class="line">  <span class="attr">api-docs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/v3/api-docs</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Swagger UI路径，默认为/swagger-ui.html</span></span><br><span class="line">  <span class="attr">swagger-ui:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/swagger-ui.html</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 设置UI界面的一些配置</span></span><br><span class="line">    <span class="attr">config-url:</span> <span class="string">/v3/api-docs/swagger-config</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/v3/api-docs</span></span><br><span class="line">    <span class="comment"># 支持尝试调用</span></span><br><span class="line">    <span class="attr">try-it-out-enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 显示操作ID</span></span><br><span class="line">    <span class="attr">display-operation-id:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 显示请求持续时间</span></span><br><span class="line">    <span class="attr">display-request-duration:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 缓存时间设置（毫秒）</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">disabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否显示actuator接口</span></span><br><span class="line">  <span class="attr">show-actuator:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志配置</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.example:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="attr">org.springframework.web:</span> <span class="string">DEBUG</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">console:</span> <span class="string">&#x27;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&#x27;</span></span><br></pre></td></tr></table></figure><p>这个配置可是我精心调试出来的，每一行都有它存在的意义！🎨 比如<code>try-it-out-enabled: true</code>就能让你直接在文档页面测试API，简直不要太爽！</p><h3 id="openapi-30规范详解"><a class="markdownIt-Anchor" href="#openapi-30规范详解"></a> 📖 OpenAPI 3.0规范详解</h3><p>在动手写代码之前，我们先来好好了解一下OpenAPI 3.0的规范结构。毕竟，知己知彼，百战不殆嘛！😄</p><h4 id="️-openapi文档结构"><a class="markdownIt-Anchor" href="#️-openapi文档结构"></a> 🏗️ OpenAPI文档结构</h4><p>一个完整的OpenAPI 3.0文档主要包含以下几个部分：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个OpenAPI文档的基本结构示例</span></span><br><span class="line"><span class="attr">openapi:</span> <span class="number">3.0</span><span class="number">.3</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">&quot;我的牛逼API&quot;</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">&quot;这是一个超级厉害的API文档&quot;</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">  <span class="attr">contact:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&quot;API支持团队&quot;</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">&quot;support@example.com&quot;</span></span><br><span class="line"><span class="attr">servers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">&quot;https://api.example.com/v1&quot;</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&quot;生产环境&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">&quot;https://test-api.example.com/v1&quot;</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&quot;测试环境&quot;</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/users:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">&quot;获取用户列表&quot;</span></span><br><span class="line">      <span class="comment"># ...详细定义</span></span><br><span class="line"><span class="attr">components:</span></span><br><span class="line">  <span class="attr">schemas:</span></span><br><span class="line">    <span class="attr">User:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">id:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">integer</span></span><br><span class="line">        <span class="attr">name:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure><h4 id="核心概念解析"><a class="markdownIt-Anchor" href="#核心概念解析"></a> 🎪 核心概念解析</h4><h5 id="1️⃣-info对象"><a class="markdownIt-Anchor" href="#1️⃣-info对象"></a> 1️⃣ Info对象</h5><p>这就是你的API的&quot;名片&quot;，包含了标题、版本、描述等基本信息。</p><h5 id="2️⃣-servers对象"><a class="markdownIt-Anchor" href="#2️⃣-servers对象"></a> 2️⃣ Servers对象</h5><p>定义API服务器的地址，可以有多个环境（开发、测试、生产）。</p><h5 id="3️⃣-paths对象"><a class="markdownIt-Anchor" href="#3️⃣-paths对象"></a> 3️⃣ Paths对象</h5><p>这是重头戏！定义了所有的API路径和操作方法。</p><h5 id="4️⃣-components对象"><a class="markdownIt-Anchor" href="#4️⃣-components对象"></a> 4️⃣ Components对象</h5><p>这是复用的宝库，可以定义通用的数据模型、响应、参数等。</p><p>说到这里，我想起了刚开始学OpenAPI的时候，被这些概念绕得头晕转向的😵💫。不过别担心，咱们马上就通过实际代码来理解这些概念！</p><h3 id="springdoc-openapi的集成实战"><a class="markdownIt-Anchor" href="#springdoc-openapi的集成实战"></a> 🚀 SpringDoc OpenAPI的集成实战</h3><p>好了，理论知识铺垫够了，是时候撸起袖子干活了！💪 让我们从一个简单的用户管理API开始。</p><h4 id="创建基础配置类"><a class="markdownIt-Anchor" href="#创建基础配置类"></a> 🎯 创建基础配置类</h4><p>首先，我们创建一个OpenAPI配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.OpenAPI;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.info.Contact;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.info.Info;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.info.License;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.servers.Server;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OpenAPI 3.0 配置类</span></span><br><span class="line"><span class="comment"> * 这个类负责定义API文档的基本信息，相当于给我们的API做了个自我介绍！</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 你的名字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024-01-01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenApiConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String applicationName;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建OpenAPI实例</span></span><br><span class="line"><span class="comment">     * 这个方法就像是在给我们的API写个人简历，把最重要的信息都写上！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OpenAPI <span class="title function_">customOpenAPI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OpenAPI</span>()</span><br><span class="line">                <span class="comment">// 设置API基本信息</span></span><br><span class="line">                .info(<span class="keyword">new</span> <span class="title class_">Info</span>()</span><br><span class="line">                        .title(applicationName + <span class="string">&quot; API文档&quot;</span>)</span><br><span class="line">                        .description(<span class="string">&quot;🎉 这是基于SpringBoot 3.x和OpenAPI 3.0构建的超级API文档！&quot;</span> +</span><br><span class="line">                                   <span class="string">&quot;\n\n### 主要功能\n&quot;</span> +</span><br><span class="line">                                   <span class="string">&quot;- 🎯 用户管理：增删改查用户信息\n&quot;</span> +</span><br><span class="line">                                   <span class="string">&quot;- 📝 数据验证：完整的参数校验\n&quot;</span> +</span><br><span class="line">                                   <span class="string">&quot;- 🔒 权限控制：基于角色的访问控制\n&quot;</span> +</span><br><span class="line">                                   <span class="string">&quot;- 📊 统计分析：用户行为数据统计\n\n&quot;</span> +</span><br><span class="line">                                   <span class="string">&quot;### 技术栈\n&quot;</span> +</span><br><span class="line">                                   <span class="string">&quot;- SpringBoot 3.2.0\n&quot;</span> +</span><br><span class="line">                                   <span class="string">&quot;- OpenAPI 3.0.3\n&quot;</span> +</span><br><span class="line">                                   <span class="string">&quot;- Jakarta Validation\n&quot;</span> +</span><br><span class="line">                                   <span class="string">&quot;- SpringDoc 2.2.0&quot;</span>)</span><br><span class="line">                        .version(<span class="string">&quot;v1.0.0&quot;</span>)</span><br><span class="line">                        .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>()</span><br><span class="line">                                .name(<span class="string">&quot;开发团队&quot;</span>)</span><br><span class="line">                                .email(<span class="string">&quot;dev-team@example.com&quot;</span>)</span><br><span class="line">                                .url(<span class="string">&quot;https://www.example.com&quot;</span>))</span><br><span class="line">                        .license(<span class="keyword">new</span> <span class="title class_">License</span>()</span><br><span class="line">                                .name(<span class="string">&quot;MIT License&quot;</span>)</span><br><span class="line">                                .url(<span class="string">&quot;https://opensource.org/licenses/MIT&quot;</span>)))</span><br><span class="line">                <span class="comment">// 设置服务器信息</span></span><br><span class="line">                .servers(List.of(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Server</span>()</span><br><span class="line">                                .url(<span class="string">&quot;http://localhost:8080/api&quot;</span>)</span><br><span class="line">                                .description(<span class="string">&quot;本地开发环境 🏠&quot;</span>),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Server</span>()</span><br><span class="line">                                .url(<span class="string">&quot;https://test-api.example.com&quot;</span>)</span><br><span class="line">                                .description(<span class="string">&quot;测试环境 🧪&quot;</span>),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Server</span>()</span><br><span class="line">                                .url(<span class="string">&quot;https://api.example.com&quot;</span>)</span><br><span class="line">                                .description(<span class="string">&quot;生产环境 🚀&quot;</span>)</span><br><span class="line">                ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这个配置类，是不是感觉很贴心？😊 我特意在描述里用了Markdown格式，这样生成的文档会更加美观！而且还用了emoji，让冷冰冰的技术文档变得生动有趣。</p><h4 id="创建用户实体类"><a class="markdownIt-Anchor" href="#创建用户实体类"></a> 👤 创建用户实体类</h4><p>接下来，我们定义一个用户实体类，这里就能体现OpenAPI的强大之处了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.media.Schema;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.*;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> * 这个类不仅定义了用户的基本属性，还通过注解描述了每个字段的含义</span></span><br><span class="line"><span class="comment"> * 简直就是&quot;人如其名&quot;的完美体现！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Schema(name = &quot;User&quot;, description = &quot;用户信息实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户ID，系统自动生成&quot;, </span></span><br><span class="line"><span class="meta">            example = &quot;1001&quot;, </span></span><br><span class="line"><span class="meta">            accessMode = Schema.AccessMode.READ_ONLY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户名，必须唯一&quot;, </span></span><br><span class="line"><span class="meta">            example = &quot;zhangsan&quot;, </span></span><br><span class="line"><span class="meta">            requiredMode = Schema.RequiredMode.REQUIRED)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;用户名不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Size(min = 3, max = 20, message = &quot;用户名长度必须在3-20字符之间&quot;)</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^[a-zA-Z0-9_]+$&quot;, </span></span><br><span class="line"><span class="meta">             message = &quot;用户名只能包含字母、数字和下划线&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户昵称&quot;, </span></span><br><span class="line"><span class="meta">            example = &quot;张三&quot;)</span></span><br><span class="line">    <span class="meta">@Size(max = 50, message = &quot;昵称长度不能超过50字符&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;邮箱地址&quot;, </span></span><br><span class="line"><span class="meta">            example = &quot;zhangsan@example.com&quot;,</span></span><br><span class="line"><span class="meta">            requiredMode = Schema.RequiredMode.REQUIRED)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;邮箱不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Email(message = &quot;邮箱格式不正确&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;手机号码&quot;, </span></span><br><span class="line"><span class="meta">            example = &quot;13812345678&quot;)</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^1[3-9]\\d&#123;9&#125;$&quot;, </span></span><br><span class="line"><span class="meta">             message = &quot;手机号码格式不正确&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户年龄&quot;, </span></span><br><span class="line"><span class="meta">            example = &quot;25&quot;, </span></span><br><span class="line"><span class="meta">            minimum = &quot;1&quot;, </span></span><br><span class="line"><span class="meta">            maximum = &quot;150&quot;)</span></span><br><span class="line">    <span class="meta">@Min(value = 1, message = &quot;年龄必须大于0&quot;)</span></span><br><span class="line">    <span class="meta">@Max(value = 150, message = &quot;年龄不能超过150&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户性别&quot;, </span></span><br><span class="line"><span class="meta">            example = &quot;MALE&quot;, </span></span><br><span class="line"><span class="meta">            allowableValues = &#123;&quot;MALE&quot;, &quot;FEMALE&quot;, &quot;UNKNOWN&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> Gender gender;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户状态&quot;, </span></span><br><span class="line"><span class="meta">            example = &quot;ACTIVE&quot;,</span></span><br><span class="line"><span class="meta">            allowableValues = &#123;&quot;ACTIVE&quot;, &quot;INACTIVE&quot;, &quot;BANNED&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> UserStatus status;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;创建时间&quot;, </span></span><br><span class="line"><span class="meta">            example = &quot;2024-01-01 12:00:00&quot;,</span></span><br><span class="line"><span class="meta">            accessMode = Schema.AccessMode.READ_ONLY)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;最后更新时间&quot;, </span></span><br><span class="line"><span class="meta">            example = &quot;2024-01-01 12:00:00&quot;,</span></span><br><span class="line"><span class="meta">            accessMode = Schema.AccessMode.READ_ONLY)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 枚举类定义</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;性别枚举&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Gender</span> &#123;</span><br><span class="line">        <span class="meta">@Schema(description = &quot;男性&quot;)</span></span><br><span class="line">        MALE,</span><br><span class="line">        <span class="meta">@Schema(description = &quot;女性&quot;)</span> </span><br><span class="line">        FEMALE,</span><br><span class="line">        <span class="meta">@Schema(description = &quot;未知&quot;)</span></span><br><span class="line">        UNKNOWN</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户状态枚举&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UserStatus</span> &#123;</span><br><span class="line">        <span class="meta">@Schema(description = &quot;正常状态&quot;)</span></span><br><span class="line">        ACTIVE,</span><br><span class="line">        <span class="meta">@Schema(description = &quot;非活跃状态&quot;)</span></span><br><span class="line">        INACTIVE,</span><br><span class="line">        <span class="meta">@Schema(description = &quot;被封禁状态&quot;)</span></span><br><span class="line">        BANNED</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造函数、getter、setter方法...</span></span><br><span class="line">    <span class="comment">// 这里省略了这些方法，实际开发中记得加上哦！</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String username, String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">        <span class="built_in">this</span>.status = UserStatus.ACTIVE;</span><br><span class="line">        <span class="built_in">this</span>.createTime = LocalDateTime.now();</span><br><span class="line">        <span class="built_in">this</span>.updateTime = LocalDateTime.now();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter and setter methods...</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123; <span class="built_in">this</span>.id = id; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123; <span class="keyword">return</span> username; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123; <span class="built_in">this</span>.username = username; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNickname</span><span class="params">()</span> &#123; <span class="keyword">return</span> nickname; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNickname</span><span class="params">(String nickname)</span> &#123; <span class="built_in">this</span>.nickname = nickname; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123; <span class="keyword">return</span> email; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123; <span class="built_in">this</span>.email = email; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhone</span><span class="params">()</span> &#123; <span class="keyword">return</span> phone; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(String phone)</span> &#123; <span class="built_in">this</span>.phone = phone; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123; <span class="built_in">this</span>.age = age; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Gender <span class="title function_">getGender</span><span class="params">()</span> &#123; <span class="keyword">return</span> gender; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(Gender gender)</span> &#123; <span class="built_in">this</span>.gender = gender; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> UserStatus <span class="title function_">getStatus</span><span class="params">()</span> &#123; <span class="keyword">return</span> status; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(UserStatus status)</span> &#123; <span class="built_in">this</span>.status = status; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> LocalDateTime <span class="title function_">getCreateTime</span><span class="params">()</span> &#123; <span class="keyword">return</span> createTime; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCreateTime</span><span class="params">(LocalDateTime createTime)</span> &#123; <span class="built_in">this</span>.createTime = createTime; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> LocalDateTime <span class="title function_">getUpdateTime</span><span class="params">()</span> &#123; <span class="keyword">return</span> updateTime; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUpdateTime</span><span class="params">(LocalDateTime updateTime)</span> &#123; <span class="built_in">this</span>.updateTime = updateTime; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哇，这个实体类是不是很丰富？😍 通过<code>@Schema</code>注解，我们不仅描述了每个字段的含义，还提供了示例值、验证规则等信息。这样生成的API文档就会非常详细和友好！</p><h4 id="️-创建通用响应类"><a class="markdownIt-Anchor" href="#️-创建通用响应类"></a> 🎛️ 创建通用响应类</h4><p>为了让API响应更加规范，我们定义一个通用的响应包装类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.media.Schema;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一响应结果封装类</span></span><br><span class="line"><span class="comment"> * 这个类就像是给所有API响应穿了一套统一的&quot;制服&quot;，让它们看起来整整齐齐的！</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 响应数据的类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Schema(name = &quot;ApiResponse&quot;, description = &quot;统一响应结果&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiResponse</span>&lt;T&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;响应状态码&quot;, example = &quot;200&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;响应消息&quot;, example = &quot;操作成功&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;响应数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;响应时间&quot;, example = &quot;2024-01-01 12:00:00&quot;)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime timestamp;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 私有构造函数，通过静态方法创建实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ApiResponse</span><span class="params">(Integer code, String message, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.timestamp = LocalDateTime.now();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建成功响应</span></span><br><span class="line"><span class="comment">     * 这个方法就像是在说：&quot;耶！一切都很顺利！&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiResponse&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiResponse</span>&lt;&gt;(<span class="number">200</span>, <span class="string">&quot;操作成功&quot;</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiResponse&lt;T&gt; <span class="title function_">success</span><span class="params">(String message, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiResponse</span>&lt;&gt;(<span class="number">200</span>, message, data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建失败响应</span></span><br><span class="line"><span class="comment">     * 这个方法就像是在说：&quot;哎呀，出了点小问题...&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiResponse&lt;T&gt; <span class="title function_">error</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiResponse</span>&lt;&gt;(code, message, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiResponse&lt;T&gt; <span class="title function_">error</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiResponse</span>&lt;&gt;(<span class="number">500</span>, message, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数验证失败响应</span></span><br><span class="line"><span class="comment">     * 专门处理那些&quot;不听话&quot;的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiResponse&lt;T&gt; <span class="title function_">badRequest</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiResponse</span>&lt;&gt;(<span class="number">400</span>, message, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 资源未找到响应</span></span><br><span class="line"><span class="comment">     * 当你要找的东西&quot;人间蒸发&quot;了的时候用这个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiResponse&lt;T&gt; <span class="title function_">notFound</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiResponse</span>&lt;&gt;(<span class="number">404</span>, message, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter methods</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123; <span class="keyword">return</span> code; &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123; <span class="keyword">return</span> message; &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123; <span class="keyword">return</span> data; &#125;</span><br><span class="line">    <span class="keyword">public</span> LocalDateTime <span class="title function_">getTimestamp</span><span class="params">()</span> &#123; <span class="keyword">return</span> timestamp; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断是否成功的便利方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSuccess</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code != <span class="literal">null</span> &amp;&amp; code == <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个响应类设计得还不错吧？😏 它不仅提供了统一的响应格式，还通过静态方法让创建响应变得超级简单！</p><h3 id="定制化配置让文档更贴心"><a class="markdownIt-Anchor" href="#定制化配置让文档更贴心"></a> 🎨 定制化配置：让文档更贴心</h3><p>现在我们来创建一个功能完整的用户控制器，这里可是展现OpenAPI威力的地方！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.common.ApiResponse;</span><br><span class="line"><span class="keyword">import</span> com.example.entity.User;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.Operation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.Parameter;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.Parameters;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.enums.ParameterIn;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.media.Content;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.media.ExampleObject;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.media.Schema;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.responses.ApiResponses;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.responses.ApiResponse as SwaggerApiResponse;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.tags.Tag;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Min;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户管理控制器</span></span><br><span class="line"><span class="comment"> * 这个控制器就像是一个用户管理的&quot;大管家&quot;，负责处理所有用户相关的请求</span></span><br><span class="line"><span class="comment"> * 每个方法都经过精心设计，让API文档变得超级友好！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="meta">@Tag(name = &quot;用户管理&quot;, description = &quot;提供用户的增删改查功能，支持批量操作和高级查询 🎯&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 模拟数据库，实际项目中应该注入Service</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;User&gt; userDatabase = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">idCounter</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造函数中初始化一些测试数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserController</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 添加一些测试数据，让文档演示更生动</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;admin@example.com&quot;</span>);</span><br><span class="line">        user1.setId(idCounter++);</span><br><span class="line">        user1.setNickname(<span class="string">&quot;超级管理员&quot;</span>);</span><br><span class="line">        user1.setAge(<span class="number">30</span>);</span><br><span class="line">        user1.setGender(User.Gender.MALE);</span><br><span class="line">        user1.setPhone(<span class="string">&quot;13812345678&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;alice&quot;</span>, <span class="string">&quot;alice@example.com&quot;</span>);</span><br><span class="line">        user2.setId(idCounter++);</span><br><span class="line">        user2.setNickname(<span class="string">&quot;小爱同学&quot;</span>);</span><br><span class="line">        user2.setAge(<span class="number">25</span>);</span><br><span class="line">        user2.setGender(User.Gender.FEMALE);</span><br><span class="line">        user2.setPhone(<span class="string">&quot;13987654321&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        userDatabase.add(user1);</span><br><span class="line">        userDatabase.add(user2);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户列表</span></span><br><span class="line"><span class="comment">     * 这个接口支持分页和搜索，功能很强大哦！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@Operation(</span></span><br><span class="line"><span class="meta">            summary = &quot;获取用户列表&quot;,</span></span><br><span class="line"><span class="meta">            description = &quot;支持分页查询和关键字搜索的用户列表接口。&quot; +</span></span><br><span class="line"><span class="meta">                         &quot;\n\n**功能特点：**\n&quot; +</span></span><br><span class="line"><span class="meta">                         &quot;- 🔍 支持用户名和昵称模糊搜索\n&quot; +</span></span><br><span class="line"><span class="meta">                         &quot;- 📄 支持分页查询，避免数据量过大\n&quot; +</span></span><br><span class="line"><span class="meta">                         &quot;- ⚡ 查询性能优化，响应速度快\n&quot; +</span></span><br><span class="line"><span class="meta">                         &quot;- 📊 返回总数信息，方便前端分页处理&quot;,</span></span><br><span class="line"><span class="meta">            tags = &#123;&quot;用户查询&quot;&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@Parameters(&#123;</span></span><br><span class="line"><span class="meta">            @Parameter(</span></span><br><span class="line"><span class="meta">                    name = &quot;page&quot;,</span></span><br><span class="line"><span class="meta">                    description = &quot;页码，从1开始&quot;,</span></span><br><span class="line"><span class="meta">                    example = &quot;1&quot;,</span></span><br><span class="line"><span class="meta">                    in = ParameterIn.QUERY,</span></span><br><span class="line"><span class="meta">                    schema = @Schema(type = &quot;integer&quot;, minimum = &quot;1&quot;, defaultValue = &quot;1&quot;)</span></span><br><span class="line"><span class="meta">            ),</span></span><br><span class="line"><span class="meta">            @Parameter(</span></span><br><span class="line"><span class="meta">                    name = &quot;size&quot;, </span></span><br><span class="line"><span class="meta">                    description = &quot;每页大小，最大100&quot;,</span></span><br><span class="line"><span class="meta">                    example = &quot;10&quot;,</span></span><br><span class="line"><span class="meta">                    in = ParameterIn.QUERY,</span></span><br><span class="line"><span class="meta">                    schema = @Schema(type = &quot;integer&quot;, minimum = &quot;1&quot;, maximum = &quot;100&quot;, defaultValue = &quot;10&quot;)</span></span><br><span class="line"><span class="meta">            ),</span></span><br><span class="line"><span class="meta">            @Parameter(</span></span><br><span class="line"><span class="meta">                    name = &quot;keyword&quot;,</span></span><br><span class="line"><span class="meta">                    description = &quot;搜索关键字，支持用户名和昵称模糊搜索&quot;,</span></span><br><span class="line"><span class="meta">                    example = &quot;张三&quot;,</span></span><br><span class="line"><span class="meta">                    in = ParameterIn.QUERY,</span></span><br><span class="line"><span class="meta">                    schema = @Schema(type = &quot;string&quot;)</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@ApiResponses(&#123;</span></span><br><span class="line"><span class="meta">            @SwaggerApiResponse(</span></span><br><span class="line"><span class="meta">                    responseCode = &quot;200&quot;,</span></span><br><span class="line"><span class="meta">                    description = &quot;查询成功&quot;,</span></span><br><span class="line"><span class="meta">                    content = @Content(</span></span><br><span class="line"><span class="meta">                            mediaType = &quot;application/json&quot;,</span></span><br><span class="line"><span class="meta">                            schema = @Schema(implementation = ApiResponse.class),</span></span><br><span class="line"><span class="meta">                            examples = @ExampleObject(</span></span><br><span class="line"><span class="meta">                                    name = &quot;成功示例&quot;,</span></span><br><span class="line"><span class="meta">                                    summary = &quot;查询成功的响应示例&quot;,</span></span><br><span class="line"><span class="meta">                                    value = &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                                            &#123;</span></span><br><span class="line"><span class="meta">                                              &quot;code&quot;: 200,</span></span><br><span class="line"><span class="meta">                                              &quot;message&quot;: &quot;查询成功&quot;,</span></span><br><span class="line"><span class="meta">                                              &quot;data&quot;: &#123;</span></span><br><span class="line"><span class="meta">                                                &quot;list&quot;: [</span></span><br><span class="line"><span class="meta">                                                  &#123;</span></span><br><span class="line"><span class="meta">                                                    &quot;id&quot;: 1,</span></span><br><span class="line"><span class="meta">                                                    &quot;username&quot;: &quot;admin&quot;,</span></span><br><span class="line"><span class="meta">                                                    &quot;nickname&quot;: &quot;超级管理员&quot;,</span></span><br><span class="line"><span class="meta">                                                    &quot;email&quot;: &quot;admin@example.com&quot;,</span></span><br><span class="line"><span class="meta">                                                    &quot;age&quot;: 30,</span></span><br><span class="line"><span class="meta">                                                    &quot;gender&quot;: &quot;MALE&quot;,</span></span><br><span class="line"><span class="meta">                                                    &quot;status&quot;: &quot;ACTIVE&quot;,</span></span><br><span class="line"><span class="meta">                                                    &quot;createTime&quot;: &quot;2024-01-01 12:00:00&quot;</span></span><br><span class="line"><span class="meta">                                                  &#125;</span></span><br><span class="line"><span class="meta">                                                ],</span></span><br><span class="line"><span class="meta">                                                &quot;total&quot;: 1,</span></span><br><span class="line"><span class="meta">                                                &quot;page&quot;: 1,</span></span><br><span class="line"><span class="meta">                                                &quot;size&quot;: 10</span></span><br><span class="line"><span class="meta">                                              &#125;,</span></span><br><span class="line"><span class="meta">                                              &quot;timestamp&quot;: &quot;2024-01-01 12:00:00&quot;</span></span><br><span class="line"><span class="meta">                                            &#125;</span></span><br><span class="line"><span class="meta">                                            &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                            )</span></span><br><span class="line"><span class="meta">                    )</span></span><br><span class="line"><span class="meta">            ),</span></span><br><span class="line"><span class="meta">            @SwaggerApiResponse(</span></span><br><span class="line"><span class="meta">                    responseCode = &quot;400&quot;,</span></span><br><span class="line"><span class="meta">                    description = &quot;参数错误&quot;,</span></span><br><span class="line"><span class="meta">                    content = @Content(</span></span><br><span class="line"><span class="meta">                            mediaType = &quot;application/json&quot;,</span></span><br><span class="line"><span class="meta">                            schema = @Schema(implementation = ApiResponse.class)</span></span><br><span class="line"><span class="meta">                    )</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ApiResponse&lt;PageResult&lt;User&gt;&gt;&gt; <span class="title function_">getUsers</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> <span class="meta">@Min(value = 1, message = &quot;页码必须大于0&quot;)</span> Integer page,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> <span class="meta">@Min(value = 1, message = &quot;页大小必须大于0&quot;)</span> Integer size,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(required = false)</span> String keyword)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 模拟分页查询逻辑</span></span><br><span class="line">        List&lt;User&gt; filteredUsers = userDatabase;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 关键字搜索</span></span><br><span class="line">        <span class="keyword">if</span> (keyword != <span class="literal">null</span> &amp;&amp; !keyword.trim().isEmpty()) &#123;</span><br><span class="line">            filteredUsers = userDatabase.stream()</span><br><span class="line">                    .filter(user -&gt; user.getUsername().contains(keyword) || </span><br><span class="line">                                   (user.getNickname() != <span class="literal">null</span> &amp;&amp; user.getNickname().contains(keyword)))</span><br><span class="line">                    .toList();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 分页处理</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> (page - <span class="number">1</span>) * size;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> Math.min(start + size, filteredUsers.size());</span><br><span class="line">        List&lt;User&gt; pagedUsers = filteredUsers.subList(start, end);</span><br><span class="line">        </span><br><span class="line">        PageResult&lt;User&gt; result = <span class="keyword">new</span> <span class="title class_">PageResult</span>&lt;&gt;(pagedUsers, (<span class="type">long</span>) filteredUsers.size(), page, size);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(ApiResponse.success(<span class="string">&quot;查询成功&quot;</span>, result));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID获取用户详情</span></span><br><span class="line"><span class="comment">     * 通过用户ID获取详细信息，找不到会返回404</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(</span></span><br><span class="line"><span class="meta">            summary = &quot;获取用户详情&quot;,</span></span><br><span class="line"><span class="meta">            description = &quot;根据用户ID获取用户的详细信息。\n\n&quot; +</span></span><br><span class="line"><span class="meta">                         &quot;**注意事项：**\n&quot; +</span></span><br><span class="line"><span class="meta">                         &quot;- 用户ID必须是有效的正整数\n&quot; +</span></span><br><span class="line"><span class="meta">                         &quot;- 如果用户不存在，会返回404错误\n&quot; +</span></span><br><span class="line"><span class="meta">                         &quot;- 返回的数据包含用户的所有可见字段&quot;,</span></span><br><span class="line"><span class="meta">            tags = &#123;&quot;用户查询&quot;&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@Parameter(</span></span><br><span class="line"><span class="meta">            name = &quot;id&quot;,</span></span><br><span class="line"><span class="meta">            description = &quot;用户ID&quot;,</span></span><br><span class="line"><span class="meta">            example = &quot;1&quot;,</span></span><br><span class="line"><span class="meta">            required = true,</span></span><br><span class="line"><span class="meta">            in = ParameterIn.PATH,</span></span><br><span class="line"><span class="meta">            schema = @Schema(type = &quot;integer&quot;, format = &quot;int64&quot;, minimum = &quot;1&quot;)</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@ApiResponses(&#123;</span></span><br><span class="line"><span class="meta">            @SwaggerApiResponse(</span></span><br><span class="line"><span class="meta">                    responseCode = &quot;200&quot;,</span></span><br><span class="line"><span class="meta">                    description = &quot;获取成功&quot;,</span></span><br><span class="line"><span class="meta">                    content = @Content(</span></span><br><span class="line"><span class="meta">                            mediaType = &quot;application/json&quot;,</span></span><br><span class="line"><span class="meta">                            schema = @Schema(implementation = ApiResponse.class),</span></span><br><span class="line"><span class="meta">                            examples = @ExampleObject(</span></span><br><span class="line"><span class="meta">                                    name = &quot;用户详情&quot;,</span></span><br><span class="line"><span class="meta">                                    value = &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                                            &#123;</span></span><br><span class="line"><span class="meta">                                              &quot;code&quot;: 200,</span></span><br><span class="line"><span class="meta">                                              &quot;message&quot;: &quot;获取成功&quot;,</span></span><br><span class="line"><span class="meta">                                              &quot;data&quot;: &#123;</span></span><br><span class="line"><span class="meta">                                                &quot;id&quot;: 1,</span></span><br><span class="line"><span class="meta">                                                &quot;username&quot;: &quot;admin&quot;,</span></span><br><span class="line"><span class="meta">                                                &quot;nickname&quot;: &quot;超级管理员&quot;,</span></span><br><span class="line"><span class="meta">                                                &quot;email&quot;: &quot;admin@example.com&quot;,</span></span><br><span class="line"><span class="meta">                                                &quot;phone&quot;: &quot;13812345678&quot;,</span></span><br><span class="line"><span class="meta">                                                &quot;age&quot;: 30,</span></span><br><span class="line"><span class="meta">                                                &quot;gender&quot;: &quot;MALE&quot;,</span></span><br><span class="line"><span class="meta">                                                &quot;status&quot;: &quot;ACTIVE&quot;,</span></span><br><span class="line"><span class="meta">                                                &quot;createTime&quot;: &quot;2024-01-01 12:00:00&quot;,</span></span><br><span class="line"><span class="meta">                                                &quot;updateTime&quot;: &quot;2024-01-01 12:00:00&quot;</span></span><br><span class="line"><span class="meta">                                              &#125;,</span></span><br><span class="line"><span class="meta">                                              &quot;timestamp&quot;: &quot;2024-01-01 12:00:00&quot;</span></span><br><span class="line"><span class="meta">                                            &#125;</span></span><br><span class="line"><span class="meta">                                            &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                            )</span></span><br><span class="line"><span class="meta">                    )</span></span><br><span class="line"><span class="meta">            ),</span></span><br><span class="line"><span class="meta">            @SwaggerApiResponse(</span></span><br><span class="line"><span class="meta">                    responseCode = &quot;404&quot;,</span></span><br><span class="line"><span class="meta">                    description = &quot;用户不存在&quot;,</span></span><br><span class="line"><span class="meta">                    content = @Content(</span></span><br><span class="line"><span class="meta">                            mediaType = &quot;application/json&quot;,</span></span><br><span class="line"><span class="meta">                            examples = @ExampleObject(</span></span><br><span class="line"><span class="meta">                                    value = &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                                            &#123;</span></span><br><span class="line"><span class="meta">                                              &quot;code&quot;: 404,</span></span><br><span class="line"><span class="meta">                                              &quot;message&quot;: &quot;用户不存在&quot;,</span></span><br><span class="line"><span class="meta">                                              &quot;data&quot;: null,</span></span><br><span class="line"><span class="meta">                                              &quot;timestamp&quot;: &quot;2024-01-01 12:00:00&quot;</span></span><br><span class="line"><span class="meta">                                            &#125;</span></span><br><span class="line"><span class="meta">                                            &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                            )</span></span><br><span class="line"><span class="meta">                    )</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ApiResponse&lt;User&gt;&gt; <span class="title function_">getUserById</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable</span> <span class="meta">@NotNull(message = &quot;用户ID不能为空&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        Optional&lt;User&gt; userOpt = userDatabase.stream()</span><br><span class="line">                .filter(user -&gt; user.getId().equals(id))</span><br><span class="line">                .findFirst();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (userOpt.isPresent()) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.ok(ApiResponse.success(<span class="string">&quot;获取成功&quot;</span>, userOpt.get()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND)</span><br><span class="line">                    .body(ApiResponse.notFound(<span class="string">&quot;用户不存在&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建新用户</span></span><br><span class="line"><span class="comment">     * 这个接口可以创建一个全新的用户，支持完整的数据验证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@Operation(</span></span><br><span class="line"><span class="meta">            summary = &quot;创建用户&quot;,</span></span><br><span class="line"><span class="meta">            description = &quot;创建一个新的用户账户。\n\n&quot; +</span></span><br><span class="line"><span class="meta">                         &quot;**验证规则：**\n&quot; +</span></span><br><span class="line"><span class="meta">                         &quot;- 用户名：3-20字符，只能包含字母、数字和下划线\n&quot; +</span></span><br><span class="line"><span class="meta">                         &quot;- 邮箱：必须是有效的邮箱格式\n&quot; +</span></span><br><span class="line"><span class="meta">                         &quot;- 手机号：符合中国大陆手机号格式\n&quot; +</span></span><br><span class="line"><span class="meta">                         &quot;- 年龄：1-150之间的整数\n\n&quot; +</span></span><br><span class="line"><span class="meta">                         &quot;**注意：**\n&quot; +</span></span><br><span class="line"><span class="meta">                         &quot;- 用户名和邮箱必须唯一\n&quot; +</span></span><br><span class="line"><span class="meta">                         &quot;- 创建成功后会自动设置为ACTIVE状态\n&quot; +</span></span><br><span class="line"><span class="meta">                         &quot;- 系统会自动设置创建时间和更新时间&quot;,</span></span><br><span class="line"><span class="meta">            tags = &#123;&quot;用户管理&quot;&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@io</span>.swagger.v3.oas.annotations.parameters.RequestBody(</span><br><span class="line">            description = <span class="string">&quot;用户信息&quot;</span>,</span><br><span class="line">            required = <span class="literal">true</span>,</span><br><span class="line">            content = <span class="meta">@Content(</span></span><br><span class="line"><span class="meta">                    mediaType = &quot;application/json&quot;,</span></span><br><span class="line"><span class="meta">                    schema = @Schema(implementation = User.class),</span></span><br><span class="line"><span class="meta">                    examples = &#123;</span></span><br><span class="line"><span class="meta">                            @ExampleObject(</span></span><br><span class="line"><span class="meta">                                    name = &quot;基础用户&quot;,</span></span><br><span class="line"><span class="meta">                                    summary = &quot;创建基础用户&quot;,</span></span><br><span class="line"><span class="meta">                                    value = &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                                            &#123;</span></span><br><span class="line"><span class="meta">                                              &quot;username&quot;: &quot;newuser&quot;,</span></span><br><span class="line"><span class="meta">                                              &quot;nickname&quot;: &quot;新用户&quot;,</span></span><br><span class="line"><span class="meta">                                              &quot;email&quot;: &quot;newuser@example.com&quot;,</span></span><br><span class="line"><span class="meta">                                              &quot;phone&quot;: &quot;13911112222&quot;,</span></span><br><span class="line"><span class="meta">                                              &quot;age&quot;: 28,</span></span><br><span class="line"><span class="meta">                                              &quot;gender&quot;: &quot;FEMALE&quot;</span></span><br><span class="line"><span class="meta">                                            &#125;</span></span><br><span class="line"><span class="meta">                                            &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                            ),</span></span><br><span class="line"><span class="meta">                            @ExampleObject(</span></span><br><span class="line"><span class="meta">                                    name = &quot;完整用户&quot;,</span></span><br><span class="line"><span class="meta">                                    summary = &quot;创建完整信息用户&quot;,</span></span><br><span class="line"><span class="meta">                                    value = &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                                            &#123;</span></span><br><span class="line"><span class="meta">                                              &quot;username&quot;: &quot;fulluser&quot;,</span></span><br><span class="line"><span class="meta">                                              &quot;nickname&quot;: &quot;完整用户&quot;,</span></span><br><span class="line"><span class="meta">                                              &quot;email&quot;: &quot;fulluser@example.com&quot;,</span></span><br><span class="line"><span class="meta">                                              &quot;phone&quot;: &quot;13800138000&quot;,</span></span><br><span class="line"><span class="meta">                                              &quot;age&quot;: 35,</span></span><br><span class="line"><span class="meta">                                              &quot;gender&quot;: &quot;MALE&quot;</span></span><br><span class="line"><span class="meta">                                            &#125;</span></span><br><span class="line"><span class="meta">                                            &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                            )</span></span><br><span class="line"><span class="meta">                    &#125;</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line">    )</span><br><span class="line">    <span class="meta">@ApiResponses(&#123;</span></span><br><span class="line"><span class="meta">            @SwaggerApiResponse(</span></span><br><span class="line"><span class="meta">                    responseCode = &quot;201&quot;,</span></span><br><span class="line"><span class="meta">                    description = &quot;创建成功&quot;,</span></span><br><span class="line"><span class="meta">                    content = @Content(</span></span><br><span class="line"><span class="meta">                            mediaType = &quot;application/json&quot;,</span></span><br><span class="line"><span class="meta">                            schema = @Schema(implementation = ApiResponse.class)</span></span><br><span class="line"><span class="meta">                    )</span></span><br><span class="line"><span class="meta">            ),</span></span><br><span class="line"><span class="meta">            @SwaggerApiResponse(</span></span><br><span class="line"><span class="meta">                    responseCode = &quot;400&quot;,</span></span><br><span class="line"><span class="meta">                    description = &quot;参数验证失败&quot;,</span></span><br><span class="line"><span class="meta">                    content = @Content(</span></span><br><span class="line"><span class="meta">                            mediaType = &quot;application/json&quot;,</span></span><br><span class="line"><span class="meta">                            examples = @ExampleObject(</span></span><br><span class="line"><span class="meta">                                    value = &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                                            &#123;</span></span><br><span class="line"><span class="meta">                                              &quot;code&quot;: 400,</span></span><br><span class="line"><span class="meta">                                              &quot;message&quot;: &quot;用户名已存在&quot;,</span></span><br><span class="line"><span class="meta">                                              &quot;data&quot;: null,</span></span><br><span class="line"><span class="meta">                                              &quot;timestamp&quot;: &quot;2024-01-01 12:00:00&quot;</span></span><br><span class="line"><span class="meta">                                            &#125;</span></span><br><span class="line"><span class="meta">                                            &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                            )</span></span><br><span class="line"><span class="meta">                    )</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ApiResponse&lt;User&gt;&gt; <span class="title function_">createUser</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查用户名是否已存在</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">usernameExists</span> <span class="operator">=</span> userDatabase.stream()</span><br><span class="line">                .anyMatch(u -&gt; u.getUsername().equals(user.getUsername()));</span><br><span class="line">        <span class="keyword">if</span> (usernameExists) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST)</span><br><span class="line">                    .body(ApiResponse.badRequest(<span class="string">&quot;用户名已存在&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查邮箱是否已存在</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">emailExists</span> <span class="operator">=</span> userDatabase.stream()</span><br><span class="line">                .anyMatch(u -&gt; u.getEmail().equals(user.getEmail()));</span><br><span class="line">        <span class="keyword">if</span> (emailExists) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST)</span><br><span class="line">                    .body(ApiResponse.badRequest(<span class="string">&quot;邮箱已存在&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置用户信息</span></span><br><span class="line">        user.setId(idCounter++);</span><br><span class="line">        user.setStatus(User.UserStatus.ACTIVE);</span><br><span class="line">        user.setCreateTime(LocalDateTime.now());</span><br><span class="line">        user.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 保存到&quot;数据库&quot;</span></span><br><span class="line">        userDatabase.add(user);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED)</span><br><span class="line">                .body(ApiResponse.success(<span class="string">&quot;用户创建成功&quot;</span>, user));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分页结果包装类</span></span><br><span class="line">    <span class="meta">@Schema(name = &quot;PageResult&quot;, description = &quot;分页查询结果&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">PageResult</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="meta">@Schema(description = &quot;数据列表&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> List&lt;T&gt; list;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Schema(description = &quot;总记录数&quot;, example = &quot;100&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> Long total;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Schema(description = &quot;当前页码&quot;, example = &quot;1&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> Integer page;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Schema(description = &quot;每页大小&quot;, example = &quot;10&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> Integer size;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Schema(description = &quot;总页数&quot;, example = &quot;10&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> Integer totalPages;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Schema(description = &quot;是否有下一页&quot;, example = &quot;true&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> Boolean hasNext;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Schema(description = &quot;是否有上一页&quot;, example = &quot;false&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> Boolean hasPrev;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">PageResult</span><span class="params">(List&lt;T&gt; list, Long total, Integer page, Integer size)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.list = list;</span><br><span class="line">            <span class="built_in">this</span>.total = total;</span><br><span class="line">            <span class="built_in">this</span>.page = page;</span><br><span class="line">            <span class="built_in">this</span>.size = size;</span><br><span class="line">            <span class="built_in">this</span>.totalPages = (<span class="type">int</span>) Math.ceil((<span class="type">double</span>) total / size);</span><br><span class="line">            <span class="built_in">this</span>.hasNext = page &lt; totalPages;</span><br><span class="line">            <span class="built_in">this</span>.hasPrev = page &gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// getter methods</span></span><br><span class="line">        <span class="keyword">public</span> List&lt;T&gt; <span class="title function_">getList</span><span class="params">()</span> &#123; <span class="keyword">return</span> list; &#125;</span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">getTotal</span><span class="params">()</span> &#123; <span class="keyword">return</span> total; &#125;</span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">getPage</span><span class="params">()</span> &#123; <span class="keyword">return</span> page; &#125;</span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">getSize</span><span class="params">()</span> &#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">getTotalPages</span><span class="params">()</span> &#123; <span class="keyword">return</span> totalPages; &#125;</span><br><span class="line">        <span class="keyword">public</span> Boolean <span class="title function_">getHasNext</span><span class="params">()</span> &#123; <span class="keyword">return</span> hasNext; &#125;</span><br><span class="line">        <span class="keyword">public</span> Boolean <span class="title function_">getHasPrev</span><span class="params">()</span> &#123; <span class="keyword">return</span> hasPrev; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哇塞，这个控制器是不是很详细？😄 每个接口都有完整的文档说明、参数描述、响应示例等。通过这样的注解配置，生成的API文档会非常专业和友好！</p><h3 id="高级特性探索"><a class="markdownIt-Anchor" href="#高级特性探索"></a> 💎 高级特性探索</h3><p>好了，基础功能我们已经搞定了，现在让我们来探索一些更高级的特性！这些功能可是让我当初惊呼&quot;卧槽，还能这样玩？&quot;的存在！🤯</p><h4 id="安全认证集成"><a class="markdownIt-Anchor" href="#安全认证集成"></a> 🔐 安全认证集成</h4><p>在实际项目中，API安全是不可忽视的。让我们看看如何在OpenAPI中集成JWT认证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.Components;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.OpenAPI;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.security.SecurityRequirement;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.security.SecurityScheme;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * API安全配置</span></span><br><span class="line"><span class="comment"> * 这个配置让我们的API文档支持JWT认证，再也不用担心接口裸奔了！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenApiSecurityConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BEARER_TOKEN_SECURITY_SCHEME</span> <span class="operator">=</span> <span class="string">&quot;bearerAuth&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OpenAPI <span class="title function_">openAPIWithSecurity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OpenAPI</span>()</span><br><span class="line">                .addSecurityItem(<span class="keyword">new</span> <span class="title class_">SecurityRequirement</span>()</span><br><span class="line">                        .addList(BEARER_TOKEN_SECURITY_SCHEME))</span><br><span class="line">                .components(<span class="keyword">new</span> <span class="title class_">Components</span>()</span><br><span class="line">                        .addSecuritySchemes(BEARER_TOKEN_SECURITY_SCHEME,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">SecurityScheme</span>()</span><br><span class="line">                                        .name(BEARER_TOKEN_SECURITY_SCHEME)</span><br><span class="line">                                        .type(SecurityScheme.Type.HTTP)</span><br><span class="line">                                        .scheme(<span class="string">&quot;bearer&quot;</span>)</span><br><span class="line">                                        .bearerFormat(<span class="string">&quot;JWT&quot;</span>)</span><br><span class="line">                                        .in(SecurityScheme.In.HEADER)</span><br><span class="line">                                        .description(<span class="string">&quot;输入JWT token，格式：Bearer &#123;token&#125;&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在需要认证的接口上添加安全注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin&quot;)</span></span><br><span class="line"><span class="meta">@Tag(name = &quot;管理员接口&quot;, description = &quot;需要管理员权限的高级功能 👑&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(</span></span><br><span class="line"><span class="meta">            summary = &quot;管理员获取所有用户&quot;,</span></span><br><span class="line"><span class="meta">            description = &quot;只有管理员才能访问的用户列表接口，包含敏感信息&quot;,</span></span><br><span class="line"><span class="meta">            security = @SecurityRequirement(name = &quot;bearerAuth&quot;)</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@SecurityRequirement(name = &quot;bearerAuth&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ApiResponse&lt;List&lt;User&gt;&gt;&gt; <span class="title function_">getAllUsersForAdmin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 管理员专用接口逻辑</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(ApiResponse.success(<span class="string">&quot;获取成功&quot;</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义注解与切面"><a class="markdownIt-Anchor" href="#自定义注解与切面"></a> 🎪 自定义注解与切面</h4><p>有时候我们想为某些特殊的接口添加统一的文档说明，这时候自定义注解就派上用场了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.responses.ApiResponse;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.responses.ApiResponses;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.media.Content;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.media.ExampleObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标准API响应注解</span></span><br><span class="line"><span class="comment"> * 这个注解就像是给接口贴上了&quot;质量保证&quot;的标签，统一了响应格式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@ApiResponses(&#123;</span></span><br><span class="line"><span class="meta">        @ApiResponse(</span></span><br><span class="line"><span class="meta">                responseCode = &quot;200&quot;,</span></span><br><span class="line"><span class="meta">                description = &quot;操作成功&quot;,</span></span><br><span class="line"><span class="meta">                content = @Content(</span></span><br><span class="line"><span class="meta">                        mediaType = &quot;application/json&quot;,</span></span><br><span class="line"><span class="meta">                        examples = @ExampleObject(</span></span><br><span class="line"><span class="meta">                                name = &quot;成功响应&quot;,</span></span><br><span class="line"><span class="meta">                                value = &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                                        &#123;</span></span><br><span class="line"><span class="meta">                                          &quot;code&quot;: 200,</span></span><br><span class="line"><span class="meta">                                          &quot;message&quot;: &quot;操作成功&quot;,</span></span><br><span class="line"><span class="meta">                                          &quot;data&quot;: &#123;&#125;,</span></span><br><span class="line"><span class="meta">                                          &quot;timestamp&quot;: &quot;2024-01-01 12:00:00&quot;</span></span><br><span class="line"><span class="meta">                                        &#125;</span></span><br><span class="line"><span class="meta">                                        &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                        )</span></span><br><span class="line"><span class="meta">                )</span></span><br><span class="line"><span class="meta">        ),</span></span><br><span class="line"><span class="meta">        @ApiResponse(</span></span><br><span class="line"><span class="meta">                responseCode = &quot;400&quot;,</span></span><br><span class="line"><span class="meta">                description = &quot;参数错误&quot;,</span></span><br><span class="line"><span class="meta">                content = @Content(</span></span><br><span class="line"><span class="meta">                        mediaType = &quot;application/json&quot;,</span></span><br><span class="line"><span class="meta">                        examples = @ExampleObject(</span></span><br><span class="line"><span class="meta">                                value = &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                                        &#123;</span></span><br><span class="line"><span class="meta">                                          &quot;code&quot;: 400,</span></span><br><span class="line"><span class="meta">                                          &quot;message&quot;: &quot;参数验证失败&quot;,</span></span><br><span class="line"><span class="meta">                                          &quot;data&quot;: null,</span></span><br><span class="line"><span class="meta">                                          &quot;timestamp&quot;: &quot;2024-01-01 12:00:00&quot;</span></span><br><span class="line"><span class="meta">                                        &#125;</span></span><br><span class="line"><span class="meta">                                        &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                        )</span></span><br><span class="line"><span class="meta">                )</span></span><br><span class="line"><span class="meta">        ),</span></span><br><span class="line"><span class="meta">        @ApiResponse(</span></span><br><span class="line"><span class="meta">                responseCode = &quot;500&quot;,</span></span><br><span class="line"><span class="meta">                description = &quot;服务器内部错误&quot;,</span></span><br><span class="line"><span class="meta">                content = @Content(</span></span><br><span class="line"><span class="meta">                        mediaType = &quot;application/json&quot;,</span></span><br><span class="line"><span class="meta">                        examples = @ExampleObject(</span></span><br><span class="line"><span class="meta">                                value = &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                                        &#123;</span></span><br><span class="line"><span class="meta">                                          &quot;code&quot;: 500,</span></span><br><span class="line"><span class="meta">                                          &quot;message&quot;: &quot;服务器开小差了，请稍后重试&quot;,</span></span><br><span class="line"><span class="meta">                                          &quot;data&quot;: null,</span></span><br><span class="line"><span class="meta">                                          &quot;timestamp&quot;: &quot;2024-01-01 12:00:00&quot;</span></span><br><span class="line"><span class="meta">                                        &#125;</span></span><br><span class="line"><span class="meta">                                        &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                        )</span></span><br><span class="line"><span class="meta">                )</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> StandardApiResponses &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含认证相关的错误响应</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">includeAuth</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用起来超级简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/profile&quot;)</span></span><br><span class="line"><span class="meta">@StandardApiResponses(includeAuth = true)</span></span><br><span class="line"><span class="meta">@Operation(summary = &quot;获取个人资料&quot;, description = &quot;获取当前登录用户的个人资料信息&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;ApiResponse&lt;User&gt;&gt; <span class="title function_">getProfile</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 接口逻辑</span></span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(ApiResponse.success(<span class="string">&quot;获取成功&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多环境配置"><a class="markdownIt-Anchor" href="#多环境配置"></a> 🌈 多环境配置</h4><p>不同环境下，我们的API文档可能需要不同的配置。来看看如何优雅地处理这种情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OpenAPI配置属性类</span></span><br><span class="line"><span class="comment"> * 通过配置文件来控制API文档的行为，灵活性Max！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;app.openapi&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenApiProperties</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">enabled</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> <span class="string">&quot;API文档&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> <span class="string">&quot;这是一个很棒的API&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">version</span> <span class="operator">=</span> <span class="string">&quot;v1.0.0&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Contact</span> <span class="variable">contact</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">License</span> <span class="variable">license</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">License</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 嵌套配置类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Contact</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;开发团队&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> <span class="string">&quot;dev@example.com&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://www.example.com&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// getter and setter...</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123; <span class="keyword">return</span> email; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123; <span class="built_in">this</span>.email = email; &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">()</span> &#123; <span class="keyword">return</span> url; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUrl</span><span class="params">(String url)</span> &#123; <span class="built_in">this</span>.url = url; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">License</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;MIT&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://opensource.org/licenses/MIT&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// getter and setter...</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">()</span> &#123; <span class="keyword">return</span> url; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUrl</span><span class="params">(String url)</span> &#123; <span class="built_in">this</span>.url = url; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 主类的getter and setter</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123; <span class="keyword">return</span> enabled; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEnabled</span><span class="params">(<span class="type">boolean</span> enabled)</span> &#123; <span class="built_in">this</span>.enabled = enabled; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTitle</span><span class="params">()</span> &#123; <span class="keyword">return</span> title; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTitle</span><span class="params">(String title)</span> &#123; <span class="built_in">this</span>.title = title; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123; <span class="keyword">return</span> description; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span> &#123; <span class="built_in">this</span>.description = description; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getVersion</span><span class="params">()</span> &#123; <span class="keyword">return</span> version; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVersion</span><span class="params">(String version)</span> &#123; <span class="built_in">this</span>.version = version; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Contact <span class="title function_">getContact</span><span class="params">()</span> &#123; <span class="keyword">return</span> contact; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContact</span><span class="params">(Contact contact)</span> &#123; <span class="built_in">this</span>.contact = contact; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> License <span class="title function_">getLicense</span><span class="params">()</span> &#123; <span class="keyword">return</span> license; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLicense</span><span class="params">(License license)</span> &#123; <span class="built_in">this</span>.license = license; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在不同环境的配置文件中设置不同的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># application-dev.yml (开发环境)</span><br><span class="line">app:</span><br><span class="line">  openapi:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">    title: <span class="string">&quot;开发环境API文档 🛠️&quot;</span></span><br><span class="line">    description: <span class="string">&quot;这是开发环境的API，随时可能变动，请谨慎使用&quot;</span></span><br><span class="line">    version: <span class="string">&quot;v1.0.0-dev&quot;</span></span><br><span class="line">    contact:</span><br><span class="line">      name: <span class="string">&quot;开发团队&quot;</span></span><br><span class="line">      email: <span class="string">&quot;dev@example.com&quot;</span></span><br><span class="line"></span><br><span class="line"># application-prod.yml (生产环境)</span><br><span class="line">app:</span><br><span class="line">  openapi:</span><br><span class="line">    enabled: <span class="literal">false</span>  # 生产环境关闭文档</span><br><span class="line">    title: <span class="string">&quot;生产环境API&quot;</span></span><br><span class="line">    description: <span class="string">&quot;生产环境API文档&quot;</span></span><br><span class="line">    version: <span class="string">&quot;v1.0.0&quot;</span></span><br></pre></td></tr></table></figure><p>这样配置之后，生产环境就不会暴露API文档了，安全性大大提升！😎</p><h3 id="️-实际项目应用案例"><a class="markdownIt-Anchor" href="#️-实际项目应用案例"></a> 🛠️ 实际项目应用案例</h3><p>理论说了这么多，让我们来看一个更贴近实际项目的完整示例！假设我们正在开发一个电商系统的商品管理模块。</p><h4 id="️-商品管理模块"><a class="markdownIt-Anchor" href="#️-商品管理模块"></a> 🛍️ 商品管理模块</h4><p>首先定义商品实体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ecommerce.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.media.Schema;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.*;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Schema(name = &quot;Product&quot;, description = &quot;商品信息&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;商品ID&quot;, example = &quot;1&quot;, accessMode = Schema.AccessMode.READ_ONLY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;商品名称&quot;, example = &quot;iPhone 15 Pro Max&quot;, requiredMode = Schema.RequiredMode.REQUIRED)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;商品名称不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Size(min = 2, max = 100, message = &quot;商品名称长度必须在2-100字符之间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;商品描述&quot;, example = &quot;苹果最新旗舰手机，性能强悍，拍照出色&quot;)</span></span><br><span class="line">    <span class="meta">@Size(max = 1000, message = &quot;商品描述不能超过1000字符&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;商品价格&quot;, example = &quot;9999.00&quot;, requiredMode = Schema.RequiredMode.REQUIRED)</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;商品价格不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@DecimalMin(value = &quot;0.01&quot;, message = &quot;商品价格必须大于0.01&quot;)</span></span><br><span class="line">    <span class="meta">@DecimalMax(value = &quot;999999.99&quot;, message = &quot;商品价格不能超过999999.99&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;库存数量&quot;, example = &quot;100&quot;, requiredMode = Schema.RequiredMode.REQUIRED)</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;库存数量不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Min(value = 0, message = &quot;库存数量不能为负数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer stock;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;商品分类ID&quot;, example = &quot;1&quot;, requiredMode = Schema.RequiredMode.REQUIRED)</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;商品分类不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;商品分类名称&quot;, example = &quot;数码产品&quot;, accessMode = Schema.AccessMode.READ_ONLY)</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;商品图片URL列表&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; imageUrls;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;商品状态&quot;, example = &quot;ACTIVE&quot;, allowableValues = &#123;&quot;ACTIVE&quot;, &quot;INACTIVE&quot;, &quot;OUT_OF_STOCK&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> ProductStatus status;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;创建时间&quot;, accessMode = Schema.AccessMode.READ_ONLY)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Schema(description = &quot;更新时间&quot;, accessMode = Schema.AccessMode.READ_ONLY)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 商品状态枚举</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ProductStatus</span> &#123;</span><br><span class="line">        <span class="meta">@Schema(description = &quot;正常销售&quot;)</span></span><br><span class="line">        ACTIVE,</span><br><span class="line">        <span class="meta">@Schema(description = &quot;已下架&quot;)</span></span><br><span class="line">        INACTIVE,</span><br><span class="line">        <span class="meta">@Schema(description = &quot;缺货&quot;)</span></span><br><span class="line">        OUT_OF_STOCK</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造函数和getter/setter方法... (省略)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Product</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter and setter methods</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123; <span class="built_in">this</span>.id = id; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123; <span class="keyword">return</span> description; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span> &#123; <span class="built_in">this</span>.description = description; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> BigDecimal <span class="title function_">getPrice</span><span class="params">()</span> &#123; <span class="keyword">return</span> price; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(BigDecimal price)</span> &#123; <span class="built_in">this</span>.price = price; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getStock</span><span class="params">()</span> &#123; <span class="keyword">return</span> stock; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStock</span><span class="params">(Integer stock)</span> &#123; <span class="built_in">this</span>.stock = stock; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getCategoryId</span><span class="params">()</span> &#123; <span class="keyword">return</span> categoryId; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCategoryId</span><span class="params">(Long categoryId)</span> &#123; <span class="built_in">this</span>.categoryId = categoryId; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCategoryName</span><span class="params">()</span> &#123; <span class="keyword">return</span> categoryName; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCategoryName</span><span class="params">(String categoryName)</span> &#123; <span class="built_in">this</span>.categoryName = categoryName; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getImageUrls</span><span class="params">()</span> &#123; <span class="keyword">return</span> imageUrls; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImageUrls</span><span class="params">(List&lt;String&gt; imageUrls)</span> &#123; <span class="built_in">this</span>.imageUrls = imageUrls; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> ProductStatus <span class="title function_">getStatus</span><span class="params">()</span> &#123; <span class="keyword">return</span> status; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(ProductStatus status)</span> &#123; <span class="built_in">this</span>.status = status; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> LocalDateTime <span class="title function_">getCreateTime</span><span class="params">()</span> &#123; <span class="keyword">return</span> createTime; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCreateTime</span><span class="params">(LocalDateTime createTime)</span> &#123; <span class="built_in">this</span>.createTime = createTime; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> LocalDateTime <span class="title function_">getUpdateTime</span><span class="params">()</span> &#123; <span class="keyword">return</span> updateTime; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUpdateTime</span><span class="params">(LocalDateTime updateTime)</span> &#123; <span class="built_in">this</span>.updateTime = updateTime; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="商品控制器"><a class="markdownIt-Anchor" href="#商品控制器"></a> 🎯 商品控制器</h4><p>然后创建一个功能丰富的商品控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ecommerce.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.common.ApiResponse;</span><br><span class="line"><span class="keyword">import</span> com.example.ecommerce.entity.Product;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.*;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.media.Content;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.media.ExampleObject;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.media.Schema;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.responses.ApiResponses;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.responses.ApiResponse as SwaggerApiResponse;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.tags.Tag;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品管理控制器</span></span><br><span class="line"><span class="comment"> * 电商系统的核心模块之一，负责商品的全生命周期管理</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 这个控制器就像是商品的&quot;生命管家&quot;，从商品的诞生到下架，</span></span><br><span class="line"><span class="comment"> * 每一个环节都在这里得到精心呵护！🛍️</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/products&quot;)</span></span><br><span class="line"><span class="meta">@Tag(name = &quot;商品管理&quot;, description = &quot;电商系统商品管理核心接口，支持CRUD、搜索、库存管理等功能 🛒&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品搜索接口</span></span><br><span class="line"><span class="comment">     * 这个接口功能强大，支持多维度搜索，简直是商品查找的&quot;瑞士军刀&quot;！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/search&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(</span></span><br><span class="line"><span class="meta">            summary = &quot;商品搜索&quot;,</span></span><br><span class="line"><span class="meta">            description = &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                    支持多维度商品搜索的强大接口。</span></span><br><span class="line"><span class="meta">                    </span></span><br><span class="line"><span class="meta">                    ### 🔍 搜索功能</span></span><br><span class="line"><span class="meta">                    - **关键字搜索**: 支持商品名称、描述模糊搜索</span></span><br><span class="line"><span class="meta">                    - **分类筛选**: 按商品分类进行筛选</span></span><br><span class="line"><span class="meta">                    - **价格区间**: 支持最低价和最高价筛选</span></span><br><span class="line"><span class="meta">                    - **状态筛选**: 支持按商品状态筛选</span></span><br><span class="line"><span class="meta">                    - **排序功能**: 支持按价格、创建时间、销量等排序</span></span><br><span class="line"><span class="meta">                    </span></span><br><span class="line"><span class="meta">                    ### 💡 使用技巧</span></span><br><span class="line"><span class="meta">                    - 多个条件可以组合使用，系统会智能匹配</span></span><br><span class="line"><span class="meta">                    - 支持分页查询，避免数据量过大影响性能</span></span><br><span class="line"><span class="meta">                    - 默认按相关度排序，也可以指定其他排序方式</span></span><br><span class="line"><span class="meta">                    &quot;&quot;&quot;,</span></span><br><span class="line"><span class="meta">            tags = &#123;&quot;商品查询&quot;&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@Parameters(&#123;</span></span><br><span class="line"><span class="meta">            @Parameter(name = &quot;keyword&quot;, description = &quot;搜索关键字&quot;, example = &quot;iPhone&quot;),</span></span><br><span class="line"><span class="meta">            @Parameter(name = &quot;categoryId&quot;, description = &quot;商品分类ID&quot;, example = &quot;1&quot;),</span></span><br><span class="line"><span class="meta">            @Parameter(name = &quot;minPrice&quot;, description = &quot;最低价格&quot;, example = &quot;100.00&quot;),</span></span><br><span class="line"><span class="meta">            @Parameter(name = &quot;maxPrice&quot;, description = &quot;最高价格&quot;, example = &quot;10000.00&quot;),</span></span><br><span class="line"><span class="meta">            @Parameter(name = &quot;status&quot;, description = &quot;商品状态&quot;, example = &quot;ACTIVE&quot;),</span></span><br><span class="line"><span class="meta">            @Parameter(name = &quot;sortBy&quot;, description = &quot;排序字段&quot;, example = &quot;price&quot;, </span></span><br><span class="line"><span class="meta">                      schema = @Schema(allowableValues = &#123;&quot;price&quot;, &quot;createTime&quot;, &quot;sales&quot;&#125;)),</span></span><br><span class="line"><span class="meta">            @Parameter(name = &quot;sortOrder&quot;, description = &quot;排序方向&quot;, example = &quot;asc&quot;,</span></span><br><span class="line"><span class="meta">                      schema = @Schema(allowableValues = &#123;&quot;asc&quot;, &quot;desc&quot;&#125;)),</span></span><br><span class="line"><span class="meta">            @Parameter(name = &quot;page&quot;, description = &quot;页码&quot;, example = &quot;1&quot;),</span></span><br><span class="line"><span class="meta">            @Parameter(name = &quot;size&quot;, description = &quot;每页大小&quot;, example = &quot;20&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@ApiResponses(&#123;</span></span><br><span class="line"><span class="meta">            @SwaggerApiResponse(</span></span><br><span class="line"><span class="meta">                    responseCode = &quot;200&quot;,</span></span><br><span class="line"><span class="meta">                    description = &quot;搜索成功&quot;,</span></span><br><span class="line"><span class="meta">                    content = @Content(</span></span><br><span class="line"><span class="meta">                            mediaType = &quot;application/json&quot;,</span></span><br><span class="line"><span class="meta">                            examples = @ExampleObject(</span></span><br><span class="line"><span class="meta">                                    name = &quot;搜索结果&quot;,</span></span><br><span class="line"><span class="meta">                                    value = &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                                            &#123;</span></span><br><span class="line"><span class="meta">                                              &quot;code&quot;: 200,</span></span><br><span class="line"><span class="meta">                                              &quot;message&quot;: &quot;搜索成功&quot;,</span></span><br><span class="line"><span class="meta">                                              &quot;data&quot;: &#123;</span></span><br><span class="line"><span class="meta">                                                &quot;list&quot;: [</span></span><br><span class="line"><span class="meta">                                                  &#123;</span></span><br><span class="line"><span class="meta">                                                    &quot;id&quot;: 1,</span></span><br><span class="line"><span class="meta">                                                    &quot;name&quot;: &quot;iPhone 15 Pro Max&quot;,</span></span><br><span class="line"><span class="meta">                                                    &quot;description&quot;: &quot;苹果最新旗舰手机&quot;,</span></span><br><span class="line"><span class="meta">                                                    &quot;price&quot;: 9999.00,</span></span><br><span class="line"><span class="meta">                                                    &quot;stock&quot;: 50,</span></span><br><span class="line"><span class="meta">                                                    &quot;categoryId&quot;: 1,</span></span><br><span class="line"><span class="meta">                                                    &quot;categoryName&quot;: &quot;数码产品&quot;,</span></span><br><span class="line"><span class="meta">                                                    &quot;status&quot;: &quot;ACTIVE&quot;,</span></span><br><span class="line"><span class="meta">                                                    &quot;imageUrls&quot;: [&quot;http://example.com/image1.jpg&quot;]</span></span><br><span class="line"><span class="meta">                                                  &#125;</span></span><br><span class="line"><span class="meta">                                                ],</span></span><br><span class="line"><span class="meta">                                                &quot;total&quot;: 1,</span></span><br><span class="line"><span class="meta">                                                &quot;page&quot;: 1,</span></span><br><span class="line"><span class="meta">                                                &quot;size&quot;: 20</span></span><br><span class="line"><span class="meta">                                              &#125;,</span></span><br><span class="line"><span class="meta">                                              &quot;timestamp&quot;: &quot;2024-01-01 12:00:00&quot;</span></span><br><span class="line"><span class="meta">                                            &#125;</span></span><br><span class="line"><span class="meta">                                            &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                            )</span></span><br><span class="line"><span class="meta">                    )</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ApiResponse&lt;Object&gt;&gt; <span class="title function_">searchProducts</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(required = false)</span> String keyword,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(required = false)</span> Long categoryId,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(required = false)</span> BigDecimal minPrice,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(required = false)</span> BigDecimal maxPrice,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(required = false)</span> Product.ProductStatus status,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;createTime&quot;)</span> String sortBy,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;desc&quot;)</span> String sortOrder,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer page,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;20&quot;)</span> Integer size)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 模拟搜索逻辑</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">mockProduct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line">        mockProduct.setId(<span class="number">1L</span>);</span><br><span class="line">        mockProduct.setName(<span class="string">&quot;iPhone 15 Pro Max&quot;</span>);</span><br><span class="line">        mockProduct.setDescription(<span class="string">&quot;苹果最新旗舰手机，性能强悍&quot;</span>);</span><br><span class="line">        mockProduct.setPrice(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;9999.00&quot;</span>));</span><br><span class="line">        mockProduct.setStock(<span class="number">50</span>);</span><br><span class="line">        mockProduct.setCategoryId(<span class="number">1L</span>);</span><br><span class="line">        mockProduct.setCategoryName(<span class="string">&quot;数码产品&quot;</span>);</span><br><span class="line">        mockProduct.setStatus(Product.ProductStatus.ACTIVE);</span><br><span class="line">        mockProduct.setImageUrls(Arrays.asList(<span class="string">&quot;http://example.com/image1.jpg&quot;</span>));</span><br><span class="line">        mockProduct.setCreateTime(LocalDateTime.now());</span><br><span class="line">        </span><br><span class="line">        List&lt;Product&gt; products = Arrays.asList(mockProduct);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构造分页结果</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> List&lt;Product&gt; list = products;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">page</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">hasNext</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">hasPrev</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(ApiResponse.success(<span class="string">&quot;搜索成功&quot;</span>, result));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建商品</span></span><br><span class="line"><span class="comment">     * 这个接口就像是商品的&quot;出生登记处&quot;，每个新商品都要在这里登记造册！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@Operation(</span></span><br><span class="line"><span class="meta">            summary = &quot;创建商品&quot;,</span></span><br><span class="line"><span class="meta">            description = &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                    创建一个新的商品。</span></span><br><span class="line"><span class="meta">                    </span></span><br><span class="line"><span class="meta">                    ### ✅ 验证规则</span></span><br><span class="line"><span class="meta">                    - 商品名称：2-100字符，必填</span></span><br><span class="line"><span class="meta">                    - 商品价格：0.01-999999.99，必填</span></span><br><span class="line"><span class="meta">                    - 库存数量：不能为负数，必填</span></span><br><span class="line"><span class="meta">                    - 商品分类：必须选择有效分类，必填</span></span><br><span class="line"><span class="meta">                    - 商品描述：最多1000字符，选填</span></span><br><span class="line"><span class="meta">                    </span></span><br><span class="line"><span class="meta">                    ### 🎯 创建后</span></span><br><span class="line"><span class="meta">                    - 系统自动设置创建时间和更新时间</span></span><br><span class="line"><span class="meta">                    - 默认状态为ACTIVE（正常销售）</span></span><br><span class="line"><span class="meta">                    - 返回完整的商品信息，包括系统生成的ID</span></span><br><span class="line"><span class="meta">                    &quot;&quot;&quot;,</span></span><br><span class="line"><span class="meta">            tags = &#123;&quot;商品管理&quot;&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@io</span>.swagger.v3.oas.annotations.parameters.RequestBody(</span><br><span class="line">            description = <span class="string">&quot;商品信息&quot;</span>,</span><br><span class="line">            required = <span class="literal">true</span>,</span><br><span class="line">            content = <span class="meta">@Content(</span></span><br><span class="line"><span class="meta">                    mediaType = &quot;application/json&quot;,</span></span><br><span class="line"><span class="meta">                    schema = @Schema(implementation = Product.class),</span></span><br><span class="line"><span class="meta">                    examples = @ExampleObject(</span></span><br><span class="line"><span class="meta">                            name = &quot;创建商品示例&quot;,</span></span><br><span class="line"><span class="meta">                            value = &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                                    &#123;</span></span><br><span class="line"><span class="meta">                                      &quot;name&quot;: &quot;MacBook Pro 16英寸&quot;,</span></span><br><span class="line"><span class="meta">                                      &quot;description&quot;: &quot;苹果专业级笔记本电脑，适合开发和设计工作&quot;,</span></span><br><span class="line"><span class="meta">                                      &quot;price&quot;: 19999.00,</span></span><br><span class="line"><span class="meta">                                      &quot;stock&quot;: 30,</span></span><br><span class="line"><span class="meta">                                      &quot;categoryId&quot;: 2,</span></span><br><span class="line"><span class="meta">                                      &quot;imageUrls&quot;: [</span></span><br><span class="line"><span class="meta">                                        &quot;http://example.com/macbook1.jpg&quot;,</span></span><br><span class="line"><span class="meta">                                        &quot;http://example.com/macbook2.jpg&quot;</span></span><br><span class="line"><span class="meta">                                      ]</span></span><br><span class="line"><span class="meta">                                    &#125;</span></span><br><span class="line"><span class="meta">                                    &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                    )</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line">    )</span><br><span class="line">    <span class="meta">@ApiResponses(&#123;</span></span><br><span class="line"><span class="meta">            @SwaggerApiResponse(</span></span><br><span class="line"><span class="meta">                    responseCode = &quot;201&quot;,</span></span><br><span class="line"><span class="meta">                    description = &quot;商品创建成功&quot;,</span></span><br><span class="line"><span class="meta">                    content = @Content(</span></span><br><span class="line"><span class="meta">                            mediaType = &quot;application/json&quot;,</span></span><br><span class="line"><span class="meta">                            examples = @ExampleObject(</span></span><br><span class="line"><span class="meta">                                    value = &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                                            &#123;</span></span><br><span class="line"><span class="meta">                                              &quot;code&quot;: 200,</span></span><br><span class="line"><span class="meta">                                              &quot;message&quot;: &quot;商品创建成功&quot;,</span></span><br><span class="line"><span class="meta">                                              &quot;data&quot;: &#123;</span></span><br><span class="line"><span class="meta">                                                &quot;id&quot;: 1,</span></span><br><span class="line"><span class="meta">                                                &quot;name&quot;: &quot;MacBook Pro 16英寸&quot;,</span></span><br><span class="line"><span class="meta">                                                &quot;description&quot;: &quot;苹果专业级笔记本电脑&quot;,</span></span><br><span class="line"><span class="meta">                                                &quot;price&quot;: 19999.00,</span></span><br><span class="line"><span class="meta">                                                &quot;stock&quot;: 30,</span></span><br><span class="line"><span class="meta">                                                &quot;categoryId&quot;: 2,</span></span><br><span class="line"><span class="meta">                                                &quot;categoryName&quot;: &quot;笔记本电脑&quot;,</span></span><br><span class="line"><span class="meta">                                                &quot;status&quot;: &quot;ACTIVE&quot;,</span></span><br><span class="line"><span class="meta">                                                &quot;createTime&quot;: &quot;2024-01-01 12:00:00&quot;,</span></span><br><span class="line"><span class="meta">                                                &quot;updateTime&quot;: &quot;2024-01-01 12:00:00&quot;</span></span><br><span class="line"><span class="meta">                                              &#125;,</span></span><br><span class="line"><span class="meta">                                              &quot;timestamp&quot;: &quot;2024-01-01 12:00:00&quot;</span></span><br><span class="line"><span class="meta">                                            &#125;</span></span><br><span class="line"><span class="meta">                                            &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                            )</span></span><br><span class="line"><span class="meta">                    )</span></span><br><span class="line"><span class="meta">            ),</span></span><br><span class="line"><span class="meta">            @SwaggerApiResponse(</span></span><br><span class="line"><span class="meta">                    responseCode = &quot;400&quot;,</span></span><br><span class="line"><span class="meta">                    description = &quot;参数验证失败&quot;,</span></span><br><span class="line"><span class="meta">                    content = @Content(</span></span><br><span class="line"><span class="meta">                            mediaType = &quot;application/json&quot;,</span></span><br><span class="line"><span class="meta">                            examples = @ExampleObject(</span></span><br><span class="line"><span class="meta">                                    value = &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                                            &#123;</span></span><br><span class="line"><span class="meta">                                              &quot;code&quot;: 400,</span></span><br><span class="line"><span class="meta">                                              &quot;message&quot;: &quot;商品名称不能为空&quot;,</span></span><br><span class="line"><span class="meta">                                              &quot;data&quot;: null,</span></span><br><span class="line"><span class="meta">                                              &quot;timestamp&quot;: &quot;2024-01-01 12:00:00&quot;</span></span><br><span class="line"><span class="meta">                                            &#125;</span></span><br><span class="line"><span class="meta">                                            &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                            )</span></span><br><span class="line"><span class="meta">                    )</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ApiResponse&lt;Product&gt;&gt; <span class="title function_">createProduct</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> Product product)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 模拟创建逻辑</span></span><br><span class="line">        product.setId(System.currentTimeMillis()); <span class="comment">// 模拟ID生成</span></span><br><span class="line">        product.setStatus(Product.ProductStatus.ACTIVE);</span><br><span class="line">        product.setCreateTime(LocalDateTime.now());</span><br><span class="line">        product.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        product.setCategoryName(<span class="string">&quot;数码产品&quot;</span>); <span class="comment">// 模拟分类名称</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED)</span><br><span class="line">                .body(ApiResponse.success(<span class="string">&quot;商品创建成功&quot;</span>, product));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量更新库存</span></span><br><span class="line"><span class="comment">     * 这个接口就像是仓库管理员，可以一次性调整多个商品的库存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PatchMapping(&quot;/stock/batch&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(</span></span><br><span class="line"><span class="meta">            summary = &quot;批量更新库存&quot;,</span></span><br><span class="line"><span class="meta">            description = &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                    批量更新多个商品的库存数量。</span></span><br><span class="line"><span class="meta">                    </span></span><br><span class="line"><span class="meta">                    ### 📦 功能说明</span></span><br><span class="line"><span class="meta">                    - 支持同时更新多个商品的库存</span></span><br><span class="line"><span class="meta">                    - 支持增加或减少库存操作</span></span><br><span class="line"><span class="meta">                    - 会自动检查库存不能为负数</span></span><br><span class="line"><span class="meta">                    - 库存变动会记录日志，便于追踪</span></span><br><span class="line"><span class="meta">                    </span></span><br><span class="line"><span class="meta">                    ### ⚠️ 注意事项</span></span><br><span class="line"><span class="meta">                    - 减少库存时，不能使库存变为负数</span></span><br><span class="line"><span class="meta">                    - 商品ID必须存在，否则会跳过该商品</span></span><br><span class="line"><span class="meta">                    - 操作完成后会返回更新结果统计</span></span><br><span class="line"><span class="meta">                    &quot;&quot;&quot;,</span></span><br><span class="line"><span class="meta">            tags = &#123;&quot;库存管理&quot;&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@io</span>.swagger.v3.oas.annotations.parameters.RequestBody(</span><br><span class="line">            description = <span class="string">&quot;库存更新信息列表&quot;</span>,</span><br><span class="line">            content = <span class="meta">@Content(</span></span><br><span class="line"><span class="meta">                    mediaType = &quot;application/json&quot;,</span></span><br><span class="line"><span class="meta">                    examples = @ExampleObject(</span></span><br><span class="line"><span class="meta">                            name = &quot;批量更新库存&quot;,</span></span><br><span class="line"><span class="meta">                            value = &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                                    [</span></span><br><span class="line"><span class="meta">                                      &#123;</span></span><br><span class="line"><span class="meta">                                        &quot;productId&quot;: 1,</span></span><br><span class="line"><span class="meta">                                        &quot;quantity&quot;: 10,</span></span><br><span class="line"><span class="meta">                                        &quot;operation&quot;: &quot;ADD&quot;</span></span><br><span class="line"><span class="meta">                                      &#125;,</span></span><br><span class="line"><span class="meta">                                      &#123;</span></span><br><span class="line"><span class="meta">                                        &quot;productId&quot;: 2,</span></span><br><span class="line"><span class="meta">                                        &quot;quantity&quot;: 5,</span></span><br><span class="line"><span class="meta">                                        &quot;operation&quot;: &quot;SUBTRACT&quot;</span></span><br><span class="line"><span class="meta">                                      &#125;</span></span><br><span class="line"><span class="meta">                                    ]</span></span><br><span class="line"><span class="meta">                                    &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                    )</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ApiResponse&lt;Object&gt;&gt; <span class="title function_">batchUpdateStock</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestBody</span> List&lt;StockUpdateRequest&gt; requests)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 模拟批量更新逻辑</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">totalRequests</span> <span class="operator">=</span> requests.size();</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">successCount</span> <span class="operator">=</span> requests.size();</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">failureCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;所有商品库存更新成功&quot;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(ApiResponse.success(<span class="string">&quot;批量更新完成&quot;</span>, result));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 库存更新请求DTO</span></span><br><span class="line">    <span class="meta">@Schema(name = &quot;StockUpdateRequest&quot;, description = &quot;库存更新请求&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StockUpdateRequest</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Schema(description = &quot;商品ID&quot;, example = &quot;1&quot;, requiredMode = Schema.RequiredMode.REQUIRED)</span></span><br><span class="line">        <span class="keyword">private</span> Long productId;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Schema(description = &quot;变动数量&quot;, example = &quot;10&quot;, requiredMode = Schema.RequiredMode.REQUIRED)</span></span><br><span class="line">        <span class="keyword">private</span> Integer quantity;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Schema(description = &quot;操作类型&quot;, example = &quot;ADD&quot;, allowableValues = &#123;&quot;ADD&quot;, &quot;SUBTRACT&quot;&#125;)</span></span><br><span class="line">        <span class="keyword">private</span> StockOperation operation;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Schema(description = &quot;操作说明&quot;, example = &quot;补货入库&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> String remark;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">StockOperation</span> &#123;</span><br><span class="line">            <span class="meta">@Schema(description = &quot;增加库存&quot;)</span></span><br><span class="line">            ADD,</span><br><span class="line">            <span class="meta">@Schema(description = &quot;减少库存&quot;)</span></span><br><span class="line">            SUBTRACT</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// getter and setter</span></span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">getProductId</span><span class="params">()</span> &#123; <span class="keyword">return</span> productId; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProductId</span><span class="params">(Long productId)</span> &#123; <span class="built_in">this</span>.productId = productId; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">getQuantity</span><span class="params">()</span> &#123; <span class="keyword">return</span> quantity; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setQuantity</span><span class="params">(Integer quantity)</span> &#123; <span class="built_in">this</span>.quantity = quantity; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> StockOperation <span class="title function_">getOperation</span><span class="params">()</span> &#123; <span class="keyword">return</span> operation; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOperation</span><span class="params">(StockOperation operation)</span> &#123; <span class="built_in">this</span>.operation = operation; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getRemark</span><span class="params">()</span> &#123; <span class="keyword">return</span> remark; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRemark</span><span class="params">(String remark)</span> &#123; <span class="built_in">this</span>.remark = remark; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这个商品控制器，是不是感觉很有实战价值？😍 它不仅包含了常见的CRUD操作，还有搜索、批量操作等高级功能，而且每个接口的文档都非常详细！</p><h3 id="最佳实践与避坑指南"><a class="markdownIt-Anchor" href="#最佳实践与避坑指南"></a> 🎭 最佳实践与避坑指南</h3><p>经过这么多年的摸爬滚打，我总结了一些使用OpenAPI的最佳实践，这些都是我踩过坑后的血泪经验啊！😭</p><h4 id="最佳实践"><a class="markdownIt-Anchor" href="#最佳实践"></a> ✅ 最佳实践</h4><h5 id="1️⃣-统一响应格式"><a class="markdownIt-Anchor" href="#1️⃣-统一响应格式"></a> 1️⃣ 统一响应格式</h5><p><strong>一定要</strong>使用统一的响应格式！这不仅让API使用者感到舒适，也让文档看起来更专业。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的做法 ✅</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;ApiResponse&lt;User&gt;&gt; <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(ApiResponse.success(<span class="string">&quot;创建成功&quot;</span>, user));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的做法 ❌</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/users&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> user; <span class="comment">// 没有统一包装，不利于错误处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2️⃣-详细的参数描述"><a class="markdownIt-Anchor" href="#2️⃣-详细的参数描述"></a> 2️⃣ 详细的参数描述</h5><p>参数描述要详细，要让使用者一看就明白：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的做法 ✅</span></span><br><span class="line"><span class="meta">@Parameter(</span></span><br><span class="line"><span class="meta">    name = &quot;status&quot;,</span></span><br><span class="line"><span class="meta">    description = &quot;用户状态筛选条件。ACTIVE表示正常用户，INACTIVE表示禁用用户，BANNED表示封禁用户&quot;,</span></span><br><span class="line"><span class="meta">    example = &quot;ACTIVE&quot;,</span></span><br><span class="line"><span class="meta">    schema = @Schema(allowableValues = &#123;&quot;ACTIVE&quot;, &quot;INACTIVE&quot;, &quot;BANNED&quot;&#125;)</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的做法 ❌</span></span><br><span class="line"><span class="meta">@Parameter(name = &quot;status&quot;, description = &quot;状态&quot;)</span> <span class="comment">// 太简单，不知道有哪些值</span></span><br></pre></td></tr></table></figure><h5 id="3️⃣-合理使用示例"><a class="markdownIt-Anchor" href="#3️⃣-合理使用示例"></a> 3️⃣ 合理使用示例</h5><p>示例要贴近真实场景，不要用<code>foo</code>、<code>bar</code>这种无意义的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的做法 ✅</span></span><br><span class="line"><span class="meta">@ExampleObject(</span></span><br><span class="line"><span class="meta">    name = &quot;创建用户&quot;,</span></span><br><span class="line"><span class="meta">    value = &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">            &#123;</span></span><br><span class="line"><span class="meta">              &quot;username&quot;: &quot;zhangsan&quot;,</span></span><br><span class="line"><span class="meta">              &quot;email&quot;: &quot;zhangsan@example.com&quot;,</span></span><br><span class="line"><span class="meta">              &quot;age&quot;: 25,</span></span><br><span class="line"><span class="meta">              &quot;phone&quot;: &quot;13812345678&quot;</span></span><br><span class="line"><span class="meta">            &#125;</span></span><br><span class="line"><span class="meta">            &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的做法 ❌</span></span><br><span class="line"><span class="meta">@ExampleObject(</span></span><br><span class="line"><span class="meta">    value = &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">            &#123;</span></span><br><span class="line"><span class="meta">              &quot;username&quot;: &quot;foo&quot;,</span></span><br><span class="line"><span class="meta">              &quot;email&quot;: &quot;bar@baz.com&quot;,</span></span><br><span class="line"><span class="meta">              &quot;age&quot;: 123</span></span><br><span class="line"><span class="meta">            &#125;</span></span><br><span class="line"><span class="meta">            &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure><h4 id="️-常见陷阱"><a class="markdownIt-Anchor" href="#️-常见陷阱"></a> ⚠️ 常见陷阱</h4><h5 id="1️⃣-忘记处理不同响应码"><a class="markdownIt-Anchor" href="#1️⃣-忘记处理不同响应码"></a> 1️⃣ 忘记处理不同响应码</h5><p>很多同学只写200的情况，完全忘记了错误处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完整的做法 ✅</span></span><br><span class="line"><span class="meta">@ApiResponses(&#123;</span></span><br><span class="line"><span class="meta">    @SwaggerApiResponse(responseCode = &quot;200&quot;, description = &quot;操作成功&quot;),</span></span><br><span class="line"><span class="meta">    @SwaggerApiResponse(responseCode = &quot;400&quot;, description = &quot;参数错误&quot;),</span></span><br><span class="line"><span class="meta">    @SwaggerApiResponse(responseCode = &quot;401&quot;, description = &quot;未认证&quot;),</span></span><br><span class="line"><span class="meta">    @SwaggerApiResponse(responseCode = &quot;403&quot;, description = &quot;权限不足&quot;),</span></span><br><span class="line"><span class="meta">    @SwaggerApiResponse(responseCode = &quot;404&quot;, description = &quot;资源不存在&quot;),</span></span><br><span class="line"><span class="meta">    @SwaggerApiResponse(responseCode = &quot;500&quot;, description = &quot;服务器错误&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure><h5 id="2️⃣-忽略数据验证注解"><a class="markdownIt-Anchor" href="#2️⃣-忽略数据验证注解"></a> 2️⃣ 忽略数据验证注解</h5><p>记住，Spring的验证注解和OpenAPI注解要配合使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确的做法 ✅</span></span><br><span class="line"><span class="meta">@Schema(description = &quot;用户年龄&quot;, example = &quot;25&quot;, minimum = &quot;1&quot;, maximum = &quot;150&quot;)</span></span><br><span class="line"><span class="meta">@Min(value = 1, message = &quot;年龄必须大于0&quot;)</span></span><br><span class="line"><span class="meta">@Max(value = 150, message = &quot;年龄不能超过150&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br></pre></td></tr></table></figure><h5 id="3️⃣-生产环境暴露文档"><a class="markdownIt-Anchor" href="#3️⃣-生产环境暴露文档"></a> 3️⃣ 生产环境暴露文档</h5><p>生产环境一定要关闭API文档！这个坑我见过太多团队踩了：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生产环境配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">springdoc:</span></span><br><span class="line">  <span class="attr">api-docs:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span>  <span class="comment"># 生产环境关闭</span></span><br><span class="line">  <span class="attr">swagger-ui:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span>  <span class="comment"># 生产环境关闭</span></span><br></pre></td></tr></table></figure><h4 id="性能优化技巧"><a class="markdownIt-Anchor" href="#性能优化技巧"></a> 🔧 性能优化技巧</h4><h5 id="1️⃣-懒加载配置"><a class="markdownIt-Anchor" href="#1️⃣-懒加载配置"></a> 1️⃣ 懒加载配置</h5><p>对于大型项目，可以配置懒加载来提升启动速度：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">springdoc:</span></span><br><span class="line">  <span class="attr">lazy-initialization:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">disabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h5 id="2️⃣-排除不必要的接口"><a class="markdownIt-Anchor" href="#2️⃣-排除不必要的接口"></a> 2️⃣ 排除不必要的接口</h5><p>有些内部接口不需要出现在文档中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Hidden</span>  <span class="comment">// 整个控制器都不在文档中显示</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InternalController</span> &#123;</span><br><span class="line">    <span class="comment">// 内部接口</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者单个方法</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/internal&quot;)</span></span><br><span class="line"><span class="meta">@Hidden</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">internalMethod</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;internal&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结与展望"><a class="markdownIt-Anchor" href="#总结与展望"></a> 🌟 总结与展望</h3><p>写到这里，我不禁感慨万千啊！😌 从最初的手写API文档，到现在的自动化生成，技术的发展真是日新月异！</p><h4 id="核心要点回顾"><a class="markdownIt-Anchor" href="#核心要点回顾"></a> 🎯 核心要点回顾</h4><p>让我们来回顾一下这篇文章的核心要点：</p><ol><li><p><strong>SpringBoot 3.x的变革</strong>：全面拥抱Jakarta EE，最低Java 17，为我们带来了更现代化的开发体验</p></li><li><p><strong>OpenAPI 3.0的强大</strong>：相比2.0版本，3.0在数据类型、认证机制、组件复用等方面都有显著提升</p></li><li><p><strong>SpringDoc的选择</strong>：在SpringFox停止维护的情况下，SpringDoc成为了SpringBoot 3.x时代的最佳选择</p></li><li><p><strong>注解的艺术</strong>：通过合理使用<code>@Operation</code>、<code>@Schema</code>、<code>@Parameter</code>等注解，我们可以生成非常专业的API文档</p></li><li><p><strong>最佳实践的重要性</strong>：统一响应格式、详细参数描述、合理示例使用等实践让我们的API更加优雅</p></li></ol><h4 id="未来发展趋势"><a class="markdownIt-Anchor" href="#未来发展趋势"></a> 🚀 未来发展趋势</h4><p>展望未来，API文档的发展还有很多令人兴奋的可能性：</p><p><strong>🤖 AI驱动的文档生成</strong><br />随着AI技术的发展，未来可能会有AI助手自动分析代码逻辑，生成更智能、更自然的API描述。想象一下，AI能理解你的业务逻辑，自动生成贴合场景的示例和说明，那该多酷啊！</p><p><strong>🎨 更丰富的交互体验</strong><br />未来的API文档可能不再是静态的页面，而是像游戏一样的交互式体验。用户可以通过可视化的方式探索API，实时看到数据流转，甚至可以&quot;玩&quot;API！</p><p><strong>📱 移动端优先的设计</strong><br />随着移动开发的普及，API文档也需要考虑移动端的使用体验。未来可能会有专门为移动端优化的文档界面。</p><p><strong>🔗 更深度的集成</strong><br />API文档与开发工具、测试框架、监控系统的集成会越来越深入，形成一个完整的API生态系统。</p><h4 id="最后的话"><a class="markdownIt-Anchor" href="#最后的话"></a> 💝 最后的话</h4><p>作为一个在技术路上摸爬滚打的老司机，我想对大家说：技术是工具，但态度决定一切！💪</p><p>写好API文档不仅仅是为了完成工作，更是对使用者的一种尊重和关爱。当别人使用你的API时能够轻松上手，当团队成员能够快速理解接口逻辑时，那种成就感是无法言喻的！</p><p>OpenAPI和SpringBoot的结合，为我们提供了强大的工具，但工具再强大，也需要我们用心去使用。希望这篇文章能够帮助到正在路上的你，让我们一起写出更优雅、更友好的API！🎉</p><p>如果你在实际使用过程中遇到任何问题，记住：Google是你的朋友，Stack Overflow是你的老师，而官方文档则是你最可靠的伙伴！当然，如果你有更好的实践经验，也欢迎分享出来，让我们一起进步！</p><p>最后的最后，记住一句话：<strong>代码是写给人看的，顺便给机器执行！</strong> 让我们一起写出更有温度的代码和文档吧！🌈</p>]]></content>
    
    
    <summary type="html">揭秘Swagger与OpenAPI集成的终极攻略</summary>
    
    
    
    <category term="技术" scheme="http://www.formeasy.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Springboot" scheme="http://www.formeasy.cc/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>Anaconda安装与使用详细教程</title>
    <link href="http://www.formeasy.cc/2025/09/07/Python/Anaconda%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/"/>
    <id>http://www.formeasy.cc/2025/09/07/Python/Anaconda%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/</id>
    <published>2025-09-07T07:35:15.000Z</published>
    <updated>2025-09-07T07:44:35.917Z</updated>
    
    <content type="html"><![CDATA[<p>这篇 Anaconda 安装教程将带你从零开始，在 Windows 与 Linux 上完美部署 Python 数据分析环境；通过本教程，你不仅能掌握 Anaconda 的下载、安装与环境配置，更能学会如何利用 Anaconda 预装的 NumPy、Pandas、Matplotlib 等核心科学计算包，为高效的数据处理与分析工作打下坚实基础。</p><p><img src="1b965ee301b941ceab6d8a2c09ac5567.jpeg" alt="" /></p><p>Anaconda 是一个开源的 Python 和 R语言的发行版本，专为科学计算（数据科学、机器学习、大规模数据处理等）而设计。它极大地简化了包管理和环境管理的过程。Anaconda 预装了 <code>conda</code>、Python 以及数百个常用的科学计算、数据分析相关的包，如 NumPy, Pandas, Scikit-learn, Matplotlib 等，让你无需再为繁琐的依赖问题而烦恼。</p><h3 id="关于下载"><a class="markdownIt-Anchor" href="#关于下载"></a> <strong>关于下载</strong></h3><blockquote><p><strong>官网</strong>：<code>https://www.anaconda.com/download</code><br /><strong>国内镜像源 (推荐)</strong>：<code>https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</code></p></blockquote><p>由于Anaconda的服务器在国外，直接从官网下载可能会非常缓慢。因此，强烈建议使用国内的镜像源（如清华大学开源软件镜像站）进行下载，速度会快很多。</p><h3 id="一-windows-平台安装与使用"><a class="markdownIt-Anchor" href="#一-windows-平台安装与使用"></a> <strong>一、Windows 平台安装与使用</strong></h3><h4 id="11-下载-anaconda-安装包"><a class="markdownIt-Anchor" href="#11-下载-anaconda-安装包"></a> <strong>1.1 下载 Anaconda 安装包</strong></h4><p>首先，我们需要获取 Anaconda 的 Windows 安装程序。</p><p><strong>1.访问 Anaconda 官网</strong>：<br />打开浏览器，进入 Anaconda Distribution页面，点击Free Download</p><p><img src="4fd8ea5f657e4220a36d696e8a3dfc5b.png" alt="" /></p><p><strong>2.进入下载页面</strong>：<br />点击页面上的 “Get Started” 或 “Download” 按钮，通常会跳转到下载页面。</p><p><img src="a3f788eaf3da412b89834bf8e35e30de.png" alt="" /></p><p><strong>3.开始下载</strong>：<br />在 “Distribution Installers” 下方，点击 “Download” 按钮，页面可能会提示你注册或感谢下载。</p><p><img src="9131837761e94316a9adcab0ae82f844.png" alt="" /><br /><img src="15d2011ed14c4d8cb92ff0e17a4578f2.png" alt="" /><br /><strong>4.选择正确的版本 (使用清华镜像源)</strong>：<br />打开 <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">清华大学 Anaconda 镜像源</a>。在这里，你可以看到所有历史版本的列表。请根据你的系统选择合适的版本，通常是最新版本的 <code>Windows-x86_64.exe</code> 文件。</p><p><img src="d2f4de32625e48469d00668a4d07affc.png" alt="" /></p><h4 id="12-安装-anaconda"><a class="markdownIt-Anchor" href="#12-安装-anaconda"></a> <strong>1.2 安装 Anaconda</strong></h4><p>下载完成后，双击 <code>.exe</code> 安装包，按照以下步骤进行安装。</p><p><strong>1.欢迎界面</strong>：<br />点击 “Next &gt;”。</p><p><img src="59deb742ac264feba251b3dec24b6957.png" alt="" /></p><p><strong>2.许可协议</strong>：<br />阅读许可协议，然后点击 “I Agree”。<br /><img src="df8613cf3ace419c843d651bd328129b.png" alt="" /></p><p><strong>3.选择安装类型</strong>：</p><blockquote><p><code>Just Me</code>: 只为当前用户安装。<br /><code>All Users</code>: 为此计算机上的所有用户安装 (需要管理员权限)。<br /><strong>建议选择 “All Users”</strong>，这有助于避免某些权限问题。然后点击 “Next &gt;”。</p></blockquote><p><img src="50048334d1524c8196ad683190cc1d8b.png" alt="" /></p><p><strong>4.选择安装路径</strong>：<br />选择一个不含空格和中文字符的安装路径，例如 <code>E:\Anaconda</code>。然后点击 “Next &gt;”。</p><p><img src="b70810356678480abc78257d4e758256.png" alt="" /></p><p><strong>5.高级安装选项 (重要)</strong>：</p><blockquote><p><code>Create shortcuts</code>: 创建开始菜单快捷方式 (通常保持默认)。<br /><code>Register Anaconda3 as the system Python [版本号]</code>: <strong>强烈建议勾选此项</strong>。这会将 Anaconda 的 Python 注册为系统的默认 Python，使得 VSCode, PyCharm 等IDE能够自动检测到它。<br />点击 “Install” 开始安装。</p></blockquote><p><img src="0e78a41791ba4d38a6c025c980c724c8.png" alt="" /></p><p><strong>6.安装过程</strong>：<br />等待安装进度条走完。</p><p><img src="9436573a28dc4cdea40250984b6418de.png" alt="" /></p><p><strong>7.安装完成</strong>：<br />安装完成后，点击 “Next &gt;”</p><p><img src="a85eca4924da49bb982f04a9174f5e7b.png" alt="" /></p><p><strong>8.云端集成</strong>：<br />此页面是 Anaconda Cloud 的推广，可以直接点击 “Next &gt;”。</p><p><img src="fa255765b4eb4148a9bd448d308a23d5.png" alt="" /></p><p><strong>9.完成设置</strong>：<br />取消勾选 “Launch Anaconda Navigator” 和 “Welcome to Anaconda”，然后点击 “Finish” 完成安装。我们稍后会手动启动。</p><p><img src="0149de2d97a34736ae26d3d103a2420a.png" alt="" /></p><h4 id="13-配置环境变量-关键步骤"><a class="markdownIt-Anchor" href="#13-配置环境变量-关键步骤"></a> <strong>1.3 配置环境变量 (关键步骤)</strong></h4><p>为了能在任意命令行窗口 (CMD, PowerShell) 中使用 <code>conda</code> 和 <code>python</code> 命令，我们需要手动配置环境变量。</p><p><strong>1.打开系统属性</strong>：<br />在 Windows 搜索框中搜索“环境变量”，并选择“编辑系统环境变量”。在弹出的“系统属性”窗口中，点击“环境变量(N)…”。</p><p><img src="9a65b26cc1f348e99e264f7593a2d2bd.png" alt="" /></p><p><strong>2.编辑用户变量 Path</strong>：<br />在“用户变量”部分，找到名为 <code>Path</code> 的变量，选中它，然后点击“编辑(E)…”。</p><p><img src="c59343ea89ce47ca9cbda9b419f192d6.png" alt="" /></p><p><strong>3.添加 Anaconda 路径</strong>：<br />在“编辑环境变量”窗口中，点击“新建(N)”，然后依次添加以下三个路径 (请将 <code>E:\Anaconda</code> 替换为你的实际安装路径)：</p><blockquote><p><code>E:\Anaconda</code><br /><code>E:\Anaconda\Scripts</code><br /><code>E:\Anaconda\Library\bin</code></p></blockquote><p>添加完成后，点击“确定”。</p><p><img src="35b98964de204c4496aec2fcbec5892b.png" alt="" /></p><p><strong>4.确认并关闭</strong>：<br />在“环境变量”窗口和“系统属性”窗口中，都点击“确定”来保存更改。</p><p><img src="6ffc1a7b7c3e411881a45989390d5e89.png" alt="" /></p><h4 id="14-验证与使用"><a class="markdownIt-Anchor" href="#14-验证与使用"></a> <strong>1.4 验证与使用</strong></h4><p><strong>1.验证安装</strong>：<br /><strong>重新打开一个</strong> 新的 CMD 或 PowerShell 窗口，输入以下命令：</p><pre><code>conda</code></pre><p>如果能正确显示版本号，说明安装和环境变量配置成功。你也可以输入 <code>conda</code> 查看所有可用命令。</p><p><img src="278db209e5a945b8bf0c0e0d8cde51ee.png" alt="" /></p><p><strong>2.Anaconda Navigator (图形化界面)</strong>：<br />你可以在开始菜单中找到并打开 “Anaconda Navigator”，它提供了一个图形化的界面来管理环境和应用。</p><p><img src="31ac51418658400c9abc8bb404a14f9b.png" alt="" /></p><p><strong>3.启动 Jupyter Notebook</strong>：<br />Jupyter Notebook 是一个交互式的数据科学开发环境。在命令行中输入：</p><pre><code>jupyter notebook</code></pre><p><img src="d583f38c0a1441cbbd94ff390069b8ad.png" alt="" /><br /><img src="26f53d0e9e924ab5b1cc182502dcf7bd.png" alt="" /></p><h3 id="二-linux-平台安装与使用"><a class="markdownIt-Anchor" href="#二-linux-平台安装与使用"></a> <strong>二、Linux 平台安装与使用</strong></h3><p>在 Linux 上安装 Anaconda 通常更加快捷，主要通过命令行完成。</p><h4 id="21-下载-anaconda-安装脚本"><a class="markdownIt-Anchor" href="#21-下载-anaconda-安装脚本"></a> <strong>2.1 下载 Anaconda 安装脚本</strong></h4><p>打开终端，使用 <code>wget</code> 命令从清华镜像源下载适用于 Linux 的安装脚本。</p><pre><code># 进入一个临时下载目录cd /tmp# 下载安装脚本或者直接上传脚本 (请从清华镜像源官网确认最新的版本号)wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2025.06-0-Linux-x86_64.sh</code></pre><h4 id="22-执行安装脚本"><a class="markdownIt-Anchor" href="#22-执行安装脚本"></a> <strong>2.2 执行安装脚本</strong></h4><p>下载完成后，使用 <code>bash</code> 命令运行安装脚本。</p><pre><code>bash Anaconda3-2025.06-0-Linux-x86_64.sh</code></pre><p>接下来，安装程序会进入交互模式：</p><ol><li><strong>欢迎界面</strong>：按 <code>Enter</code> 继续。</li><li><strong>许可协议</strong>：按住 <code>Enter</code> 或 <code>空格键</code> 翻阅协议，直到最后，输入 <code>yes</code> 并按回车表示同意。</li><li><strong>安装路径</strong>：会提示确认安装路径，默认是 <code>~/anaconda3</code>。可以直接按 <code>Enter</code> 接受默认路径，或输入自定义路径后按回车。</li><li><strong>初始化 (重要)</strong>：最后会询问 “Do you wish the installer to initialize Anaconda3 by running conda init?”。<strong>强烈建议输入 <code>yes</code></strong> 并按回车。这会自动修改你的 <code>~/.bashrc</code> (或其他shell配置文件)，使得每次打开新终端时 <code>conda</code> 环境都能被正确加载。</li></ol><p><img src="af0ba5168dd64a5a8eaa38664baf3e45.png" alt="" /><br /><img src="47722366695d487fb1427e14f65bd631.png" alt="" /></p><h4 id="23-激活环境并验证"><a class="markdownIt-Anchor" href="#23-激活环境并验证"></a> <strong>2.3 激活环境并验证</strong></h4><p>安装完成后，你需要重新加载 shell 配置文件或打开一个新的终端。</p><pre><code>source ~/.bashrc</code></pre><p>此时，你会发现你的命令行提示符前面多了一个 <code>(base)</code>，这表示你正处于 Anaconda 的基础环境中。<br /><strong>验证安装：</strong></p><pre><code>conda --versionpython --version</code></pre><p><img src="744c616ef7df4dd9b6267b54b3f4398b.png" alt="" /></p><h4 id="24-常用-conda-命令"><a class="markdownIt-Anchor" href="#24-常用-conda-命令"></a> <strong>2.4 常用 Conda 命令</strong></h4><p><code>conda</code> 是 Anaconda 的核心，用于包管理和环境管理。</p><p><strong>包管理：</strong></p><pre><code># 查看当前环境中已安装的包conda list# 搜索一个包conda search pandas# 安装一个包 (以pandas为例)conda install pandas# 更新一个包conda update pandas# 卸载一个包conda remove pandas</code></pre><p><img src="482c852cd3e5496b8e3eae1d59b92317.png" alt="" /><br /><img src="b484ff5e46a14b6184cbc26b67d8da39.png" alt="" /><br /><img src="a0f512397eda4ce1b1ef788240ff0aac.png" alt="" /><br /><img src="4eb319b3959e4b04b7453bf84261fa63.png" alt="" /></p><p><strong>环境管理 (Conda 最强大的功能之一)</strong>：<br />为不同项目创建独立的环境可以避免包版本冲突。</p><pre><code># 列出所有已创建的环境conda env list# 创建一个名为 my_project 的新环境，并指定Python版本为3.9conda create -n my_project python=3.9# 创建新环境的同时安装一些包conda create -n data_analysis python=3.10 numpy pandas matplotlib# 激活(进入)一个环境conda activate my_project# 激活后，你的命令行提示符会变为 (my_project)# 在当前环境中安装包conda install scikit-learn# 退出当前环境，返回 base 环境conda deactivate# 删除一个环境及其所有包conda env remove -n my_project</code></pre><p><img src="77b7dcb368424e3eb64574e81e379afd.png" alt="" /><br /><img src="d163610297bf424ea5bdb63df099434c.png" alt="" /><br /><img src="e36faf2886c3494c85826f85f27f5f0a.png" alt="" /><br /><img src="9c49f6266531480f9db5e386f993ae60.png" alt="" /></p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> <strong>总结</strong></h3><p>Anaconda 极大地简化了数据科学项目的环境搭建和包管理工作。无论是在 Windows 还是 Linux 平台，通过几个简单的步骤，你就能快速拥有一个功能完备的数据分析环境。熟练掌握 <code>conda</code> 的环境管理命令，将使你的项目开发变得更加清晰和高效。</p>]]></content>
    
    
    <summary type="html">Anaconda安装与使用详细教程</summary>
    
    
    
    <category term="技术" scheme="http://www.formeasy.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Python" scheme="http://www.formeasy.cc/tags/Python/"/>
    
  </entry>
  
</feed>
